{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "backer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "BackUnbacked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum DataTypes.InterestRateMode",
						"name": "interestRateMode",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "borrowRate",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "Borrow",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "initiator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "enum DataTypes.InterestRateMode",
						"name": "interestRateMode",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "premium",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "FlashLoan",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalDebt",
						"type": "uint256"
					}
				],
				"name": "IsolationModeTotalDebtUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidatedCollateralAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "receiveAToken",
						"type": "bool"
					}
				],
				"name": "LiquidationCall",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "MintUnbacked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountMinted",
						"type": "uint256"
					}
				],
				"name": "MintedToTreasury",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "RebalanceStableBorrowRate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "repayer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "useATokens",
						"type": "bool"
					}
				],
				"name": "Repay",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowIndex",
						"type": "uint256"
					}
				],
				"name": "ReserveDataUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "ReserveUsedAsCollateralDisabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "ReserveUsedAsCollateralEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "Supply",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum DataTypes.InterestRateMode",
						"name": "interestRateMode",
						"type": "uint8"
					}
				],
				"name": "SwapBorrowRateMode",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "categoryId",
						"type": "uint8"
					}
				],
				"name": "UserEModeSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "ADDRESSES_PROVIDER",
				"outputs": [
					{
						"internalType": "contract IPoolAddressesProvider",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "BRIDGE_PROTOCOL_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FLASHLOAN_PREMIUM_TOTAL",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FLASHLOAN_PREMIUM_TO_PROTOCOL",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_NUMBER_RESERVES",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "backUnbacked",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "borrow",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "id",
						"type": "uint8"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "ltv",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "liquidationThreshold",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "liquidationBonus",
								"type": "uint16"
							},
							{
								"internalType": "address",
								"name": "priceSource",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "label",
								"type": "string"
							}
						],
						"internalType": "struct DataTypes.EModeCategory",
						"name": "config",
						"type": "tuple"
					}
				],
				"name": "configureEModeCategory",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "dropReserve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceFromBefore",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceToBefore",
						"type": "uint256"
					}
				],
				"name": "finalizeTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiverAddress",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "assets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "interestRateModes",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "flashLoan",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiverAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "flashLoanSimple",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.ReserveConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "id",
						"type": "uint8"
					}
				],
				"name": "getEModeCategoryData",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "ltv",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "liquidationThreshold",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "liquidationBonus",
								"type": "uint16"
							},
							{
								"internalType": "address",
								"name": "priceSource",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "label",
								"type": "string"
							}
						],
						"internalType": "struct DataTypes.EModeCategory",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "id",
						"type": "uint16"
					}
				],
				"name": "getReserveAddressById",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getReserveData",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "data",
										"type": "uint256"
									}
								],
								"internalType": "struct DataTypes.ReserveConfigurationMap",
								"name": "configuration",
								"type": "tuple"
							},
							{
								"internalType": "uint128",
								"name": "liquidityIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentLiquidityRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "variableBorrowIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentVariableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentStableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint40",
								"name": "lastUpdateTimestamp",
								"type": "uint40"
							},
							{
								"internalType": "uint16",
								"name": "id",
								"type": "uint16"
							},
							{
								"internalType": "address",
								"name": "aTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "variableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "interestRateStrategyAddress",
								"type": "address"
							},
							{
								"internalType": "uint128",
								"name": "accruedToTreasury",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "unbacked",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "isolationModeTotalDebt",
								"type": "uint128"
							}
						],
						"internalType": "struct DataTypes.ReserveData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getReserveNormalizedIncome",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getReserveNormalizedVariableDebt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReservesList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserAccountData",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalCollateralBase",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalDebtBase",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "availableBorrowsBase",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentLiquidationThreshold",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ltv",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "healthFactor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.UserConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserEMode",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "aTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "stableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "variableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "interestRateStrategyAddress",
						"type": "address"
					}
				],
				"name": "initReserve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "receiveAToken",
						"type": "bool"
					}
				],
				"name": "liquidationCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "assets",
						"type": "address[]"
					}
				],
				"name": "mintToTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "mintUnbacked",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "rebalanceStableBorrowRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "repay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					}
				],
				"name": "repayWithATokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "permitV",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "permitR",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "permitS",
						"type": "bytes32"
					}
				],
				"name": "repayWithPermit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "rescueTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "resetIsolationModeTotalDebt",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.ReserveConfigurationMap",
						"name": "configuration",
						"type": "tuple"
					}
				],
				"name": "setConfiguration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "rateStrategyAddress",
						"type": "address"
					}
				],
				"name": "setReserveInterestRateStrategyAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "categoryId",
						"type": "uint8"
					}
				],
				"name": "setUserEMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "useAsCollateral",
						"type": "bool"
					}
				],
				"name": "setUserUseReserveAsCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "supply",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "permitV",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "permitR",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "permitS",
						"type": "bytes32"
					}
				],
				"name": "supplyWithPermit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					}
				],
				"name": "swapBorrowRateMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "bridgeProtocolFee",
						"type": "uint256"
					}
				],
				"name": "updateBridgeProtocolFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint128",
						"name": "flashLoanPremiumTotal",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "flashLoanPremiumToProtocol",
						"type": "uint128"
					}
				],
				"name": "updateFlashloanPremiums",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Aave",
			"events": {
				"BackUnbacked(address,address,uint256,uint256)": {
					"details": "Emitted on backUnbacked()",
					"params": {
						"amount": "The amount added as backing",
						"backer": "The address paying for the backing",
						"fee": "The amount paid in fees",
						"reserve": "The address of the underlying asset of the reserve"
					}
				},
				"Borrow(address,address,address,uint256,uint8,uint256,uint16)": {
					"details": "Emitted on borrow() and flashLoan() when debt needs to be opened",
					"params": {
						"amount": "The amount borrowed out",
						"borrowRate": "The numeric rate at which the user has borrowed, expressed in ray",
						"interestRateMode": "The rate mode: 1 for Stable, 2 for Variable",
						"onBehalfOf": "The address that will be getting the debt",
						"referralCode": "The referral code used",
						"reserve": "The address of the underlying asset being borrowed",
						"user": "The address of the user initiating the borrow(), receiving the funds on borrow() or just initiator of the transaction on flashLoan()"
					}
				},
				"FlashLoan(address,address,address,uint256,uint8,uint256,uint16)": {
					"details": "Emitted on flashLoan()",
					"params": {
						"amount": "The amount flash borrowed",
						"asset": "The address of the asset being flash borrowed",
						"initiator": "The address initiating the flash loan",
						"interestRateMode": "The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt",
						"premium": "The fee flash borrowed",
						"referralCode": "The referral code used",
						"target": "The address of the flash loan receiver contract"
					}
				},
				"IsolationModeTotalDebtUpdated(address,uint256)": {
					"details": "Emitted on borrow(), repay() and liquidationCall() when using isolated assets",
					"params": {
						"asset": "The address of the underlying asset of the reserve",
						"totalDebt": "The total isolation mode debt for the reserve"
					}
				},
				"LiquidationCall(address,address,address,uint256,uint256,address,bool)": {
					"details": "Emitted when a borrower is liquidated.",
					"params": {
						"collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
						"debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
						"debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
						"liquidatedCollateralAmount": "The amount of collateral received by the liquidator",
						"liquidator": "The address of the liquidator",
						"receiveAToken": "True if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly",
						"user": "The address of the borrower getting liquidated"
					}
				},
				"MintUnbacked(address,address,address,uint256,uint16)": {
					"details": "Emitted on mintUnbacked()",
					"params": {
						"amount": "The amount of supplied assets",
						"onBehalfOf": "The beneficiary of the supplied assets, receiving the aTokens",
						"referralCode": "The referral code used",
						"reserve": "The address of the underlying asset of the reserve",
						"user": "The address initiating the supply"
					}
				},
				"MintedToTreasury(address,uint256)": {
					"details": "Emitted when the protocol treasury receives minted aTokens from the accrued interest.",
					"params": {
						"amountMinted": "The amount minted to the treasury",
						"reserve": "The address of the reserve"
					}
				},
				"RebalanceStableBorrowRate(address,address)": {
					"details": "Emitted on rebalanceStableBorrowRate()",
					"params": {
						"reserve": "The address of the underlying asset of the reserve",
						"user": "The address of the user for which the rebalance has been executed"
					}
				},
				"Repay(address,address,address,uint256,bool)": {
					"details": "Emitted on repay()",
					"params": {
						"amount": "The amount repaid",
						"repayer": "The address of the user initiating the repay(), providing the funds",
						"reserve": "The address of the underlying asset of the reserve",
						"useATokens": "True if the repayment is done using aTokens, `false` if done with underlying asset directly",
						"user": "The beneficiary of the repayment, getting his debt reduced"
					}
				},
				"ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)": {
					"details": "Emitted when the state of a reserve is updated.",
					"params": {
						"liquidityIndex": "The next liquidity index",
						"liquidityRate": "The next liquidity rate",
						"reserve": "The address of the underlying asset of the reserve",
						"stableBorrowRate": "The next stable borrow rate",
						"variableBorrowIndex": "The next variable borrow index",
						"variableBorrowRate": "The next variable borrow rate"
					}
				},
				"ReserveUsedAsCollateralDisabled(address,address)": {
					"details": "Emitted on setUserUseReserveAsCollateral()",
					"params": {
						"reserve": "The address of the underlying asset of the reserve",
						"user": "The address of the user enabling the usage as collateral"
					}
				},
				"ReserveUsedAsCollateralEnabled(address,address)": {
					"details": "Emitted on setUserUseReserveAsCollateral()",
					"params": {
						"reserve": "The address of the underlying asset of the reserve",
						"user": "The address of the user enabling the usage as collateral"
					}
				},
				"Supply(address,address,address,uint256,uint16)": {
					"details": "Emitted on supply()",
					"params": {
						"amount": "The amount supplied",
						"onBehalfOf": "The beneficiary of the supply, receiving the aTokens",
						"referralCode": "The referral code used",
						"reserve": "The address of the underlying asset of the reserve",
						"user": "The address initiating the supply"
					}
				},
				"SwapBorrowRateMode(address,address,uint8)": {
					"details": "Emitted on swapBorrowRateMode()",
					"params": {
						"interestRateMode": "The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable",
						"reserve": "The address of the underlying asset of the reserve",
						"user": "The address of the user swapping his rate mode"
					}
				},
				"UserEModeSet(address,uint8)": {
					"details": "Emitted when the user selects a certain asset category for eMode",
					"params": {
						"categoryId": "The category id",
						"user": "The address of the user"
					}
				},
				"Withdraw(address,address,address,uint256)": {
					"details": "Emitted on withdraw()",
					"params": {
						"amount": "The amount to be withdrawn",
						"reserve": "The address of the underlying asset being withdrawn",
						"to": "The address that will receive the underlying",
						"user": "The address initiating the withdrawal, owner of aTokens"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"ADDRESSES_PROVIDER()": {
					"returns": {
						"_0": "The address of the PoolAddressesProvider"
					}
				},
				"BRIDGE_PROTOCOL_FEE()": {
					"returns": {
						"_0": "The bridge fee sent to the protocol treasury"
					}
				},
				"FLASHLOAN_PREMIUM_TOTAL()": {
					"returns": {
						"_0": "The total fee on flashloans"
					}
				},
				"FLASHLOAN_PREMIUM_TO_PROTOCOL()": {
					"returns": {
						"_0": "The flashloan fee sent to the protocol treasury"
					}
				},
				"MAX_NUMBER_RESERVES()": {
					"returns": {
						"_0": "The maximum number of reserves supported"
					}
				},
				"MAX_STABLE_RATE_BORROW_SIZE_PERCENT()": {
					"returns": {
						"_0": "The percentage of available liquidity to borrow, expressed in bps"
					}
				},
				"backUnbacked(address,uint256,uint256)": {
					"params": {
						"amount": "The amount to back",
						"asset": "The address of the underlying asset to back",
						"fee": "The amount paid in fees"
					},
					"returns": {
						"_0": "The backed amount"
					}
				},
				"borrow(address,uint256,uint256,uint16,address)": {
					"params": {
						"amount": "The amount to be borrowed",
						"asset": "The address of the underlying asset to borrow",
						"interestRateMode": "The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable",
						"onBehalfOf": "The address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance",
						"referralCode": "The code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))": {
					"details": "In eMode, the protocol allows very high borrowing power to borrow assets of the same category. The category 0 is reserved as it's the default for volatile assets",
					"params": {
						"config": "The configuration of the category",
						"id": "The id of the category"
					}
				},
				"deposit(address,uint256,address,uint16)": {
					"details": "Deprecated: Use the `supply` function instead",
					"params": {
						"amount": "The amount to be supplied",
						"asset": "The address of the underlying asset to supply",
						"onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet",
						"referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"dropReserve(address)": {
					"details": "Only callable by the PoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					}
				},
				"finalizeTransfer(address,address,address,uint256,uint256,uint256)": {
					"details": "Only callable by the overlying aToken of the `asset`",
					"params": {
						"amount": "The amount being transferred/withdrawn",
						"asset": "The address of the underlying asset of the aToken",
						"balanceFromBefore": "The aToken balance of the `from` user before the transfer",
						"balanceToBefore": "The aToken balance of the `to` user before the transfer",
						"from": "The user from which the aTokens are transferred",
						"to": "The user receiving the aTokens"
					}
				},
				"flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)": {
					"details": "IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://docs.aave.com/developers/",
					"params": {
						"amounts": "The amounts of the assets being flash-borrowed",
						"assets": "The addresses of the assets being flash-borrowed",
						"interestRateModes": "Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address",
						"onBehalfOf": "The address  that will receive the debt in the case of using on `modes` 1 or 2",
						"params": "Variadic packed params to pass to the receiver as extra information",
						"receiverAddress": "The address of the contract receiving the funds, implementing IFlashLoanReceiver interface",
						"referralCode": "The code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"flashLoanSimple(address,address,uint256,bytes,uint16)": {
					"details": "IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://docs.aave.com/developers/",
					"params": {
						"amount": "The amount of the asset being flash-borrowed",
						"asset": "The address of the asset being flash-borrowed",
						"params": "Variadic packed params to pass to the receiver as extra information",
						"receiverAddress": "The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface",
						"referralCode": "The code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"getConfiguration(address)": {
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The configuration of the reserve"
					}
				},
				"getEModeCategoryData(uint8)": {
					"params": {
						"id": "The id of the category"
					},
					"returns": {
						"_0": "The configuration data of the category"
					}
				},
				"getReserveAddressById(uint16)": {
					"params": {
						"id": "The id of the reserve as stored in the DataTypes.ReserveData struct"
					},
					"returns": {
						"_0": "The address of the reserve associated with id"
					}
				},
				"getReserveData(address)": {
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The state and configuration data of the reserve"
					}
				},
				"getReserveNormalizedIncome(address)": {
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The reserve's normalized income"
					}
				},
				"getReserveNormalizedVariableDebt(address)": {
					"details": "WARNING: This function is intended to be used primarily by the protocol itself to get a \"dynamic\" variable index based on time, current stored index and virtual rate at the current moment (approx. a borrower would get if opening a position). This means that is always used in combination with variable debt supply/balances. If using this function externally, consider that is possible to have an increasing normalized variable debt that is not equivalent to how the variable debt index would be updated in storage (e.g. only updates with non-zero variable debt supply)",
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The reserve normalized variable debt"
					}
				},
				"getReservesList()": {
					"details": "It does not include dropped reserves",
					"returns": {
						"_0": "The addresses of the underlying assets of the initialized reserves"
					}
				},
				"getUserAccountData(address)": {
					"params": {
						"user": "The address of the user"
					},
					"returns": {
						"availableBorrowsBase": "The borrowing power left of the user in the base currency used by the price feed",
						"currentLiquidationThreshold": "The liquidation threshold of the user",
						"healthFactor": "The current health factor of the user",
						"ltv": "The loan to value of The user",
						"totalCollateralBase": "The total collateral of the user in the base currency used by the price feed",
						"totalDebtBase": "The total debt of the user in the base currency used by the price feed"
					}
				},
				"getUserConfiguration(address)": {
					"params": {
						"user": "The user address"
					},
					"returns": {
						"_0": "The configuration of the user"
					}
				},
				"getUserEMode(address)": {
					"params": {
						"user": "The address of the user"
					},
					"returns": {
						"_0": "The eMode id"
					}
				},
				"initReserve(address,address,address,address,address)": {
					"details": "Only callable by the PoolConfigurator contract",
					"params": {
						"aTokenAddress": "The address of the aToken that will be assigned to the reserve",
						"asset": "The address of the underlying asset of the reserve",
						"interestRateStrategyAddress": "The address of the interest rate strategy contract",
						"stableDebtAddress": "The address of the StableDebtToken that will be assigned to the reserve",
						"variableDebtAddress": "The address of the VariableDebtToken that will be assigned to the reserve"
					}
				},
				"liquidationCall(address,address,address,uint256,bool)": {
					"params": {
						"collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
						"debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
						"debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
						"receiveAToken": "True if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly",
						"user": "The address of the borrower getting liquidated"
					}
				},
				"mintToTreasury(address[])": {
					"params": {
						"assets": "The list of reserves for which the minting needs to be executed"
					}
				},
				"mintUnbacked(address,uint256,address,uint16)": {
					"params": {
						"amount": "The amount to mint",
						"asset": "The address of the underlying asset to mint",
						"onBehalfOf": "The address that will receive the aTokens",
						"referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"rebalanceStableBorrowRate(address,address)": {
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"user": "The address of the user to be rebalanced"
					}
				},
				"repay(address,uint256,uint256,address)": {
					"params": {
						"amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
						"asset": "The address of the borrowed underlying asset previously borrowed",
						"interestRateMode": "The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
						"onBehalfOf": "The address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed"
					},
					"returns": {
						"_0": "The final amount repaid"
					}
				},
				"repayWithATokens(address,uint256,uint256)": {
					"details": "Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken balance is not enough to cover the whole debt",
					"params": {
						"amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
						"asset": "The address of the borrowed underlying asset previously borrowed",
						"interestRateMode": "The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable"
					},
					"returns": {
						"_0": "The final amount repaid"
					}
				},
				"repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)": {
					"params": {
						"amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
						"asset": "The address of the borrowed underlying asset previously borrowed",
						"deadline": "The deadline timestamp that the permit is valid",
						"interestRateMode": "The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
						"onBehalfOf": "Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed",
						"permitR": "The R parameter of ERC712 permit sig",
						"permitS": "The S parameter of ERC712 permit sig",
						"permitV": "The V parameter of ERC712 permit sig"
					},
					"returns": {
						"_0": "The final amount repaid"
					}
				},
				"rescueTokens(address,address,uint256)": {
					"params": {
						"amount": "The amount of token to transfer",
						"to": "The address of the recipient",
						"token": "The address of the token"
					}
				},
				"resetIsolationModeTotalDebt(address)": {
					"details": "It requires the given asset has zero debt ceiling",
					"params": {
						"asset": "The address of the underlying asset to reset the isolationModeTotalDebt"
					}
				},
				"setConfiguration(address,(uint256))": {
					"details": "Only callable by the PoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the reserve",
						"configuration": "The new configuration bitmap"
					}
				},
				"setReserveInterestRateStrategyAddress(address,address)": {
					"details": "Only callable by the PoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the reserve",
						"rateStrategyAddress": "The address of the interest rate strategy contract"
					}
				},
				"setUserEMode(uint8)": {
					"params": {
						"categoryId": "The id of the category"
					}
				},
				"setUserUseReserveAsCollateral(address,bool)": {
					"params": {
						"asset": "The address of the underlying asset supplied",
						"useAsCollateral": "True if the user wants to use the supply as collateral, false otherwise"
					}
				},
				"supply(address,uint256,address,uint16)": {
					"params": {
						"amount": "The amount to be supplied",
						"asset": "The address of the underlying asset to supply",
						"onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet",
						"referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)": {
					"params": {
						"amount": "The amount to be supplied",
						"asset": "The address of the underlying asset to supply",
						"deadline": "The deadline timestamp that the permit is valid",
						"onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet",
						"permitR": "The R parameter of ERC712 permit sig",
						"permitS": "The S parameter of ERC712 permit sig",
						"permitV": "The V parameter of ERC712 permit sig",
						"referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"swapBorrowRateMode(address,uint256)": {
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"interestRateMode": "The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable"
					}
				},
				"updateBridgeProtocolFee(uint256)": {
					"params": {
						"bridgeProtocolFee": "The part of the premium sent to the protocol treasury"
					}
				},
				"updateFlashloanPremiums(uint128,uint128)": {
					"details": "The total premium is calculated on the total borrowed amountThe premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`Only callable by the PoolConfigurator contract",
					"params": {
						"flashLoanPremiumToProtocol": "The part of the premium sent to the protocol treasury, expressed in bps",
						"flashLoanPremiumTotal": "The total premium, expressed in bps"
					}
				},
				"withdraw(address,uint256,address)": {
					"params": {
						"amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
						"asset": "The address of the underlying asset to withdraw",
						"to": "The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
					},
					"returns": {
						"_0": "The final amount withdrawn"
					}
				}
			},
			"title": "IPool",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"ADDRESSES_PROVIDER()": {
					"notice": "Returns the PoolAddressesProvider connected to this contract"
				},
				"BRIDGE_PROTOCOL_FEE()": {
					"notice": "Returns the part of the bridge fees sent to protocol"
				},
				"FLASHLOAN_PREMIUM_TOTAL()": {
					"notice": "Returns the total fee on flash loans"
				},
				"FLASHLOAN_PREMIUM_TO_PROTOCOL()": {
					"notice": "Returns the part of the flashloan fees sent to protocol"
				},
				"MAX_NUMBER_RESERVES()": {
					"notice": "Returns the maximum number of reserves supported to be listed in this Pool"
				},
				"MAX_STABLE_RATE_BORROW_SIZE_PERCENT()": {
					"notice": "Returns the percentage of available liquidity that can be borrowed at once at stable rate"
				},
				"backUnbacked(address,uint256,uint256)": {
					"notice": "Back the current unbacked underlying with `amount` and pay `fee`."
				},
				"borrow(address,uint256,uint256,uint16,address)": {
					"notice": "Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already supplied enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`"
				},
				"configureEModeCategory(uint8,(uint16,uint16,uint16,address,string))": {
					"notice": "Configures a new category for the eMode."
				},
				"deposit(address,uint256,address,uint16)": {
					"notice": "Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC"
				},
				"dropReserve(address)": {
					"notice": "Drop a reserve"
				},
				"finalizeTransfer(address,address,address,uint256,uint256,uint256)": {
					"notice": "Validates and finalizes an aToken transfer"
				},
				"flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)": {
					"notice": "Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned."
				},
				"flashLoanSimple(address,address,uint256,bytes,uint16)": {
					"notice": "Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned."
				},
				"getConfiguration(address)": {
					"notice": "Returns the configuration of the reserve"
				},
				"getEModeCategoryData(uint8)": {
					"notice": "Returns the data of an eMode category"
				},
				"getReserveAddressById(uint16)": {
					"notice": "Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct"
				},
				"getReserveData(address)": {
					"notice": "Returns the state and configuration of the reserve"
				},
				"getReserveNormalizedIncome(address)": {
					"notice": "Returns the normalized income of the reserve"
				},
				"getReserveNormalizedVariableDebt(address)": {
					"notice": "Returns the normalized variable debt per unit of asset"
				},
				"getReservesList()": {
					"notice": "Returns the list of the underlying assets of all the initialized reserves"
				},
				"getUserAccountData(address)": {
					"notice": "Returns the user account data across all the reserves"
				},
				"getUserConfiguration(address)": {
					"notice": "Returns the configuration of the user across all the reserves"
				},
				"getUserEMode(address)": {
					"notice": "Returns the eMode the user is using"
				},
				"initReserve(address,address,address,address,address)": {
					"notice": "Initializes a reserve, activating it, assigning an aToken and debt tokens and an interest rate strategy"
				},
				"liquidationCall(address,address,address,uint256,bool)": {
					"notice": "Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk"
				},
				"mintToTreasury(address[])": {
					"notice": "Mints the assets accrued through the reserve factor to the treasury in the form of aTokens"
				},
				"mintUnbacked(address,uint256,address,uint16)": {
					"notice": "Mints an `amount` of aTokens to the `onBehalfOf`"
				},
				"rebalanceStableBorrowRate(address,address)": {
					"notice": "Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too        much has been borrowed at a stable rate and suppliers are not earning enough"
				},
				"repay(address,uint256,uint256,address)": {
					"notice": "Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address"
				},
				"repayWithATokens(address,uint256,uint256)": {
					"notice": "Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the equivalent debt tokens - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens"
				},
				"repayWithPermit(address,uint256,uint256,address,uint256,uint8,bytes32,bytes32)": {
					"notice": "Repay with transfer approval of asset to be repaid done via permit function see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713"
				},
				"rescueTokens(address,address,uint256)": {
					"notice": "Rescue and transfer tokens locked in this contract"
				},
				"resetIsolationModeTotalDebt(address)": {
					"notice": "Resets the isolation mode total debt of the given asset to zero"
				},
				"setConfiguration(address,(uint256))": {
					"notice": "Sets the configuration bitmap of the reserve as a whole"
				},
				"setReserveInterestRateStrategyAddress(address,address)": {
					"notice": "Updates the address of the interest rate strategy contract"
				},
				"setUserEMode(uint8)": {
					"notice": "Allows a user to use the protocol in eMode"
				},
				"setUserUseReserveAsCollateral(address,bool)": {
					"notice": "Allows suppliers to enable/disable a specific supplied asset as collateral"
				},
				"supply(address,uint256,address,uint16)": {
					"notice": "Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC"
				},
				"supplyWithPermit(address,uint256,address,uint16,uint256,uint8,bytes32,bytes32)": {
					"notice": "Supply with transfer approval of asset to be supplied done via permit function see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713"
				},
				"swapBorrowRateMode(address,uint256)": {
					"notice": "Allows a borrower to swap his debt between stable and variable mode, or vice versa"
				},
				"updateBridgeProtocolFee(uint256)": {
					"notice": "Updates the protocol fee on the bridging"
				},
				"updateFlashloanPremiums(uint128,uint128)": {
					"notice": "Updates flash loan premiums. Flash loan premium consists of two parts: - A part is sent to aToken holders as extra, one time accumulated interest - A part is collected by the protocol treasury"
				},
				"withdraw(address,uint256,address)": {
					"notice": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC"
				}
			},
			"notice": "Defines the basic interface for an Aave Pool.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/npm/@aave/core-v3/contracts/interfaces/IPool.sol": "IPool"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/npm/@aave/core-v3/contracts/interfaces/IPool.sol": {
			"keccak256": "0x4147e738e86f489f1ea95218c05c919a7d803e1836061bd585c2c9c4ebea7f6e",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://f57b2f7352bc30583a1c5fb6dbe2a254b29580b30e1042b7c0c9ace71623c0d2",
				"dweb:/ipfs/QmdBjF5Sg62RS231UBHspQVJ2eXoHzoo1APhxnSjq4TMZ6"
			]
		},
		".deps/npm/@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol": {
			"keccak256": "0x9fb52c60fe126985c8ddba7678e8bc3c70a0565ca42997d8366575df86763301",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://5fe38259079f09ce73572cd3b975bc4708e6303de89f242d47c9492803469d96",
				"dweb:/ipfs/QmWnWL6PqmYn2H4yAqhQSHGRTyaDB9w4pzazJ9qxarKii9"
			]
		},
		".deps/npm/@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol": {
			"keccak256": "0x771cb99fd8519c974f7e12130387c4d9a997a6e8d0ac10e4303b842fe53efa88",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://0f41689d1d58bc13678c749bae8830f5a8b19b89cd135e962bf07d483350f828",
				"dweb:/ipfs/QmQSNGDxjYGqT1GU2CZzsWUTNcAtcfkg1jDGTH516nCAfN"
			]
		}
	},
	"version": 1
}