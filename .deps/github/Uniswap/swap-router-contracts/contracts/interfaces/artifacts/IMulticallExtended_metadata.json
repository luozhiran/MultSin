{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "previousBlockhash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"multicall(bytes32,bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract",
						"previousBlockhash": "The expected parent blockHash"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				},
				"multicall(bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				},
				"multicall(uint256,bytes[])": {
					"details": "The `msg.value` should not be trusted for any method callable from multicall.",
					"params": {
						"data": "The encoded function data for each of the calls to make to this contract",
						"deadline": "The time by which this function must be called before failing"
					},
					"returns": {
						"results": "The results from each of the calls passed in via data"
					}
				}
			},
			"title": "MulticallExtended interface",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"multicall(bytes32,bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				},
				"multicall(bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				},
				"multicall(uint256,bytes[])": {
					"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
				}
			},
			"notice": "Enables calling multiple methods in a single call to the contract with optional validation",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/github/Uniswap/swap-router-contracts/contracts/interfaces/IMulticallExtended.sol": "IMulticallExtended"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 2000
		},
		"remappings": []
	},
	"sources": {
		".deps/github/Uniswap/swap-router-contracts/contracts/interfaces/IMulticallExtended.sol": {
			"keccak256": "0xcf6ffb20e028fb034d33029009b8c458008614065fe997c8bbb35b8ee6f9c316",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d8f6f0ae7086c3bfa9649b98ff42a88c5c511b142bba50dbc61d5e33cce3aa4a",
				"dweb:/ipfs/QmYp2cP1STBqriUwLAPrN2irUWJVzFxFxadcS3ouZZ76wD"
			]
		},
		"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol": {
			"keccak256": "0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016",
				"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD"
			]
		}
	},
	"version": 1
}