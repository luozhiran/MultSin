{
	"id": "d98d9925c00989ce0fa020953a077c2f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.22",
	"solcLongVersion": "0.8.22+commit.4fc1097e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/uniswap/SwapToken.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.7.5;\r\npragma abicoder v2;\r\n\r\nimport \"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\";\r\nimport \"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol\";\r\nimport \"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol\";\r\nimport \"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol\";\r\n// import \"@uniswap/v3-periphery/contracts/interfaces/external/IWETH9.sol\";\r\nimport \"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\";\r\nimport \"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol\";\r\nimport \"../interfaces/IUniswapRouter.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\nimport \"../interfaces/IIERC20.sol\";\r\nimport \"../modifys/MulSigModify.sol\";\r\nimport \"../interfaces/IERC721Receiver.sol\";\r\n\r\nabstract contract SwapToken is MulSigModify, IERC721Receiver {\r\n    IUniswapRouter public constant uniswapRouter = IUniswapRouter(0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E);\r\n    INonfungiblePositionManager public nonfungiblePositionManager = INonfungiblePositionManager(0x1238536071E1c677A632429e3655c799b22cDA52);\r\n    IIERC20 private constant uniToken = IIERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);\r\n    IWETH private constant wethToken = IWETH(0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14);\r\n    \r\n    int24 private constant MIN_TICK = -887272;\r\n    int24 private constant MAX_TICK = -MIN_TICK;\r\n    int24 private constant TICK_SPACING = 60;\r\n    \r\n\r\n    /// @dev 实现' onERC721Received '，使该合约可以接收erc721代币的托管\r\n    function onERC721Received( address operator, address, uint256 tokenId, bytes calldata) external pure override returns (bytes4) {\r\n        // 获取职位信息\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    /// @notice 没有充足的代币，报错\r\n    /// @dev 检查交换代币，输入代币数量\r\n    modifier checkInputToken(address inputToken, uint256 amountIn) {\r\n        require(address(0) != inputToken, \"invalid token\");\r\n        require(amountIn > 0, \"invalid token count\");\r\n        uint256 count = IIERC20(inputToken).balanceOf(address(this));\r\n        require(count >= amountIn, \"no enough tokens!\");\r\n        _;\r\n    }\r\n    \r\n\r\n    /// @dev 交换代币\r\n    /// @param inputToken 输入代币\r\n    /// @param outputToken 输出代币\r\n    /// @param amountIn 交换数量\r\n    function swapTokens(address inputToken, address outputToken, uint256 amountIn) external onlyOwner onlyTraderPeopleOrOwner returns (bool, uint256) {\r\n        // 授权uniswapRouter可以使用合约中的代币\r\n        TransferHelper.safeApprove(inputToken, address(uniswapRouter), amountIn);\r\n         IV3SwapRouter.ExactInputSingleParams memory params = IV3SwapRouter\r\n            .ExactInputSingleParams({\r\n                tokenIn: inputToken,\r\n                tokenOut: outputToken,\r\n                fee: 3000,\r\n                recipient: address(this),\r\n                amountIn: amountIn,\r\n                amountOutMinimum: 0,\r\n                sqrtPriceLimitX96: 0\r\n            });\r\n        bytes memory exactInputSingleBytes = abi.encodeWithSignature(\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\", params);\r\n        (bool success, bytes memory returnDatas) = address(uniswapRouter).call(exactInputSingleBytes);\r\n        uint256 amountOut = abi.decode(returnDatas, (uint256));\r\n        return (success, amountOut);\r\n    }\r\n\r\n    /// @notice 添加流动性\r\n    /// @dev 添加流动性\r\n    /// @param inputToken1 代币地址\r\n    /// @param inputToken1Count 代币数量\r\n    /// @param inputToken2 代币地址\r\n    /// @param inputToken2Count 代币数量\r\n    function mintNewPosition(address inputToken1 , uint256 inputToken1Count,address inputToken2 , uint256 inputToken2Count)\r\n     external onlyOwner onlyTraderPeopleOrOwner returns (uint256 tokenId, uint128 liquidity, uint256 amount0,uint256 amount1) {\r\n        TransferHelper.safeApprove(inputToken1, address(nonfungiblePositionManager), inputToken1Count );\r\n        TransferHelper.safeApprove(inputToken2, address(nonfungiblePositionManager), inputToken2Count );\r\n        INonfungiblePositionManager.MintParams memory params =\r\n        INonfungiblePositionManager.MintParams({\r\n            token0: inputToken1,\r\n            token1: inputToken2,\r\n            fee: 3000,\r\n            tickLower: (MIN_TICK / TICK_SPACING) * TICK_SPACING,\r\n            tickUpper: (MAX_TICK / TICK_SPACING) * TICK_SPACING,\r\n            amount0Desired: inputToken1Count,\r\n            amount1Desired: inputToken2Count,\r\n            amount0Min: 0,\r\n            amount1Min: 0,\r\n            recipient: address(this),\r\n            deadline: block.timestamp\r\n        });\r\n\r\n        // (tokenId, liquidity, amount0, amount1) = nonfungiblePositionManager.mint(params);\r\n        bytes memory minitParamsBytes = abi.encodeWithSignature(\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\", params);\r\n        (bool success, bytes memory mintDataBytes) = address(nonfungiblePositionManager).call(minitParamsBytes);\r\n        (tokenId, liquidity, amount0, amount1) = abi.decode(mintDataBytes, (uint256, uint128, uint256, uint256 ));\r\n        if (amount0 < inputToken1Count) {\r\n            TransferHelper.safeApprove( inputToken1, address(nonfungiblePositionManager), 0 );\r\n            uint256 refund0 = inputToken1Count - amount0;\r\n            TransferHelper.safeTransfer(inputToken1, address(this), refund0);\r\n        }\r\n        if (amount1 < inputToken2Count) {\r\n             TransferHelper.safeApprove( inputToken2, address(nonfungiblePositionManager), 0 );\r\n            uint256 refund1 = inputToken2Count - amount0;\r\n            TransferHelper.safeTransfer(inputToken2, address(this), refund1);\r\n        }\r\n\r\n        return (tokenId, liquidity,amount0,amount1);\r\n     }\r\n\r\n\r\n    /// @notice 收取与提供的流动性相关的费用\r\n    /// @dev 合约必须持有erc721代币才能收取费用\r\n    /// @param tokenId The id of the erc721 token\r\n    /// @return amount0 在token0中收取的费用金额\r\n    /// @return amount1 在token1中收取的费用金额\r\n    function collectAllFees(uint256 tokenId) external onlyOwner onlyTraderPeopleOrOwner returns (uint256 amount0, uint256 amount1)  {\r\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams({\r\n                tokenId: tokenId,\r\n                recipient: address(this),\r\n                amount0Max: type(uint128).max,\r\n                amount1Max: type(uint128).max\r\n            });\r\n\r\n        // bytes memory paramsBytes = abi.encodeWithSignature(\"collect((uint256 ,address,uint128 ,uint128))\", params);\r\n        // (bool success, bytes memory returnDatas) = address(nonfungiblePositionManager).call(paramsBytes);\r\n        // require(success, 'exec collectAllFees faile');\r\n        // (amount0, amount1) = abi.decode(returnDatas, (uint256, uint256 ));\r\n        (amount0, amount1) = nonfungiblePositionManager.collect(params);\r\n        return (amount0, amount1);\r\n    }\r\n\r\n    /// @notice 减少流动性: 将当前流动性减少一半的函数。一个例子来显示如何调用'减少流动性'函数定义在外围。\r\n    /// @param tokenId The id of the erc721 token\r\n    /// @return amount0 The amount received back in token0\r\n    /// @return amount1 The amount returned back in token1\r\n    function decreaseLiquidityInHalf(uint256 tokenId,uint128 liquidity) external onlyOwner onlyTraderPeopleOrOwner returns (uint256 amount0, uint256 amount1) {\r\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params =\r\n        INonfungiblePositionManager.DecreaseLiquidityParams({\r\n            tokenId: tokenId,\r\n            liquidity: liquidity,\r\n            amount0Min: 0,\r\n            amount1Min: 0,\r\n            deadline: block.timestamp\r\n        });\r\n\r\n        (amount0, amount1) = nonfungiblePositionManager.decreaseLiquidity(params);\r\n        return (amount0, amount1);\r\n    }\r\n\r\n    /// @notice 增加当前范围内的流动性\r\n    /// @dev Pool must be initialized already to add liquidity\r\n    /// @param tokenId The id of the erc721 token\r\n    /// @param amount0 The amount to add of token0\r\n    /// @param amount1 The amount to add of token1\r\n    function increaseLiquidityCurrentRange(uint256 tokenId,address inputToken1, uint256 amountAdd0, address inputToken2,uint256 amountAdd1) external onlyOwner onlyTraderPeopleOrOwner returns ( uint128 liquidity, uint256 amount0, uint256 amount1){\r\n        \r\n        TransferHelper.safeApprove(inputToken1, address(nonfungiblePositionManager), amountAdd0 );\r\n        TransferHelper.safeApprove(inputToken2, address(nonfungiblePositionManager), amountAdd1 );\r\n\r\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params =\r\n        INonfungiblePositionManager.IncreaseLiquidityParams({\r\n            tokenId: tokenId,\r\n            amount0Desired: amountAdd0,\r\n            amount1Desired: amountAdd1,\r\n            amount0Min: 0,\r\n            amount1Min: 0,\r\n            deadline: block.timestamp\r\n        });\r\n\r\n        (liquidity, amount0, amount1) = nonfungiblePositionManager.increaseLiquidity(params);\r\n\r\n        return (liquidity, amount0, amount1);\r\n    }\r\n\r\n\r\n    /// @notice 销毁流动性仓位\r\n    /// @dev 烧掉一个令牌ID，并将其从NFT合约中删除。代币必须具有0流动性和所有代币\r\n    function burn(uint256 tokenId) external onlyOwner onlyTraderPeopleOrOwner {\r\n        //  bytes memory paramsBytes = abi.encodeWithSignature(\"burn(uint256)\", tokenId);\r\n        //  (bool success, ) = address(nonfungiblePositionManager).call(paramsBytes);\r\n        nonfungiblePositionManager.burn(tokenId);\r\n    }\r\n\r\n\r\n    //888888888888888888888888888888888888 测试代码 888888888888888888888888888888888888\r\n\r\n    \r\n    function unwrapEther() public onlyOwner  {\r\n        wethToken.withdraw(wethToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function wrapEther(uint256 count) external onlyOwner {\r\n        require(address(this).balance > 0, \"no money\");\r\n        if (count == 0) {\r\n            wethToken.deposit{ value: address(this).balance }();\r\n        } else {\r\n            wethToken.deposit{ value: count }();\r\n        }   \r\n    }\r\n\r\n    function uniBalance() public view returns (uint256){\r\n         return uniToken.balanceOf(address(this));\r\n    }\r\n\r\n     function ethBalance() public view returns (uint256){\r\n         return wethToken.balanceOf(address(this));\r\n    }\r\n\r\n}"
			},
			"contracts/interfaces/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}"
			},
			"contracts/modifys/MulSigModify.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\n\r\nimport \"./../interfaces/IOwner.sol\";\r\nimport \"./../interfaces/ITrader.sol\";\r\nimport \"./../interfaces/ITransaction.sol\";\r\n\r\n/// @dev 多签合约的判定器\r\nabstract contract MulSigModify is IOwner,ITrader,ITransaction {\r\n    /// @dev 创建合约实例条件\r\n    modifier checkConstructor(\r\n        address _traderPeople,\r\n        uint _ownerCount,\r\n        uint _approvalThresholdCount\r\n    ) {\r\n        require(address(0) != _traderPeople, \"invalid trader people\");\r\n        require(_ownerCount > 0, \"owner required\");\r\n        require(\r\n            _approvalThresholdCount > 0 &&\r\n                _approvalThresholdCount <= _ownerCount,\r\n            \"invalid number of confirmations\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev 校验是否是合约所有者\r\n    modifier onlyOwner() {\r\n        require(this.isOwner(msg.sender), \"only owner\");\r\n        _;\r\n    }\r\n\r\n    /// @dev 校验交易是否存在，交易不存在抛出异常\r\n    modifier txExists(uint _txIndex) {\r\n        require(this.transactionNotExit(_txIndex), \"tx not exist\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev 校验交易是否已经执行,如果已经执行抛出异常\r\n     */\r\n    modifier notExecuted(uint _txIndex) {\r\n        require(this.transactionNotExec(_txIndex), \"tx executed\");\r\n        _;\r\n    }\r\n\r\n    /// @dev 校验交易是否已经确认，交易已经确认抛出异常\r\n    modifier notConfirmed(uint _txIndex) {\r\n        require(\r\n            this.transactionNotConfirmed(_txIndex),\r\n            \"already confirmed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev  校验是否是合约所有者认可的交易员\r\n    modifier onlyTraderPeopleOrOwner() {\r\n        require(\r\n            this.isTrader(msg.sender) || this.isOwner(msg.sender),\r\n            \"not trader people or not owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // function isOwner() external pure override returns (bool) {\r\n    //     return false;\r\n    // }\r\n\r\n    // function isTrader() external pure override returns (bool) {\r\n    //     return false;\r\n    // }\r\n\r\n    // function transactionNotExec(uint txIndex) external pure override returns (bool) {\r\n    //     return false;\r\n    // }\r\n\r\n    // function transactionNotConfirmed(uint txIndex) external pure override returns (bool) {\r\n    //     return false;\r\n    // }\r\n    // function transactionNotExit(uint txIndex) external pure override returns (bool) {\r\n    //     return false;\r\n    // }\r\n}\r\n"
			},
			"contracts/interfaces/IIERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\n\r\ninterface IIERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}"
			},
			"contracts/interfaces/IWETH.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\n\r\nimport './IIERC20.sol';\r\n\r\ninterface IWETH is IIERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 amount) external;\r\n}"
			},
			"contracts/interfaces/IUniswapRouter.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\npragma abicoder v2;\r\n\r\nimport \"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol\";\r\n\r\ninterface IUniswapRouter is ISwapRouter02 {\r\n    function refundETH() external payable;\r\n}"
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// that may remain in the router after the swap.\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// that may remain in the router after the swap.\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol';\n\nimport './IV2SwapRouter.sol';\nimport './IV3SwapRouter.sol';\nimport './IApproveAndCall.sol';\nimport './IMulticallExtended.sol';\n\n/// @title Router token swapping functionality\ninterface ISwapRouter02 is IV2SwapRouter, IV3SwapRouter, IApproveAndCall, IMulticallExtended, ISelfPermit {\n\n}\n"
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title QuoterV2 Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoterV2 {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        external\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        external\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n}\n"
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountIn The desired input amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    function quoteExactInputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountOut);\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param tokenIn The token being swapped in\n    /// @param tokenOut The token being swapped out\n    /// @param fee The fee of the token pool to consider for the pair\n    /// @param amountOut The desired output amount\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    function quoteExactOutputSingle(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountOut,\n        uint160 sqrtPriceLimitX96\n    ) external returns (uint256 amountIn);\n}\n"
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n           uint160( uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            ))\n        );\n    }\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol';\n\n/// @title MulticallExtended interface\n/// @notice Enables calling multiple methods in a single call to the contract with optional validation\ninterface IMulticallExtended is IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param deadline The time by which this function must be called before failing\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory results);\n\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param previousBlockhash The expected parent blockHash\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes32 previousBlockhash, bytes[] calldata data)\n        external\n        payable\n        returns (bytes[] memory results);\n}\n"
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\ninterface IApproveAndCall {\n    enum ApprovalType {NOT_REQUIRED, MAX, MAX_MINUS_ONE, ZERO_THEN_MAX, ZERO_THEN_MAX_MINUS_ONE}\n\n    /// @dev Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\n    /// @param token The token to approve\n    /// @param amount The amount to approve\n    /// @return The required approval type\n    function getApprovalType(address token, uint256 amount) external returns (ApprovalType);\n\n    /// @notice Approves a token for the maximum possible amount\n    /// @param token The token to approve\n    function approveMax(address token) external payable;\n\n    /// @notice Approves a token for the maximum possible amount minus one\n    /// @param token The token to approve\n    function approveMaxMinusOne(address token) external payable;\n\n    /// @notice Approves a token for zero, then the maximum possible amount\n    /// @param token The token to approve\n    function approveZeroThenMax(address token) external payable;\n\n    /// @notice Approves a token for zero, then the maximum possible amount minus one\n    /// @param token The token to approve\n    function approveZeroThenMaxMinusOne(address token) external payable;\n\n    /// @notice Calls the position manager with arbitrary calldata\n    /// @param data Calldata to pass along to the position manager\n    /// @return result The result from the call\n    function callPositionManager(bytes memory data) external payable returns (bytes memory result);\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n    }\n\n    /// @notice Calls the position manager's mint function\n    /// @param params Calldata to pass along to the position manager\n    /// @return result The result from the call\n    function mint(MintParams calldata params) external payable returns (bytes memory result);\n\n    struct IncreaseLiquidityParams {\n        address token0;\n        address token1;\n        uint256 tokenId;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    /// @notice Calls the position manager's increaseLiquidity function\n    /// @param params Calldata to pass along to the position manager\n    /// @return result The result from the call\n    function increaseLiquidity(IncreaseLiquidityParams calldata params) external payable returns (bytes memory result);\n}\n"
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V2\ninterface IV2SwapRouter {\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\n    /// @param amountIn The amount of token to swap\n    /// @param amountOutMin The minimum amount of output that must be received\n    /// @param path The ordered list of tokens to swap through\n    /// @param to The recipient address\n    /// @return amountOut The amount of the received token\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to\n    ) external payable returns (uint256 amountOut);\n\n    /// @notice Swaps as little as possible of one token for an exact amount of another token\n    /// @param amountOut The amount of token to swap for\n    /// @param amountInMax The maximum amount of input that the caller will pay\n    /// @param path The ordered list of tokens to swap through\n    /// @param to The recipient address\n    /// @return amountIn The amount of token to pay\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to\n    ) external payable returns (uint256 amountIn);\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\ninterface ISelfPermit {\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermit(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend a given token from `msg.sender`\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n    /// @param token The address of the token spent\n    /// @param value The amount that can be spent of token\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitIfNecessary(\n        address token,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowed(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n    /// @param token The address of the token spent\n    /// @param nonce The current nonce of the owner\n    /// @param expiry The timestamp at which the permit is no longer valid\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function selfPermitAllowedIfNecessary(\n        address token,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
			},
			"contracts/interfaces/ITransaction.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\n\r\ninterface ITransaction {\r\n  function transactionNotExec(uint txIndex) external view returns(bool);\r\n  function transactionNotConfirmed(uint txIndex) external view returns(bool);\r\n  function transactionNotExit(uint txIndex) external view returns(bool);\r\n}"
			},
			"contracts/interfaces/ITrader.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\n\r\ninterface ITrader {\r\n  function isTrader(address sender) external view returns(bool);\r\n}"
			},
			"contracts/interfaces/IOwner.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.6;\r\n\r\ninterface IOwner {\r\n  function isOwner(address sender) external  view returns(bool);\r\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\npragma solidity >=0.7.5;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.7.5;\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xfa21daed0b0237fa686441cd4b0026285ed267e2d9797df7c3e1d636bc7acd81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07a7e88b8d5e210b5fa28d5cfe4ebb28fc9f67997e486d1e9d72e7a21a47aca5\",\"dweb:/ipfs/QmevHKUPciCh4NV7aBQ1ZoS9QqgCSgv6BqEs8xXx9bkX8b\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xec5a69443802ea22c3da1d7c3865fa93e032a9ad01c8f84a8634cf50512a74ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e7f6e5b754bbf3d5daaf81b6cf2dea7bc663f4dc9815369aa2a025e3df7dd3\",\"dweb:/ipfs/Qmch2neG9eXBUxgdroF6iebPgw6CMSUV8q6F9pAo5SZxPc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xfa21daed0b0237fa686441cd4b0026285ed267e2d9797df7c3e1d636bc7acd81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07a7e88b8d5e210b5fa28d5cfe4ebb28fc9f67997e486d1e9d72e7a21a47aca5\",\"dweb:/ipfs/QmevHKUPciCh4NV7aBQ1ZoS9QqgCSgv6BqEs8xXx9bkX8b\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x5e6e51ad6f7112e78fbffeea4c22652834072f43d90863c1445d2e2cfbc0af57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33f0ab34bec16e95d749a9dbdb7da81fa3b3f548c4ca4e5fb092ac681af8143c\",\"dweb:/ipfs/Qmc4WRitpgsjwS8rThbE9WpBv5BkNpM348iq1PPZkPSwHy\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xec5a69443802ea22c3da1d7c3865fa93e032a9ad01c8f84a8634cf50512a74ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e7f6e5b754bbf3d5daaf81b6cf2dea7bc663f4dc9815369aa2a025e3df7dd3\",\"dweb:/ipfs/Qmch2neG9eXBUxgdroF6iebPgw6CMSUV8q6F9pAo5SZxPc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xfa21daed0b0237fa686441cd4b0026285ed267e2d9797df7c3e1d636bc7acd81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07a7e88b8d5e210b5fa28d5cfe4ebb28fc9f67997e486d1e9d72e7a21a47aca5\",\"dweb:/ipfs/QmevHKUPciCh4NV7aBQ1ZoS9QqgCSgv6BqEs8xXx9bkX8b\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0x6157fe3c92392b54295c896bbcf92a0538ae7229344ab673c5e0351e7978a097\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567add65e27772a9e8690420360882a0dccfe704ea3162ddd026448e2935471b\",\"dweb:/ipfs/QmSRAB9z7Q63nQTJuykgNqi1JRcC8tFN2TEAQj9S45xUYS\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xec5a69443802ea22c3da1d7c3865fa93e032a9ad01c8f84a8634cf50512a74ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e7f6e5b754bbf3d5daaf81b6cf2dea7bc663f4dc9815369aa2a025e3df7dd3\",\"dweb:/ipfs/Qmch2neG9eXBUxgdroF6iebPgw6CMSUV8q6F9pAo5SZxPc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xec5a69443802ea22c3da1d7c3865fa93e032a9ad01c8f84a8634cf50512a74ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e7f6e5b754bbf3d5daaf81b6cf2dea7bc663f4dc9815369aa2a025e3df7dd3\",\"dweb:/ipfs/Qmch2neG9eXBUxgdroF6iebPgw6CMSUV8q6F9pAo5SZxPc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol": {
				"IMulticall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "Multicall interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes[])": "ac9650d8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"Multicall interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\":\"IMulticall\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol": {
				"ISelfPermit": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							}
						},
						"title": "Self Permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}}},\"title\":\"Self Permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"}},\"notice\":\"Functionality to call permit on any EIP-2612-compliant token for use in the route\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol\":\"ISelfPermit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678\",\"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							}
						},
						"notice": "Functionality to call permit on any EIP-2612-compliant token for use in the route",
						"version": 1
					}
				}
			},
			"contracts/interfaces/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0x99f984761d43fe990cdc5251f66890dd714f073c01e5b671a9036e576808b463\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eaea4358bc195a1ff4629c7823387e8949a0c5be3f2a48881a4aba24ba8584a\",\"dweb:/ipfs/QmY5GPNGG58dbYs77dXZQpBzs8uNTXWjQzZDTwpyZopAhd\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IIERC20.sol": {
				"IIERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IIERC20.sol\":\"IIERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IIERC20.sol\":{\"keccak256\":\"0xb9b11448bf617512ff7324aee629199f236434f7858c3bda1e77e1f78c8bc08a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ea10e9356cf9bafefaf818c7eb83e1dcd5bba62088e4532fd120dc2e45cadef\",\"dweb:/ipfs/QmRMwMzz1V8WnCZ1QprLzXBkjtJsihtooDLqtYvNP9Gcp5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IOwner.sol": {
				"IOwner": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isOwner(address)": "2f54bf6e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IOwner.sol\":\"IOwner\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IOwner.sol\":{\"keccak256\":\"0x7863046217d558c52725ad6ab6093ebc7a6711cceae4e150822d529517818b67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95e5c6aa1c14a02935bca38f4b33e47f0d11d17389d308c160900d1de65d3cac\",\"dweb:/ipfs/Qmdsoz8PN1vHDNroJaCYWuenZjn5aNgFbQpTwqWpFeh8Gp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/ITrader.sol": {
				"ITrader": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "isTrader",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isTrader(address)": "4039ad0d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ITrader.sol\":\"ITrader\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ITrader.sol\":{\"keccak256\":\"0x04ff899b27420c6738d5e3e9073f9fd8b8ba74b5c5bd7fbe9e56e705f08aeb37\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a8c7a0c752b8399d1b7dda63a82ee328fc0b9a85c3137459793b5e4060f5ba9\",\"dweb:/ipfs/Qmd4EMZUT9yWbdu15vEyt4z3ggZ5pKipaRmyVssJnMzB6D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/ITransaction.sol": {
				"ITransaction": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotConfirmed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotExec",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotExit",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"transactionNotConfirmed(uint256)": "297dbaef",
							"transactionNotExec(uint256)": "26e7b525",
							"transactionNotExit(uint256)": "eea0099d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotExec\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ITransaction.sol\":\"ITransaction\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ITransaction.sol\":{\"keccak256\":\"0x89d97b0ecb0c499ca20f52987533158253c22977ba65f498ba832fa7ea954f68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3700531b3ec7e20a5cb9a359eb98a44fcfa3b3abe20d0d9f746f698c07600733\",\"dweb:/ipfs/QmNvcru8Tj9gYWMng71fc74mAKaNpcKKGQQqmB96y9zzXb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IUniswapRouter.sol": {
				"IUniswapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveMax",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveMaxMinusOne",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveZeroThenMax",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveZeroThenMaxMinusOne",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "callPositionManager",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "getApprovalType",
							"outputs": [
								{
									"internalType": "enum IApproveAndCall.ApprovalType",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										}
									],
									"internalType": "struct IApproveAndCall.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										}
									],
									"internalType": "struct IApproveAndCall.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "previousBlockhash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountInMax",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "swapTokensForExactTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approveMax(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveMaxMinusOne(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveZeroThenMax(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveZeroThenMaxMinusOne(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"callPositionManager(bytes)": {
								"params": {
									"data": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"exactInput((bytes,address,uint256,uint256))": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"getApprovalType(address,uint256)": {
								"details": "Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called",
								"params": {
									"amount": "The amount to approve",
									"token": "The token to approve"
								},
								"returns": {
									"_0": "The required approval type"
								}
							},
							"increaseLiquidity((address,address,uint256,uint256,uint256))": {
								"params": {
									"params": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": {
								"params": {
									"params": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"multicall(bytes32,bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract",
									"previousBlockhash": "The expected parent blockHash"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"multicall(uint256,bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract",
									"deadline": "The time by which this function must be called before failing"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address)": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"amountIn": "The amount of token to swap",
									"amountOutMin": "The minimum amount of output that must be received",
									"path": "The ordered list of tokens to swap through",
									"to": "The recipient address"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"swapTokensForExactTokens(uint256,uint256,address[],address)": {
								"params": {
									"amountInMax": "The maximum amount of input that the caller will pay",
									"amountOut": "The amount of token to swap for",
									"path": "The ordered list of tokens to swap through",
									"to": "The recipient address"
								},
								"returns": {
									"amountIn": "The amount of token to pay"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approveMax(address)": "571ac8b0",
							"approveMaxMinusOne(address)": "cab372ce",
							"approveZeroThenMax(address)": "639d71a9",
							"approveZeroThenMaxMinusOne(address)": "ab3fdd50",
							"callPositionManager(bytes)": "b3a2af13",
							"exactInput((bytes,address,uint256,uint256))": "b858183f",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": "04e45aaf",
							"exactOutput((bytes,address,uint256,uint256))": "09b81346",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": "5023b4df",
							"getApprovalType(address,uint256)": "dee00f35",
							"increaseLiquidity((address,address,uint256,uint256,uint256))": "f100b205",
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": "11ed56c9",
							"multicall(bytes32,bytes[])": "1f0464d1",
							"multicall(bytes[])": "ac9650d8",
							"multicall(uint256,bytes[])": "5ae401dc",
							"refundETH()": "12210e8a",
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a",
							"swapExactTokensForTokens(uint256,uint256,address[],address)": "472b43f3",
							"swapTokensForExactTokens(uint256,uint256,address[],address)": "42712a67",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveMaxMinusOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveZeroThenMax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveZeroThenMaxMinusOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callPositionManager\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getApprovalType\",\"outputs\":[{\"internalType\":\"enum IApproveAndCall.ApprovalType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"internalType\":\"struct IApproveAndCall.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IApproveAndCall.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"previousBlockhash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveMax(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveMaxMinusOne(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveZeroThenMax(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveZeroThenMaxMinusOne(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"callPositionManager(bytes)\":{\"params\":{\"data\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"exactInput((bytes,address,uint256,uint256))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"getApprovalType(address,uint256)\":{\"details\":\"Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\",\"params\":{\"amount\":\"The amount to approve\",\"token\":\"The token to approve\"},\"returns\":{\"_0\":\"The required approval type\"}},\"increaseLiquidity((address,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"mint((address,address,uint24,int24,int24,uint256,uint256,address))\":{\"params\":{\"params\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"multicall(bytes32,bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\",\"previousBlockhash\":\"The expected parent blockHash\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"multicall(uint256,bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\",\"deadline\":\"The time by which this function must be called before failing\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"amountIn\":\"The amount of token to swap\",\"amountOutMin\":\"The minimum amount of output that must be received\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"params\":{\"amountInMax\":\"The maximum amount of input that the caller will pay\",\"amountOut\":\"The amount of token to swap for\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountIn\":\"The amount of token to pay\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveMax(address)\":{\"notice\":\"Approves a token for the maximum possible amount\"},\"approveMaxMinusOne(address)\":{\"notice\":\"Approves a token for the maximum possible amount minus one\"},\"approveZeroThenMax(address)\":{\"notice\":\"Approves a token for zero, then the maximum possible amount\"},\"approveZeroThenMaxMinusOne(address)\":{\"notice\":\"Approves a token for zero, then the maximum possible amount minus one\"},\"callPositionManager(bytes)\":{\"notice\":\"Calls the position manager with arbitrary calldata\"},\"exactInput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap.\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap.\"},\"increaseLiquidity((address,address,uint256,uint256,uint256))\":{\"notice\":\"Calls the position manager's increaseLiquidity function\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,address))\":{\"notice\":\"Calls the position manager's mint function\"},\"multicall(bytes32,bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"multicall(uint256,bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps as little as possible of one token for an exact amount of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IUniswapRouter.sol\":\"IUniswapRouter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678\",\"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb\"]},\"contracts/interfaces/IUniswapRouter.sol\":{\"keccak256\":\"0x9592a28a3becdf4d7e836fdf0524ce5db91780d8489b1d1d1d4b9ed33d1bffdf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb4811fff040f55a08ae59b717fa26d99295169265f1c8085251511ff0d59cb3\",\"dweb:/ipfs/QmZEHZK7a1CyoxWfDkrEnSR54SaU6E682xsustcRGbENbi\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol\":{\"keccak256\":\"0xf4ecfa3404dab6cba0a4543d82173fd86c4a74dc7ba680f4eceebd1b7c789904\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://74a39f2e860453ace7a5045731420f1acf6b98a96dadc75d913a19eff7ffca86\",\"dweb:/ipfs/QmcCGp4L4GyQj6XEmigWDKrcJHo1jML2d5ViSUUEDCTrwS\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol\":{\"keccak256\":\"0xf92e9474990ec0025f6e4b8faf040a5c6280549c16bb42b6c00be9975757d997\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://968de2851b6a2a502e1b19c625beff9c727c855e871925cf9b4c073395b8646e\",\"dweb:/ipfs/QmTsSX6MrbhEx7dcozPk1NaNHWQkPzEDQRRwTR7MfLMBbu\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol\":{\"keccak256\":\"0xf846912bb8c8f4be872ae152550227caba219d3b4d6e85b809fb3cbad984d43b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://43fff68a8267ac961dbee325c4ced73dfeb70537c679e38c3e82f65e8d859d2f\",\"dweb:/ipfs/QmfLTEJR1Rt3ZgWq1fvMhKmzhgGrVxHuhDJAYx6wTME5pD\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol\":{\"keccak256\":\"0xfc31c1d8d559aef138a826066ca471573d7efe497775fcbf3546f27f4e84f2eb\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://01e5a1a70e4149eb0ee216c2a455b0138b2d307f0139500e24065a5b4ab9b287\",\"dweb:/ipfs/QmX3ZvAS571F3tvKnuHTtKqh78yBoJD5GsX2fv3UbC3kdU\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol\":{\"keccak256\":\"0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a0a9bece58527fb5c1773d86666c7a71884a78f413e230dfa8c8a7f8ea564ef9\",\"dweb:/ipfs/QmbDhvpoZJN1KntxUUxkYV89RPTwqVBiyHBkvVh4QHSveo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"approveMax(address)": {
								"notice": "Approves a token for the maximum possible amount"
							},
							"approveMaxMinusOne(address)": {
								"notice": "Approves a token for the maximum possible amount minus one"
							},
							"approveZeroThenMax(address)": {
								"notice": "Approves a token for zero, then the maximum possible amount"
							},
							"approveZeroThenMaxMinusOne(address)": {
								"notice": "Approves a token for zero, then the maximum possible amount minus one"
							},
							"callPositionManager(bytes)": {
								"notice": "Calls the position manager with arbitrary calldata"
							},
							"exactInput((bytes,address,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap."
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap."
							},
							"increaseLiquidity((address,address,uint256,uint256,uint256))": {
								"notice": "Calls the position manager's increaseLiquidity function"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": {
								"notice": "Calls the position manager's mint function"
							},
							"multicall(bytes32,bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"multicall(uint256,bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address)": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"swapTokensForExactTokens(uint256,uint256,address[],address)": {
								"notice": "Swaps as little as possible of one token for an exact amount of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/interfaces/IWETH.sol": {
				"IWETH": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IIERC20.sol\":{\"keccak256\":\"0xb9b11448bf617512ff7324aee629199f236434f7858c3bda1e77e1f78c8bc08a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ea10e9356cf9bafefaf818c7eb83e1dcd5bba62088e4532fd120dc2e45cadef\",\"dweb:/ipfs/QmRMwMzz1V8WnCZ1QprLzXBkjtJsihtooDLqtYvNP9Gcp5\"]},\"contracts/interfaces/IWETH.sol\":{\"keccak256\":\"0x1314d5ce64dece39fd77c6c870b37eb23b99348ed9309ae43de8fd5ed1a436e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a66c1c7dc154353d03dbe35373b5b81dfd8895108a92f2a2c8ff1bbf973233e0\",\"dweb:/ipfs/QmRQabQqFXaA1FWmZHHofr62jevW3UF74U4YBa5rLBJrvn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/modifys/MulSigModify.sol": {
				"MulSigModify": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "isTrader",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotConfirmed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotExec",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotExit",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "多签合约的判定器",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isOwner(address)": "2f54bf6e",
							"isTrader(address)": "4039ad0d",
							"transactionNotConfirmed(uint256)": "297dbaef",
							"transactionNotExec(uint256)": "26e7b525",
							"transactionNotExit(uint256)": "eea0099d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotExec\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u591a\\u7b7e\\u5408\\u7ea6\\u7684\\u5224\\u5b9a\\u5668\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modifys/MulSigModify.sol\":\"MulSigModify\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IOwner.sol\":{\"keccak256\":\"0x7863046217d558c52725ad6ab6093ebc7a6711cceae4e150822d529517818b67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95e5c6aa1c14a02935bca38f4b33e47f0d11d17389d308c160900d1de65d3cac\",\"dweb:/ipfs/Qmdsoz8PN1vHDNroJaCYWuenZjn5aNgFbQpTwqWpFeh8Gp\"]},\"contracts/interfaces/ITrader.sol\":{\"keccak256\":\"0x04ff899b27420c6738d5e3e9073f9fd8b8ba74b5c5bd7fbe9e56e705f08aeb37\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a8c7a0c752b8399d1b7dda63a82ee328fc0b9a85c3137459793b5e4060f5ba9\",\"dweb:/ipfs/Qmd4EMZUT9yWbdu15vEyt4z3ggZ5pKipaRmyVssJnMzB6D\"]},\"contracts/interfaces/ITransaction.sol\":{\"keccak256\":\"0x89d97b0ecb0c499ca20f52987533158253c22977ba65f498ba832fa7ea954f68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3700531b3ec7e20a5cb9a359eb98a44fcfa3b3abe20d0d9f746f698c07600733\",\"dweb:/ipfs/QmNvcru8Tj9gYWMng71fc74mAKaNpcKKGQQqmB96y9zzXb\"]},\"contracts/modifys/MulSigModify.sol\":{\"keccak256\":\"0xe70a6c257c6d0ae4b4be3b4e3b8462292cde1351a182f4c1d6e811b95c2de071\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45e029a9e79b628b460be2983ef7aa8b25da23e3e6fafd02b6487c072cd34b30\",\"dweb:/ipfs/QmNLrp7R46Mi1xGvT34i5cbxxWF59mAWd6JuLX3NTLKbWz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/uniswap/SwapToken.sol": {
				"SwapToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "collectAllFees",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								}
							],
							"name": "decreaseLiquidityInHalf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ethBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "inputToken1",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountAdd0",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "inputToken2",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountAdd1",
									"type": "uint256"
								}
							],
							"name": "increaseLiquidityCurrentRange",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "isTrader",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "inputToken1",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "inputToken1Count",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "inputToken2",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "inputToken2Count",
									"type": "uint256"
								}
							],
							"name": "mintNewPosition",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nonfungiblePositionManager",
							"outputs": [
								{
									"internalType": "contract INonfungiblePositionManager",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "inputToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "outputToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "swapTokens",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotConfirmed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotExec",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "txIndex",
									"type": "uint256"
								}
							],
							"name": "transactionNotExit",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "uniBalance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "uniswapRouter",
							"outputs": [
								{
									"internalType": "contract IUniswapRouter",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unwrapEther",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "count",
									"type": "uint256"
								}
							],
							"name": "wrapEther",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"burn(uint256)": {
								"details": "烧掉一个令牌ID，并将其从NFT合约中删除。代币必须具有0流动性和所有代币"
							},
							"collectAllFees(uint256)": {
								"details": "合约必须持有erc721代币才能收取费用",
								"params": {
									"tokenId": "The id of the erc721 token"
								},
								"returns": {
									"amount0": "在token0中收取的费用金额",
									"amount1": "在token1中收取的费用金额"
								}
							},
							"decreaseLiquidityInHalf(uint256,uint128)": {
								"params": {
									"tokenId": "The id of the erc721 token"
								},
								"returns": {
									"amount0": "The amount received back in token0",
									"amount1": "The amount returned back in token1"
								}
							},
							"increaseLiquidityCurrentRange(uint256,address,uint256,address,uint256)": {
								"details": "Pool must be initialized already to add liquidity",
								"params": {
									"amount0": "The amount to add of token0",
									"amount1": "The amount to add of token1",
									"tokenId": "The id of the erc721 token"
								}
							},
							"mintNewPosition(address,uint256,address,uint256)": {
								"details": "添加流动性",
								"params": {
									"inputToken1": "代币地址",
									"inputToken1Count": "代币数量",
									"inputToken2": "代币地址",
									"inputToken2Count": "代币数量"
								}
							},
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "实现' onERC721Received '，使该合约可以接收erc721代币的托管"
							},
							"swapTokens(address,address,uint256)": {
								"details": "交换代币",
								"params": {
									"amountIn": "交换数量",
									"inputToken": "输入代币",
									"outputToken": "输出代币"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(uint256)": "42966c68",
							"collectAllFees(uint256)": "46ce96dd",
							"decreaseLiquidityInHalf(uint256,uint128)": "5944e928",
							"ethBalance()": "4e6630b0",
							"increaseLiquidityCurrentRange(uint256,address,uint256,address,uint256)": "7e14be2a",
							"isOwner(address)": "2f54bf6e",
							"isTrader(address)": "4039ad0d",
							"mintNewPosition(address,uint256,address,uint256)": "3ca604e6",
							"nonfungiblePositionManager()": "b44a2722",
							"onERC721Received(address,address,uint256,bytes)": "150b7a02",
							"swapTokens(address,address,uint256)": "ec6cc0cc",
							"transactionNotConfirmed(uint256)": "297dbaef",
							"transactionNotExec(uint256)": "26e7b525",
							"transactionNotExit(uint256)": "eea0099d",
							"uniBalance()": "44533cb5",
							"uniswapRouter()": "735de9f7",
							"unwrapEther()": "915f68a6",
							"wrapEther(uint256)": "ef590ca5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"collectAllFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"decreaseLiquidityInHalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAdd0\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountAdd1\",\"type\":\"uint256\"}],\"name\":\"increaseLiquidityCurrentRange\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputToken1Count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputToken2Count\",\"type\":\"uint256\"}],\"name\":\"mintNewPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotExec\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"transactionNotExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"wrapEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"details\":\"\\u70e7\\u6389\\u4e00\\u4e2a\\u4ee4\\u724cID\\uff0c\\u5e76\\u5c06\\u5176\\u4eceNFT\\u5408\\u7ea6\\u4e2d\\u5220\\u9664\\u3002\\u4ee3\\u5e01\\u5fc5\\u987b\\u5177\\u67090\\u6d41\\u52a8\\u6027\\u548c\\u6240\\u6709\\u4ee3\\u5e01\"},\"collectAllFees(uint256)\":{\"details\":\"\\u5408\\u7ea6\\u5fc5\\u987b\\u6301\\u6709erc721\\u4ee3\\u5e01\\u624d\\u80fd\\u6536\\u53d6\\u8d39\\u7528\",\"params\":{\"tokenId\":\"The id of the erc721 token\"},\"returns\":{\"amount0\":\"\\u5728token0\\u4e2d\\u6536\\u53d6\\u7684\\u8d39\\u7528\\u91d1\\u989d\",\"amount1\":\"\\u5728token1\\u4e2d\\u6536\\u53d6\\u7684\\u8d39\\u7528\\u91d1\\u989d\"}},\"decreaseLiquidityInHalf(uint256,uint128)\":{\"params\":{\"tokenId\":\"The id of the erc721 token\"},\"returns\":{\"amount0\":\"The amount received back in token0\",\"amount1\":\"The amount returned back in token1\"}},\"increaseLiquidityCurrentRange(uint256,address,uint256,address,uint256)\":{\"details\":\"Pool must be initialized already to add liquidity\",\"params\":{\"amount0\":\"The amount to add of token0\",\"amount1\":\"The amount to add of token1\",\"tokenId\":\"The id of the erc721 token\"}},\"mintNewPosition(address,uint256,address,uint256)\":{\"details\":\"\\u6dfb\\u52a0\\u6d41\\u52a8\\u6027\",\"params\":{\"inputToken1\":\"\\u4ee3\\u5e01\\u5730\\u5740\",\"inputToken1Count\":\"\\u4ee3\\u5e01\\u6570\\u91cf\",\"inputToken2\":\"\\u4ee3\\u5e01\\u5730\\u5740\",\"inputToken2Count\":\"\\u4ee3\\u5e01\\u6570\\u91cf\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"\\u5b9e\\u73b0' onERC721Received '\\uff0c\\u4f7f\\u8be5\\u5408\\u7ea6\\u53ef\\u4ee5\\u63a5\\u6536erc721\\u4ee3\\u5e01\\u7684\\u6258\\u7ba1\"},\"swapTokens(address,address,uint256)\":{\"details\":\"\\u4ea4\\u6362\\u4ee3\\u5e01\",\"params\":{\"amountIn\":\"\\u4ea4\\u6362\\u6570\\u91cf\",\"inputToken\":\"\\u8f93\\u5165\\u4ee3\\u5e01\",\"outputToken\":\"\\u8f93\\u51fa\\u4ee3\\u5e01\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"\\u9500\\u6bc1\\u6d41\\u52a8\\u6027\\u4ed3\\u4f4d\"},\"collectAllFees(uint256)\":{\"notice\":\"\\u6536\\u53d6\\u4e0e\\u63d0\\u4f9b\\u7684\\u6d41\\u52a8\\u6027\\u76f8\\u5173\\u7684\\u8d39\\u7528\"},\"decreaseLiquidityInHalf(uint256,uint128)\":{\"notice\":\"\\u51cf\\u5c11\\u6d41\\u52a8\\u6027: \\u5c06\\u5f53\\u524d\\u6d41\\u52a8\\u6027\\u51cf\\u5c11\\u4e00\\u534a\\u7684\\u51fd\\u6570\\u3002\\u4e00\\u4e2a\\u4f8b\\u5b50\\u6765\\u663e\\u793a\\u5982\\u4f55\\u8c03\\u7528'\\u51cf\\u5c11\\u6d41\\u52a8\\u6027'\\u51fd\\u6570\\u5b9a\\u4e49\\u5728\\u5916\\u56f4\\u3002\"},\"increaseLiquidityCurrentRange(uint256,address,uint256,address,uint256)\":{\"notice\":\"\\u589e\\u52a0\\u5f53\\u524d\\u8303\\u56f4\\u5185\\u7684\\u6d41\\u52a8\\u6027\"},\"mintNewPosition(address,uint256,address,uint256)\":{\"notice\":\"\\u6dfb\\u52a0\\u6d41\\u52a8\\u6027\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uniswap/SwapToken.sol\":\"SwapToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xfa21daed0b0237fa686441cd4b0026285ed267e2d9797df7c3e1d636bc7acd81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07a7e88b8d5e210b5fa28d5cfe4ebb28fc9f67997e486d1e9d72e7a21a47aca5\",\"dweb:/ipfs/QmevHKUPciCh4NV7aBQ1ZoS9QqgCSgv6BqEs8xXx9bkX8b\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x5e6e51ad6f7112e78fbffeea4c22652834072f43d90863c1445d2e2cfbc0af57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33f0ab34bec16e95d749a9dbdb7da81fa3b3f548c4ca4e5fb092ac681af8143c\",\"dweb:/ipfs/Qmc4WRitpgsjwS8rThbE9WpBv5BkNpM348iq1PPZkPSwHy\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0x6157fe3c92392b54295c896bbcf92a0538ae7229344ab673c5e0351e7978a097\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567add65e27772a9e8690420360882a0dccfe704ea3162ddd026448e2935471b\",\"dweb:/ipfs/QmSRAB9z7Q63nQTJuykgNqi1JRcC8tFN2TEAQj9S45xUYS\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xec5a69443802ea22c3da1d7c3865fa93e032a9ad01c8f84a8634cf50512a74ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e7f6e5b754bbf3d5daaf81b6cf2dea7bc663f4dc9815369aa2a025e3df7dd3\",\"dweb:/ipfs/Qmch2neG9eXBUxgdroF6iebPgw6CMSUV8q6F9pAo5SZxPc\"]},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678\",\"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb\"]},\"contracts/interfaces/IERC721Receiver.sol\":{\"keccak256\":\"0x99f984761d43fe990cdc5251f66890dd714f073c01e5b671a9036e576808b463\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1eaea4358bc195a1ff4629c7823387e8949a0c5be3f2a48881a4aba24ba8584a\",\"dweb:/ipfs/QmY5GPNGG58dbYs77dXZQpBzs8uNTXWjQzZDTwpyZopAhd\"]},\"contracts/interfaces/IIERC20.sol\":{\"keccak256\":\"0xb9b11448bf617512ff7324aee629199f236434f7858c3bda1e77e1f78c8bc08a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ea10e9356cf9bafefaf818c7eb83e1dcd5bba62088e4532fd120dc2e45cadef\",\"dweb:/ipfs/QmRMwMzz1V8WnCZ1QprLzXBkjtJsihtooDLqtYvNP9Gcp5\"]},\"contracts/interfaces/IOwner.sol\":{\"keccak256\":\"0x7863046217d558c52725ad6ab6093ebc7a6711cceae4e150822d529517818b67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95e5c6aa1c14a02935bca38f4b33e47f0d11d17389d308c160900d1de65d3cac\",\"dweb:/ipfs/Qmdsoz8PN1vHDNroJaCYWuenZjn5aNgFbQpTwqWpFeh8Gp\"]},\"contracts/interfaces/ITrader.sol\":{\"keccak256\":\"0x04ff899b27420c6738d5e3e9073f9fd8b8ba74b5c5bd7fbe9e56e705f08aeb37\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a8c7a0c752b8399d1b7dda63a82ee328fc0b9a85c3137459793b5e4060f5ba9\",\"dweb:/ipfs/Qmd4EMZUT9yWbdu15vEyt4z3ggZ5pKipaRmyVssJnMzB6D\"]},\"contracts/interfaces/ITransaction.sol\":{\"keccak256\":\"0x89d97b0ecb0c499ca20f52987533158253c22977ba65f498ba832fa7ea954f68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3700531b3ec7e20a5cb9a359eb98a44fcfa3b3abe20d0d9f746f698c07600733\",\"dweb:/ipfs/QmNvcru8Tj9gYWMng71fc74mAKaNpcKKGQQqmB96y9zzXb\"]},\"contracts/interfaces/IUniswapRouter.sol\":{\"keccak256\":\"0x9592a28a3becdf4d7e836fdf0524ce5db91780d8489b1d1d1d4b9ed33d1bffdf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb4811fff040f55a08ae59b717fa26d99295169265f1c8085251511ff0d59cb3\",\"dweb:/ipfs/QmZEHZK7a1CyoxWfDkrEnSR54SaU6E682xsustcRGbENbi\"]},\"contracts/interfaces/IWETH.sol\":{\"keccak256\":\"0x1314d5ce64dece39fd77c6c870b37eb23b99348ed9309ae43de8fd5ed1a436e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a66c1c7dc154353d03dbe35373b5b81dfd8895108a92f2a2c8ff1bbf973233e0\",\"dweb:/ipfs/QmRQabQqFXaA1FWmZHHofr62jevW3UF74U4YBa5rLBJrvn\"]},\"contracts/modifys/MulSigModify.sol\":{\"keccak256\":\"0xe70a6c257c6d0ae4b4be3b4e3b8462292cde1351a182f4c1d6e811b95c2de071\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45e029a9e79b628b460be2983ef7aa8b25da23e3e6fafd02b6487c072cd34b30\",\"dweb:/ipfs/QmNLrp7R46Mi1xGvT34i5cbxxWF59mAWd6JuLX3NTLKbWz\"]},\"contracts/uniswap/SwapToken.sol\":{\"keccak256\":\"0xe4e2848c90c8662e5acc451f7035e05dfdba88a83b84e31bb24f81eb730a4f7b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b2564572ac0ba6af595d5b16b9106bb6a040288e215c69990f36d399cc5f7bb8\",\"dweb:/ipfs/QmZoCLzfUwhxYc81s4dWUNJRP2qt48zriW3wwTJtDviM3R\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol\":{\"keccak256\":\"0xf4ecfa3404dab6cba0a4543d82173fd86c4a74dc7ba680f4eceebd1b7c789904\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://74a39f2e860453ace7a5045731420f1acf6b98a96dadc75d913a19eff7ffca86\",\"dweb:/ipfs/QmcCGp4L4GyQj6XEmigWDKrcJHo1jML2d5ViSUUEDCTrwS\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol\":{\"keccak256\":\"0xf92e9474990ec0025f6e4b8faf040a5c6280549c16bb42b6c00be9975757d997\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://968de2851b6a2a502e1b19c625beff9c727c855e871925cf9b4c073395b8646e\",\"dweb:/ipfs/QmTsSX6MrbhEx7dcozPk1NaNHWQkPzEDQRRwTR7MfLMBbu\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol\":{\"keccak256\":\"0xf846912bb8c8f4be872ae152550227caba219d3b4d6e85b809fb3cbad984d43b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://43fff68a8267ac961dbee325c4ced73dfeb70537c679e38c3e82f65e8d859d2f\",\"dweb:/ipfs/QmfLTEJR1Rt3ZgWq1fvMhKmzhgGrVxHuhDJAYx6wTME5pD\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol\":{\"keccak256\":\"0xfc31c1d8d559aef138a826066ca471573d7efe497775fcbf3546f27f4e84f2eb\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://01e5a1a70e4149eb0ee216c2a455b0138b2d307f0139500e24065a5b4ab9b287\",\"dweb:/ipfs/QmX3ZvAS571F3tvKnuHTtKqh78yBoJD5GsX2fv3UbC3kdU\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol\":{\"keccak256\":\"0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a0a9bece58527fb5c1773d86666c7a71884a78f413e230dfa8c8a7f8ea564ef9\",\"dweb:/ipfs/QmbDhvpoZJN1KntxUUxkYV89RPTwqVBiyHBkvVh4QHSveo\"]},\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\":{\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://efdc8133033a1596f60f3619a317f8b3af98a6adffd85a9898c5a809c5c22417\",\"dweb:/ipfs/QmRkGjgzgSxhUVxwqiWZuz9M4Ff3TwTbzUgN3yJd4gxMfN\"]},\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol\":{\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://63a8d7dcdd081004356b39e1b8e19ee56b02b3abd3e4165781bde1a100a35bed\",\"dweb:/ipfs/QmdfpYkMxoaeEd646aSioLZcPodnCnpZy9Ny4j98uAba2J\"]},\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x1a282547ae4326feb97fbb4a3a666f3c20739b07e0368ead986641f9d0d95e94\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5ed8534eb7c0a03f4d67432e7a667b45d970825d42a67205ddd7b71bc8097e82\",\"dweb:/ipfs/QmWK4EqghbXmgmmgHByaWXpFGKeXkqzzoAbdct2sX3huGk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 659,
								"contract": "contracts/uniswap/SwapToken.sol:SwapToken",
								"label": "nonfungiblePositionManager",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(INonfungiblePositionManager)2238"
							}
						],
						"types": {
							"t_contract(INonfungiblePositionManager)2238": {
								"encoding": "inplace",
								"label": "contract INonfungiblePositionManager",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "销毁流动性仓位"
							},
							"collectAllFees(uint256)": {
								"notice": "收取与提供的流动性相关的费用"
							},
							"decreaseLiquidityInHalf(uint256,uint128)": {
								"notice": "减少流动性: 将当前流动性减少一半的函数。一个例子来显示如何调用'减少流动性'函数定义在外围。"
							},
							"increaseLiquidityCurrentRange(uint256,address,uint256,address,uint256)": {
								"notice": "增加当前范围内的流动性"
							},
							"mintNewPosition(address,uint256,address,uint256)": {
								"notice": "添加流动性"
							}
						},
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol": {
				"IApproveAndCall": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveMax",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveMaxMinusOne",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveZeroThenMax",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveZeroThenMaxMinusOne",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "callPositionManager",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "getApprovalType",
							"outputs": [
								{
									"internalType": "enum IApproveAndCall.ApprovalType",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										}
									],
									"internalType": "struct IApproveAndCall.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										}
									],
									"internalType": "struct IApproveAndCall.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approveMax(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveMaxMinusOne(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveZeroThenMax(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveZeroThenMaxMinusOne(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"callPositionManager(bytes)": {
								"params": {
									"data": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"getApprovalType(address,uint256)": {
								"details": "Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called",
								"params": {
									"amount": "The amount to approve",
									"token": "The token to approve"
								},
								"returns": {
									"_0": "The required approval type"
								}
							},
							"increaseLiquidity((address,address,uint256,uint256,uint256))": {
								"params": {
									"params": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": {
								"params": {
									"params": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approveMax(address)": "571ac8b0",
							"approveMaxMinusOne(address)": "cab372ce",
							"approveZeroThenMax(address)": "639d71a9",
							"approveZeroThenMaxMinusOne(address)": "ab3fdd50",
							"callPositionManager(bytes)": "b3a2af13",
							"getApprovalType(address,uint256)": "dee00f35",
							"increaseLiquidity((address,address,uint256,uint256,uint256))": "f100b205",
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": "11ed56c9"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveMaxMinusOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveZeroThenMax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveZeroThenMaxMinusOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callPositionManager\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getApprovalType\",\"outputs\":[{\"internalType\":\"enum IApproveAndCall.ApprovalType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"internalType\":\"struct IApproveAndCall.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IApproveAndCall.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveMax(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveMaxMinusOne(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveZeroThenMax(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveZeroThenMaxMinusOne(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"callPositionManager(bytes)\":{\"params\":{\"data\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"getApprovalType(address,uint256)\":{\"details\":\"Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\",\"params\":{\"amount\":\"The amount to approve\",\"token\":\"The token to approve\"},\"returns\":{\"_0\":\"The required approval type\"}},\"increaseLiquidity((address,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"mint((address,address,uint24,int24,int24,uint256,uint256,address))\":{\"params\":{\"params\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveMax(address)\":{\"notice\":\"Approves a token for the maximum possible amount\"},\"approveMaxMinusOne(address)\":{\"notice\":\"Approves a token for the maximum possible amount minus one\"},\"approveZeroThenMax(address)\":{\"notice\":\"Approves a token for zero, then the maximum possible amount\"},\"approveZeroThenMaxMinusOne(address)\":{\"notice\":\"Approves a token for zero, then the maximum possible amount minus one\"},\"callPositionManager(bytes)\":{\"notice\":\"Calls the position manager with arbitrary calldata\"},\"increaseLiquidity((address,address,uint256,uint256,uint256))\":{\"notice\":\"Calls the position manager's increaseLiquidity function\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,address))\":{\"notice\":\"Calls the position manager's mint function\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol\":\"IApproveAndCall\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol\":{\"keccak256\":\"0xf4ecfa3404dab6cba0a4543d82173fd86c4a74dc7ba680f4eceebd1b7c789904\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://74a39f2e860453ace7a5045731420f1acf6b98a96dadc75d913a19eff7ffca86\",\"dweb:/ipfs/QmcCGp4L4GyQj6XEmigWDKrcJHo1jML2d5ViSUUEDCTrwS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"approveMax(address)": {
								"notice": "Approves a token for the maximum possible amount"
							},
							"approveMaxMinusOne(address)": {
								"notice": "Approves a token for the maximum possible amount minus one"
							},
							"approveZeroThenMax(address)": {
								"notice": "Approves a token for zero, then the maximum possible amount"
							},
							"approveZeroThenMaxMinusOne(address)": {
								"notice": "Approves a token for zero, then the maximum possible amount minus one"
							},
							"callPositionManager(bytes)": {
								"notice": "Calls the position manager with arbitrary calldata"
							},
							"increaseLiquidity((address,address,uint256,uint256,uint256))": {
								"notice": "Calls the position manager's increaseLiquidity function"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": {
								"notice": "Calls the position manager's mint function"
							}
						},
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol": {
				"IMulticallExtended": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "previousBlockhash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multicall(bytes32,bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract",
									"previousBlockhash": "The expected parent blockHash"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"multicall(uint256,bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract",
									"deadline": "The time by which this function must be called before failing"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							}
						},
						"title": "MulticallExtended interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multicall(bytes32,bytes[])": "1f0464d1",
							"multicall(bytes[])": "ac9650d8",
							"multicall(uint256,bytes[])": "5ae401dc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"previousBlockhash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes32,bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\",\"previousBlockhash\":\"The expected parent blockHash\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"multicall(uint256,bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\",\"deadline\":\"The time by which this function must be called before failing\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}}},\"title\":\"MulticallExtended interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall(bytes32,bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"multicall(uint256,bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"}},\"notice\":\"Enables calling multiple methods in a single call to the contract with optional validation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol\":\"IMulticallExtended\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol\":{\"keccak256\":\"0xf92e9474990ec0025f6e4b8faf040a5c6280549c16bb42b6c00be9975757d997\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://968de2851b6a2a502e1b19c625beff9c727c855e871925cf9b4c073395b8646e\",\"dweb:/ipfs/QmTsSX6MrbhEx7dcozPk1NaNHWQkPzEDQRRwTR7MfLMBbu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"multicall(bytes32,bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"multicall(uint256,bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							}
						},
						"notice": "Enables calling multiple methods in a single call to the contract with optional validation",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol": {
				"ISwapRouter02": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveMax",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveMaxMinusOne",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveZeroThenMax",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "approveZeroThenMaxMinusOne",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "callPositionManager",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "getApprovalType",
							"outputs": [
								{
									"internalType": "enum IApproveAndCall.ApprovalType",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										}
									],
									"internalType": "struct IApproveAndCall.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										}
									],
									"internalType": "struct IApproveAndCall.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "result",
									"type": "bytes"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "previousBlockhash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "data",
									"type": "bytes[]"
								}
							],
							"name": "multicall",
							"outputs": [
								{
									"internalType": "bytes[]",
									"name": "results",
									"type": "bytes[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowed",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "expiry",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitAllowedIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "selfPermitIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountInMax",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "swapTokensForExactTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approveMax(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveMaxMinusOne(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveZeroThenMax(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"approveZeroThenMaxMinusOne(address)": {
								"params": {
									"token": "The token to approve"
								}
							},
							"callPositionManager(bytes)": {
								"params": {
									"data": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"exactInput((bytes,address,uint256,uint256))": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"getApprovalType(address,uint256)": {
								"details": "Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called",
								"params": {
									"amount": "The amount to approve",
									"token": "The token to approve"
								},
								"returns": {
									"_0": "The required approval type"
								}
							},
							"increaseLiquidity((address,address,uint256,uint256,uint256))": {
								"params": {
									"params": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": {
								"params": {
									"params": "Calldata to pass along to the position manager"
								},
								"returns": {
									"result": "The result from the call"
								}
							},
							"multicall(bytes32,bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract",
									"previousBlockhash": "The expected parent blockHash"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"multicall(bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"multicall(uint256,bytes[])": {
								"details": "The `msg.value` should not be trusted for any method callable from multicall.",
								"params": {
									"data": "The encoded function data for each of the calls to make to this contract",
									"deadline": "The time by which this function must be called before failing"
								},
								"returns": {
									"results": "The results from each of the calls passed in via data"
								}
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this).",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this)",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.",
								"params": {
									"expiry": "The timestamp at which the permit is no longer valid",
									"nonce": "The current nonce of the owner",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
								"params": {
									"deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"token": "The address of the token spent",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
									"value": "The amount that can be spent of token"
								}
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address)": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"amountIn": "The amount of token to swap",
									"amountOutMin": "The minimum amount of output that must be received",
									"path": "The ordered list of tokens to swap through",
									"to": "The recipient address"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"swapTokensForExactTokens(uint256,uint256,address[],address)": {
								"params": {
									"amountInMax": "The maximum amount of input that the caller will pay",
									"amountOut": "The amount of token to swap for",
									"path": "The ordered list of tokens to swap through",
									"to": "The recipient address"
								},
								"returns": {
									"amountIn": "The amount of token to pay"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approveMax(address)": "571ac8b0",
							"approveMaxMinusOne(address)": "cab372ce",
							"approveZeroThenMax(address)": "639d71a9",
							"approveZeroThenMaxMinusOne(address)": "ab3fdd50",
							"callPositionManager(bytes)": "b3a2af13",
							"exactInput((bytes,address,uint256,uint256))": "b858183f",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": "04e45aaf",
							"exactOutput((bytes,address,uint256,uint256))": "09b81346",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": "5023b4df",
							"getApprovalType(address,uint256)": "dee00f35",
							"increaseLiquidity((address,address,uint256,uint256,uint256))": "f100b205",
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": "11ed56c9",
							"multicall(bytes32,bytes[])": "1f0464d1",
							"multicall(bytes[])": "ac9650d8",
							"multicall(uint256,bytes[])": "5ae401dc",
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": "4659a494",
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "a4a78f0c",
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": "c2e3140a",
							"swapExactTokensForTokens(uint256,uint256,address[],address)": "472b43f3",
							"swapTokensForExactTokens(uint256,uint256,address[],address)": "42712a67",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveMaxMinusOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveZeroThenMax\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveZeroThenMaxMinusOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callPositionManager\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getApprovalType\",\"outputs\":[{\"internalType\":\"enum IApproveAndCall.ApprovalType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"}],\"internalType\":\"struct IApproveAndCall.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IApproveAndCall.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"previousBlockhash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitAllowedIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveMax(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveMaxMinusOne(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveZeroThenMax(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"approveZeroThenMaxMinusOne(address)\":{\"params\":{\"token\":\"The token to approve\"}},\"callPositionManager(bytes)\":{\"params\":{\"data\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"exactInput((bytes,address,uint256,uint256))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"getApprovalType(address,uint256)\":{\"details\":\"Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\",\"params\":{\"amount\":\"The amount to approve\",\"token\":\"The token to approve\"},\"returns\":{\"_0\":\"The required approval type\"}},\"increaseLiquidity((address,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"mint((address,address,uint24,int24,int24,uint256,uint256,address))\":{\"params\":{\"params\":\"Calldata to pass along to the position manager\"},\"returns\":{\"result\":\"The result from the call\"}},\"multicall(bytes32,bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\",\"previousBlockhash\":\"The expected parent blockHash\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"multicall(uint256,bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"data\":\"The encoded function data for each of the calls to make to this contract\",\"deadline\":\"The time by which this function must be called before failing\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this)\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this) Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\"params\":{\"expiry\":\"The timestamp at which the permit is no longer valid\",\"nonce\":\"The current nonce of the owner\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"value\":\"The amount that can be spent of token\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"amountIn\":\"The amount of token to swap\",\"amountOutMin\":\"The minimum amount of output that must be received\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"params\":{\"amountInMax\":\"The maximum amount of input that the caller will pay\",\"amountOut\":\"The amount of token to swap for\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountIn\":\"The amount of token to pay\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveMax(address)\":{\"notice\":\"Approves a token for the maximum possible amount\"},\"approveMaxMinusOne(address)\":{\"notice\":\"Approves a token for the maximum possible amount minus one\"},\"approveZeroThenMax(address)\":{\"notice\":\"Approves a token for zero, then the maximum possible amount\"},\"approveZeroThenMaxMinusOne(address)\":{\"notice\":\"Approves a token for zero, then the maximum possible amount minus one\"},\"callPositionManager(bytes)\":{\"notice\":\"Calls the position manager with arbitrary calldata\"},\"exactInput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap.\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap.\"},\"increaseLiquidity((address,address,uint256,uint256,uint256))\":{\"notice\":\"Calls the position manager's increaseLiquidity function\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,address))\":{\"notice\":\"Calls the position manager's mint function\"},\"multicall(bytes32,bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"multicall(uint256,bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps as little as possible of one token for an exact amount of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol\":\"ISwapRouter02\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol\":{\"keccak256\":\"0xa8f9d0061ee730a522dc4bae6bd5cabb3e997e2c5983da183e912bdca93dfa7b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://496b68d4f72d58cc83cf51bd9cc9c99aaa46dc3c3df7c951a9e50ba29ee33016\",\"dweb:/ipfs/Qmc3bkXwuRP8mDpcKgvLgbCKn8tD8PGCaBjnLHSPMJCRGD\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol\":{\"keccak256\":\"0xe1a1c072855e687c90317c15b9b6ce81cc683723f73d70e47b40f2f9bad0c2be\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://53b0881a1c55254d157054bd3d1c86982c0f5429bd2a9986c15479f6b71ef678\",\"dweb:/ipfs/Qmc9WZqXzQmqsA3xYxojbx9nXcG3FGuwAjM3opEmRGSnBb\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol\":{\"keccak256\":\"0xf4ecfa3404dab6cba0a4543d82173fd86c4a74dc7ba680f4eceebd1b7c789904\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://74a39f2e860453ace7a5045731420f1acf6b98a96dadc75d913a19eff7ffca86\",\"dweb:/ipfs/QmcCGp4L4GyQj6XEmigWDKrcJHo1jML2d5ViSUUEDCTrwS\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol\":{\"keccak256\":\"0xf92e9474990ec0025f6e4b8faf040a5c6280549c16bb42b6c00be9975757d997\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://968de2851b6a2a502e1b19c625beff9c727c855e871925cf9b4c073395b8646e\",\"dweb:/ipfs/QmTsSX6MrbhEx7dcozPk1NaNHWQkPzEDQRRwTR7MfLMBbu\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol\":{\"keccak256\":\"0xf846912bb8c8f4be872ae152550227caba219d3b4d6e85b809fb3cbad984d43b\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://43fff68a8267ac961dbee325c4ced73dfeb70537c679e38c3e82f65e8d859d2f\",\"dweb:/ipfs/QmfLTEJR1Rt3ZgWq1fvMhKmzhgGrVxHuhDJAYx6wTME5pD\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol\":{\"keccak256\":\"0xfc31c1d8d559aef138a826066ca471573d7efe497775fcbf3546f27f4e84f2eb\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://01e5a1a70e4149eb0ee216c2a455b0138b2d307f0139500e24065a5b4ab9b287\",\"dweb:/ipfs/QmX3ZvAS571F3tvKnuHTtKqh78yBoJD5GsX2fv3UbC3kdU\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol\":{\"keccak256\":\"0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a0a9bece58527fb5c1773d86666c7a71884a78f413e230dfa8c8a7f8ea564ef9\",\"dweb:/ipfs/QmbDhvpoZJN1KntxUUxkYV89RPTwqVBiyHBkvVh4QHSveo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"approveMax(address)": {
								"notice": "Approves a token for the maximum possible amount"
							},
							"approveMaxMinusOne(address)": {
								"notice": "Approves a token for the maximum possible amount minus one"
							},
							"approveZeroThenMax(address)": {
								"notice": "Approves a token for zero, then the maximum possible amount"
							},
							"approveZeroThenMaxMinusOne(address)": {
								"notice": "Approves a token for zero, then the maximum possible amount minus one"
							},
							"callPositionManager(bytes)": {
								"notice": "Calls the position manager with arbitrary calldata"
							},
							"exactInput((bytes,address,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap."
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap."
							},
							"increaseLiquidity((address,address,uint256,uint256,uint256))": {
								"notice": "Calls the position manager's increaseLiquidity function"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,address))": {
								"notice": "Calls the position manager's mint function"
							},
							"multicall(bytes32,bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"multicall(bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"multicall(uint256,bytes[])": {
								"notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
							},
							"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"selfPermitAllowed(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitAllowedIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter"
							},
							"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Permits this contract to spend a given token from `msg.sender`"
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address)": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"swapTokensForExactTokens(uint256,uint256,address[],address)": {
								"notice": "Swaps as little as possible of one token for an exact amount of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol": {
				"IV2SwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountInMax",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "swapTokensForExactTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"swapExactTokensForTokens(uint256,uint256,address[],address)": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"amountIn": "The amount of token to swap",
									"amountOutMin": "The minimum amount of output that must be received",
									"path": "The ordered list of tokens to swap through",
									"to": "The recipient address"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"swapTokensForExactTokens(uint256,uint256,address[],address)": {
								"params": {
									"amountInMax": "The maximum amount of input that the caller will pay",
									"amountOut": "The amount of token to swap for",
									"path": "The ordered list of tokens to swap through",
									"to": "The recipient address"
								},
								"returns": {
									"amountIn": "The amount of token to pay"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"swapExactTokensForTokens(uint256,uint256,address[],address)": "472b43f3",
							"swapTokensForExactTokens(uint256,uint256,address[],address)": "42712a67"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"amountIn\":\"The amount of token to swap\",\"amountOutMin\":\"The minimum amount of output that must be received\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"params\":{\"amountInMax\":\"The maximum amount of input that the caller will pay\",\"amountOut\":\"The amount of token to swap for\",\"path\":\"The ordered list of tokens to swap through\",\"to\":\"The recipient address\"},\"returns\":{\"amountIn\":\"The amount of token to pay\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"swapExactTokensForTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"swapTokensForExactTokens(uint256,uint256,address[],address)\":{\"notice\":\"Swaps as little as possible of one token for an exact amount of another token\"}},\"notice\":\"Functions for swapping tokens via Uniswap V2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol\":\"IV2SwapRouter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol\":{\"keccak256\":\"0xfc31c1d8d559aef138a826066ca471573d7efe497775fcbf3546f27f4e84f2eb\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://01e5a1a70e4149eb0ee216c2a455b0138b2d307f0139500e24065a5b4ab9b287\",\"dweb:/ipfs/QmX3ZvAS571F3tvKnuHTtKqh78yBoJD5GsX2fv3UbC3kdU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"swapExactTokensForTokens(uint256,uint256,address[],address)": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"swapTokensForExactTokens(uint256,uint256,address[],address)": {
								"notice": "Swaps as little as possible of one token for an exact amount of another token"
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V2",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol": {
				"IV3SwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IV3SwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256))": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"details": "Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256))": "b858183f",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": "04e45aaf",
							"exactOutput((bytes,address,uint256,uint256))": "09b81346",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": "5023b4df",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IV3SwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"details\":\"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.\",\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap.\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap.\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol\":\"IV3SwapRouter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol\":{\"keccak256\":\"0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a0a9bece58527fb5c1773d86666c7a71884a78f413e230dfa8c8a7f8ea564ef9\",\"dweb:/ipfs/QmbDhvpoZJN1KntxUUxkYV89RPTwqVBiyHBkvVh4QHSveo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap."
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap."
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol": {
				"IQuoter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "quoteExactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "quoteExactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceLimitX96",
									"type": "uint160"
								}
							],
							"name": "quoteExactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.",
						"kind": "dev",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"params": {
									"amountIn": "The amount of the first token to swap",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountOut": "The amount of the last token that would be received"
								}
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountIn": "The desired input amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountOut": "The amount of `tokenOut` that would be received"
								}
							},
							"quoteExactOutput(bytes,uint256)": {
								"params": {
									"amountOut": "The amount of the last token to receive",
									"path": "The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order"
								},
								"returns": {
									"amountIn": "The amount of first token required to be paid"
								}
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"params": {
									"amountOut": "The desired output amount",
									"fee": "The fee of the token pool to consider for the pair",
									"sqrtPriceLimitX96": "The price limit of the pool that cannot be exceeded by the swap",
									"tokenIn": "The token being swapped in",
									"tokenOut": "The token being swapped out"
								},
								"returns": {
									"amountIn": "The amount required as the input for the swap in order to receive `amountOut`"
								}
							}
						},
						"title": "Quoter Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"quoteExactInput(bytes,uint256)": "cdca1753",
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": "f7729d43",
							"quoteExactOutput(bytes,uint256)": "2f80bb1d",
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": "30d07f21"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.\",\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\"}},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountIn\":\"The desired input amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token to receive\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\"},\"returns\":{\"amountIn\":\"The amount of first token required to be paid\"}},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"params\":{\"amountOut\":\"The desired output amount\",\"fee\":\"The fee of the token pool to consider for the pair\",\"sqrtPriceLimitX96\":\"The price limit of the pool that cannot be exceeded by the swap\",\"tokenIn\":\"The token being swapped in\",\"tokenOut\":\"The token being swapped out\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\"}}},\"title\":\"Quoter Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in required for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle(address,address,uint24,uint256,uint160)\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"}},\"notice\":\"Supports quoting the calculated amounts from exact input or exact output swaps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\":\"IQuoter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol\":{\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://efdc8133033a1596f60f3619a317f8b3af98a6adffd85a9898c5a809c5c22417\",\"dweb:/ipfs/QmRkGjgzgSxhUVxwqiWZuz9M4Ff3TwTbzUgN3yJd4gxMfN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"notice": "Returns the amount out received for a given exact input swap without executing the swap"
							},
							"quoteExactInputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
							},
							"quoteExactOutput(bytes,uint256)": {
								"notice": "Returns the amount in required for a given exact output swap without executing the swap"
							},
							"quoteExactOutputSingle(address,address,uint24,uint256,uint160)": {
								"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
							}
						},
						"notice": "Supports quoting the calculated amounts from exact input or exact output swaps",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol": {
				"IQuoterV2": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"name": "quoteExactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint160[]",
									"name": "sqrtPriceX96AfterList",
									"type": "uint160[]"
								},
								{
									"internalType": "uint32[]",
									"name": "initializedTicksCrossedList",
									"type": "uint32[]"
								},
								{
									"internalType": "uint256",
									"name": "gasEstimate",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IQuoterV2.QuoteExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "quoteExactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96After",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "initializedTicksCrossed",
									"type": "uint32"
								},
								{
									"internalType": "uint256",
									"name": "gasEstimate",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "path",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "quoteExactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint160[]",
									"name": "sqrtPriceX96AfterList",
									"type": "uint160[]"
								},
								{
									"internalType": "uint32[]",
									"name": "initializedTicksCrossedList",
									"type": "uint32[]"
								},
								{
									"internalType": "uint256",
									"name": "gasEstimate",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct IQuoterV2.QuoteExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "quoteExactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96After",
									"type": "uint160"
								},
								{
									"internalType": "uint32",
									"name": "initializedTicksCrossed",
									"type": "uint32"
								},
								{
									"internalType": "uint256",
									"name": "gasEstimate",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.",
						"kind": "dev",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"params": {
									"amountIn": "The amount of the first token to swap",
									"path": "The path of the swap, i.e. each token pair and the pool fee"
								},
								"returns": {
									"amountOut": "The amount of the last token that would be received",
									"gasEstimate": "The estimate of the gas that the swap consumes",
									"initializedTicksCrossedList": "List of the initialized ticks that the swap crossed for each pool in the path",
									"sqrtPriceX96AfterList": "List of the sqrt price after the swap for each pool in the path"
								}
							},
							"quoteExactInputSingle((address,address,uint256,uint24,uint160))": {
								"params": {
									"params": "The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"
								},
								"returns": {
									"amountOut": "The amount of `tokenOut` that would be received",
									"gasEstimate": "The estimate of the gas that the swap consumes",
									"initializedTicksCrossed": "The number of initialized ticks that the swap crossed",
									"sqrtPriceX96After": "The sqrt price of the pool after the swap"
								}
							},
							"quoteExactOutput(bytes,uint256)": {
								"params": {
									"amountOut": "The amount of the last token to receive",
									"path": "The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order"
								},
								"returns": {
									"amountIn": "The amount of first token required to be paid",
									"gasEstimate": "The estimate of the gas that the swap consumes",
									"initializedTicksCrossedList": "List of the initialized ticks that the swap crossed for each pool in the path",
									"sqrtPriceX96AfterList": "List of the sqrt price after the swap for each pool in the path"
								}
							},
							"quoteExactOutputSingle((address,address,uint256,uint24,uint160))": {
								"params": {
									"params": "The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"
								},
								"returns": {
									"amountIn": "The amount required as the input for the swap in order to receive `amountOut`",
									"gasEstimate": "The estimate of the gas that the swap consumes",
									"initializedTicksCrossed": "The number of initialized ticks that the swap crossed",
									"sqrtPriceX96After": "The sqrt price of the pool after the swap"
								}
							}
						},
						"title": "QuoterV2 Interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"quoteExactInput(bytes,uint256)": "cdca1753",
							"quoteExactInputSingle((address,address,uint256,uint24,uint160))": "c6a5026a",
							"quoteExactOutput(bytes,uint256)": "2f80bb1d",
							"quoteExactOutputSingle((address,address,uint256,uint24,uint160))": "bd21704a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160[]\",\"name\":\"sqrtPriceX96AfterList\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32[]\",\"name\":\"initializedTicksCrossedList\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IQuoterV2.QuoteExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96After\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"initializedTicksCrossed\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160[]\",\"name\":\"sqrtPriceX96AfterList\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32[]\",\"name\":\"initializedTicksCrossedList\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IQuoterV2.QuoteExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96After\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"initializedTicksCrossed\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.\",\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossedList\":\"List of the initialized ticks that the swap crossed for each pool in the path\",\"sqrtPriceX96AfterList\":\"List of the sqrt price after the swap for each pool in the path\"}},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossed\":\"The number of initialized ticks that the swap crossed\",\"sqrtPriceX96After\":\"The sqrt price of the pool after the swap\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token to receive\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\"},\"returns\":{\"amountIn\":\"The amount of first token required to be paid\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossedList\":\"List of the initialized ticks that the swap crossed for each pool in the path\",\"sqrtPriceX96AfterList\":\"List of the sqrt price after the swap for each pool in the path\"}},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossed\":\"The number of initialized ticks that the swap crossed\",\"sqrtPriceX96After\":\"The sqrt price of the pool after the swap\"}}},\"title\":\"QuoterV2 Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in required for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"}},\"notice\":\"Supports quoting the calculated amounts from exact input or exact output swaps.For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol\":\"IQuoterV2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol\":{\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://63a8d7dcdd081004356b39e1b8e19ee56b02b3abd3e4165781bde1a100a35bed\",\"dweb:/ipfs/QmdfpYkMxoaeEd646aSioLZcPodnCnpZy9Ny4j98uAba2J\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"quoteExactInput(bytes,uint256)": {
								"notice": "Returns the amount out received for a given exact input swap without executing the swap"
							},
							"quoteExactInputSingle((address,address,uint256,uint24,uint160))": {
								"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
							},
							"quoteExactOutput(bytes,uint256)": {
								"notice": "Returns the amount in required for a given exact output swap without executing the swap"
							},
							"quoteExactOutputSingle((address,address,uint256,uint24,uint160))": {
								"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
							}
						},
						"notice": "Supports quoting the calculated amounts from exact input or exact output swaps.For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol": {
				"ISwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol": {
				"TransferHelper": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\":129:2537  library TransferHelper {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e64b4853d4c8c93b77a6de81034828c3ebd3176675fb1fcd5230ab00a547c56464736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e64b4853d4c8c93b77a6de81034828c3ebd3176675fb1fcd5230ab00a547c56464736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0x4B BASEFEE MSTORE8 0xD4 0xC8 0xC9 EXTCODESIZE PUSH24 0xA6DE81034828C3EBD3176675FB1FCD5230AB00A547C56464 PUSH20 0x6F6C634300081600330000000000000000000000 ",
							"sourceMap": "129:2408:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;129:2408:25;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e64b4853d4c8c93b77a6de81034828c3ebd3176675fb1fcd5230ab00a547c56464736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 0x4B BASEFEE MSTORE8 0xD4 0xC8 0xC9 EXTCODESIZE PUSH24 0xA6DE81034828C3EBD3176675FB1FCD5230AB00A547C56464 PUSH20 0x6F6C634300081600330000000000000000000000 ",
							"sourceMap": "129:2408:25:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"safeApprove(address,address,uint256)": "infinite",
								"safeTransfer(address,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(address,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH #[$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "B"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "CODECOPY",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MLOAD",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "BYTE",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "EQ",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPI",
									"source": 25
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "4"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "24"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "REVERT",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "tag",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "JUMPDEST",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "ADDRESS",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "PUSH",
									"source": 25,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "MSTORE8",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP3",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 129,
									"end": 2537,
									"name": "RETURN",
									"source": 25
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e64b4853d4c8c93b77a6de81034828c3ebd3176675fb1fcd5230ab00a547c56464736f6c63430008160033",
									".code": [
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSHDEPLOYADDRESS",
											"source": 25
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "ADDRESS",
											"source": 25
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "EQ",
											"source": 25
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 25,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 129,
											"end": 2537,
											"name": "REVERT",
											"source": 25
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
								"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol",
								"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol",
								"contracts/interfaces/IERC721Receiver.sol",
								"contracts/interfaces/IIERC20.sol",
								"contracts/interfaces/IOwner.sol",
								"contracts/interfaces/ITrader.sol",
								"contracts/interfaces/ITransaction.sol",
								"contracts/interfaces/IUniswapRouter.sol",
								"contracts/interfaces/IWETH.sol",
								"contracts/modifys/MulSigModify.sol",
								"contracts/uniswap/SwapToken.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol",
								"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol",
								"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol",
								"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol",
								"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol\":{\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://da1d1e81e5bf534f0bf2934b3193db6cb1933f91ec006d2b88e9ad10a617a2d2\",\"dweb:/ipfs/QmcPBk47QLMFWcX2y2S9eMFsJgoYWBd3R8ey55Bgmv6w6v\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol": {
				"IERC721Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC721 with permit",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC721 with permit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"}},\"notice\":\"Extension to ERC721 that includes a permit function for signature based approvals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol\":\"IERC721Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xfa21daed0b0237fa686441cd4b0026285ed267e2d9797df7c3e1d636bc7acd81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07a7e88b8d5e210b5fa28d5cfe4ebb28fc9f67997e486d1e9d72e7a21a47aca5\",\"dweb:/ipfs/QmevHKUPciCh4NV7aBQ1ZoS9QqgCSgv6BqEs8xXx9bkX8b\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xec5a69443802ea22c3da1d7c3865fa93e032a9ad01c8f84a8634cf50512a74ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e7f6e5b754bbf3d5daaf81b6cf2dea7bc663f4dc9815369aa2a025e3df7dd3\",\"dweb:/ipfs/Qmch2neG9eXBUxgdroF6iebPgw6CMSUV8q6F9pAo5SZxPc\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							}
						},
						"notice": "Extension to ERC721 that includes a permit function for signature based approvals",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol": {
				"INonfungiblePositionManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "Collect",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "DecreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"name": "IncreaseLiquidity",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PERMIT_TYPEHASH",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint128",
											"name": "amount0Max",
											"type": "uint128"
										},
										{
											"internalType": "uint128",
											"name": "amount1Max",
											"type": "uint128"
										}
									],
									"internalType": "struct INonfungiblePositionManager.CollectParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint128",
											"name": "liquidity",
											"type": "uint128"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "decreaseLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "tokenId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "increaseLiquidity",
							"outputs": [
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token0",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "token1",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "int24",
											"name": "tickLower",
											"type": "int24"
										},
										{
											"internalType": "int24",
											"name": "tickUpper",
											"type": "int24"
										},
										{
											"internalType": "uint256",
											"name": "amount0Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Desired",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount0Min",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount1Min",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct INonfungiblePositionManager.MintParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "amount0",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount1",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "nonce",
									"type": "uint96"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "int24",
									"name": "tickLower",
									"type": "int24"
								},
								{
									"internalType": "int24",
									"name": "tickUpper",
									"type": "int24"
								},
								{
									"internalType": "uint128",
									"name": "liquidity",
									"type": "uint128"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside0LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "feeGrowthInside1LastX128",
									"type": "uint256"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed0",
									"type": "uint128"
								},
								{
									"internalType": "uint128",
									"name": "tokensOwed1",
									"type": "uint128"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Collect(uint256,address,uint256,uint256)": {
								"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
								"params": {
									"amount0": "The amount of token0 owed to the position that was collected",
									"amount1": "The amount of token1 owed to the position that was collected",
									"recipient": "The address of the account that received the collected tokens",
									"tokenId": "The ID of the token for which underlying tokens were collected"
								}
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"params": {
									"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
									"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was decreased",
									"tokenId": "The ID of the token for which liquidity was decreased"
								}
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"details": "Also emitted when a token is minted",
								"params": {
									"amount0": "The amount of token0 that was paid for the increase in liquidity",
									"amount1": "The amount of token1 that was paid for the increase in liquidity",
									"liquidity": "The amount by which liquidity for the NFT position was increased",
									"tokenId": "The ID of the token for which liquidity was increased"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"returns": {
									"_0": "The domain seperator used in encoding of permit signature"
								}
							},
							"PERMIT_TYPEHASH()": {
								"returns": {
									"_0": "The typehash for the permit"
								}
							},
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"params": {
									"tokenId": "The ID of the token that is being burned"
								}
							},
							"collect((uint256,address,uint128,uint128))": {
								"params": {
									"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
								},
								"returns": {
									"amount0": "The amount of fees collected in token0",
									"amount1": "The amount of fees collected in token1"
								}
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 accounted to the position's tokens owed",
									"amount1": "The amount of token1 accounted to the position's tokens owed"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"params": {
									"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
								},
								"returns": {
									"amount0": "The amount of token0 to acheive resulting liquidity",
									"amount1": "The amount of token1 to acheive resulting liquidity",
									"liquidity": "The new liquidity amount as a result of the increase"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
								"params": {
									"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
								},
								"returns": {
									"amount0": "The amount of token0",
									"amount1": "The amount of token1",
									"liquidity": "The amount of liquidity for this position",
									"tokenId": "The ID of the token that represents the minted position"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"deadline": "The deadline timestamp by which the call must be mined for the approve to work",
									"r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
									"s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
									"spender": "The account that is being approved",
									"tokenId": "The ID of the token that is being approved for spending",
									"v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`"
								}
							},
							"positions(uint256)": {
								"details": "Throws if the token ID is not valid.",
								"params": {
									"tokenId": "The ID of the token that represents the position"
								},
								"returns": {
									"fee": "The fee associated with the pool",
									"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
									"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
									"liquidity": "The liquidity of the position",
									"nonce": "The nonce for permits",
									"operator": "The address that is approved for spending",
									"tickLower": "The lower end of the tick range for the position",
									"tickUpper": "The higher end of the tick range for the position",
									"token0": "The address of the token0 for a specific pool",
									"token1": "The address of the token1 for a specific pool",
									"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
									"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
								}
							},
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Non-fungible token for positions",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"PERMIT_TYPEHASH()": "30adf81f",
							"WETH9()": "4aa4a4fc",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"collect((uint256,address,uint128,uint128))": "fc6f7865",
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562",
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": "0c49ccbe",
							"factory()": "c45a0155",
							"getApproved(uint256)": "081812fc",
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": "219f5d17",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": "88316456",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": "7ac2ff7b",
							"positions(uint256)": "99fbab88",
							"refundETH()": "12210e8a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"DecreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"IncreaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManager.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Collect(uint256,address,uint256,uint256)\":{\"details\":\"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\",\"params\":{\"amount0\":\"The amount of token0 owed to the position that was collected\",\"amount1\":\"The amount of token1 owed to the position that was collected\",\"recipient\":\"The address of the account that received the collected tokens\",\"tokenId\":\"The ID of the token for which underlying tokens were collected\"}},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was accounted for the decrease in liquidity\",\"amount1\":\"The amount of token1 that was accounted for the decrease in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was decreased\",\"tokenId\":\"The ID of the token for which liquidity was decreased\"}},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"details\":\"Also emitted when a token is minted\",\"params\":{\"amount0\":\"The amount of token0 that was paid for the increase in liquidity\",\"amount1\":\"The amount of token1 that was paid for the increase in liquidity\",\"liquidity\":\"The amount by which liquidity for the NFT position was increased\",\"tokenId\":\"The ID of the token for which liquidity was increased\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The domain seperator used in encoding of permit signature\"}},\"PERMIT_TYPEHASH()\":{\"returns\":{\"_0\":\"The typehash for the permit\"}},\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"params\":{\"tokenId\":\"The ID of the token that is being burned\"}},\"collect((uint256,address,uint128,uint128))\":{\"params\":{\"params\":\"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 accounted to the position's tokens owed\",\"amount1\":\"The amount of token1 accounted to the position's tokens owed\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"params\":\"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change\"},\"returns\":{\"amount0\":\"The amount of token0 to acheive resulting liquidity\",\"amount1\":\"The amount of token1 to acheive resulting liquidity\",\"liquidity\":\"The new liquidity amount as a result of the increase\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"details\":\"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.\",\"params\":{\"params\":\"The params necessary to mint a position, encoded as `MintParams` in calldata\"},\"returns\":{\"amount0\":\"The amount of token0\",\"amount1\":\"The amount of token1\",\"liquidity\":\"The amount of liquidity for this position\",\"tokenId\":\"The ID of the token that represents the minted position\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The deadline timestamp by which the call must be mined for the approve to work\",\"r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"spender\":\"The account that is being approved\",\"tokenId\":\"The ID of the token that is being approved for spending\",\"v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\"}},\"positions(uint256)\":{\"details\":\"Throws if the token ID is not valid.\",\"params\":{\"tokenId\":\"The ID of the token that represents the position\"},\"returns\":{\"fee\":\"The fee associated with the pool\",\"feeGrowthInside0LastX128\":\"The fee growth of token0 as of the last action on the individual position\",\"feeGrowthInside1LastX128\":\"The fee growth of token1 as of the last action on the individual position\",\"liquidity\":\"The liquidity of the position\",\"nonce\":\"The nonce for permits\",\"operator\":\"The address that is approved for spending\",\"tickLower\":\"The lower end of the tick range for the position\",\"tickUpper\":\"The higher end of the tick range for the position\",\"token0\":\"The address of the token0 for a specific pool\",\"token1\":\"The address of the token1 for a specific pool\",\"tokensOwed0\":\"The uncollected amount of token0 owed to the position as of the last computation\",\"tokensOwed1\":\"The uncollected amount of token1 owed to the position as of the last computation\"}},\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Non-fungible token for positions\",\"version\":1},\"userdoc\":{\"events\":{\"Collect(uint256,address,uint256,uint256)\":{\"notice\":\"Emitted when tokens are collected for a position NFT\"},\"DecreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is decreased for a position NFT\"},\"IncreaseLiquidity(uint256,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is increased for a position NFT\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"The domain separator used in the permit signature\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"The permit typehash used in the permit signature\"},\"burn(uint256)\":{\"notice\":\"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first.\"},\"collect((uint256,address,uint128,uint128))\":{\"notice\":\"Collects up to a maximum amount of fees owed to a specific position to the recipient\"},\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"},\"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))\":{\"notice\":\"Decreases the amount of liquidity in a position and accounts it to the position\"},\"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\"},\"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\":{\"notice\":\"Creates a new position wrapped in a NFT\"},\"permit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve of a specific token ID for spending by spender via signature\"},\"positions(uint256)\":{\"notice\":\"Returns the position information associated with a given token ID.\"},\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol\":\"INonfungiblePositionManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xfa21daed0b0237fa686441cd4b0026285ed267e2d9797df7c3e1d636bc7acd81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07a7e88b8d5e210b5fa28d5cfe4ebb28fc9f67997e486d1e9d72e7a21a47aca5\",\"dweb:/ipfs/QmevHKUPciCh4NV7aBQ1ZoS9QqgCSgv6BqEs8xXx9bkX8b\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"keccak256\":\"0x5e6e51ad6f7112e78fbffeea4c22652834072f43d90863c1445d2e2cfbc0af57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33f0ab34bec16e95d749a9dbdb7da81fa3b3f548c4ca4e5fb092ac681af8143c\",\"dweb:/ipfs/Qmc4WRitpgsjwS8rThbE9WpBv5BkNpM348iq1PPZkPSwHy\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0x6157fe3c92392b54295c896bbcf92a0538ae7229344ab673c5e0351e7978a097\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567add65e27772a9e8690420360882a0dccfe704ea3162ddd026448e2935471b\",\"dweb:/ipfs/QmSRAB9z7Q63nQTJuykgNqi1JRcC8tFN2TEAQj9S45xUYS\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xec5a69443802ea22c3da1d7c3865fa93e032a9ad01c8f84a8634cf50512a74ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a6e7f6e5b754bbf3d5daaf81b6cf2dea7bc663f4dc9815369aa2a025e3df7dd3\",\"dweb:/ipfs/Qmch2neG9eXBUxgdroF6iebPgw6CMSUV8q6F9pAo5SZxPc\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol\":{\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471\",\"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol\":{\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6e3b10f75c101de044c1253672207399c1513fd1f0f17be31069c18c0b9a1460\",\"dweb:/ipfs/QmXrkXNY6njQfepE7KbRtJMruGXfrZwsMMsW7m5e3XS9Hf\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]},\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x1a282547ae4326feb97fbb4a3a666f3c20739b07e0368ead986641f9d0d95e94\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5ed8534eb7c0a03f4d67432e7a667b45d970825d42a67205ddd7b71bc8097e82\",\"dweb:/ipfs/QmWK4EqghbXmgmmgHByaWXpFGKeXkqzzoAbdct2sX3huGk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Collect(uint256,address,uint256,uint256)": {
								"notice": "Emitted when tokens are collected for a position NFT"
							},
							"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is decreased for a position NFT"
							},
							"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
								"notice": "Emitted when liquidity is increased for a position NFT"
							}
						},
						"kind": "user",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"notice": "The domain separator used in the permit signature"
							},
							"PERMIT_TYPEHASH()": {
								"notice": "The permit typehash used in the permit signature"
							},
							"burn(uint256)": {
								"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
							},
							"collect((uint256,address,uint128,uint128))": {
								"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
							},
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							},
							"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
								"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
							},
							"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
								"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
							},
							"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
								"notice": "Creates a new position wrapped in a NFT"
							},
							"permit(address,uint256,uint256,uint8,bytes32,bytes32)": {
								"notice": "Approve of a specific token ID for spending by spender via signature"
							},
							"positions(uint256)": {
								"notice": "Returns the position information associated with a given token ID."
							},
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol": {
				"IPeripheryImmutableState": {
					"abi": [
						{
							"inputs": [],
							"name": "WETH9",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"WETH9()": {
								"returns": {
									"_0": "Returns the address of WETH9"
								}
							},
							"factory()": {
								"returns": {
									"_0": "Returns the address of the Uniswap V3 factory"
								}
							}
						},
						"title": "Immutable state",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH9()": "4aa4a4fc",
							"factory()": "c45a0155"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"WETH9()\":{\"returns\":{\"_0\":\"Returns the address of WETH9\"}},\"factory()\":{\"returns\":{\"_0\":\"Returns the address of the Uniswap V3 factory\"}}},\"title\":\"Immutable state\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Functions that return immutable state of the router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol\":\"IPeripheryImmutableState\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol\":{\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f\",\"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Functions that return immutable state of the router",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol": {
				"IPeripheryPayments": {
					"abi": [
						{
							"inputs": [],
							"name": "refundETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "sweepToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountMinimum",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "unwrapWETH9",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"refundETH()": {
								"details": "Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount"
							},
							"sweepToken(address,uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing the token from users",
								"params": {
									"amountMinimum": "The minimum amount of token required for a transfer",
									"recipient": "The destination address of the token",
									"token": "The contract address of the token which will be transferred to `recipient`"
								}
							},
							"unwrapWETH9(uint256,address)": {
								"details": "The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",
								"params": {
									"amountMinimum": "The minimum amount of WETH9 to unwrap",
									"recipient": "The address receiving ETH"
								}
							}
						},
						"title": "Periphery Payments",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"refundETH()": "12210e8a",
							"sweepToken(address,uint256,address)": "df2ab5bb",
							"unwrapWETH9(uint256,address)": "49404b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"refundETH()\":{\"details\":\"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount\"},\"sweepToken(address,uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\"params\":{\"amountMinimum\":\"The minimum amount of token required for a transfer\",\"recipient\":\"The destination address of the token\",\"token\":\"The contract address of the token which will be transferred to `recipient`\"}},\"unwrapWETH9(uint256,address)\":{\"details\":\"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\"params\":{\"amountMinimum\":\"The minimum amount of WETH9 to unwrap\",\"recipient\":\"The address receiving ETH\"}}},\"title\":\"Periphery Payments\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"refundETH()\":{\"notice\":\"Refunds any ETH balance held by this contract to the `msg.sender`\"},\"sweepToken(address,uint256,address)\":{\"notice\":\"Transfers the full amount of a token held by this contract to recipient\"},\"unwrapWETH9(uint256,address)\":{\"notice\":\"Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\"}},\"notice\":\"Functions to ease deposits and withdrawals of ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol\":\"IPeripheryPayments\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol\":{\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407\",\"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"refundETH()": {
								"notice": "Refunds any ETH balance held by this contract to the `msg.sender`"
							},
							"sweepToken(address,uint256,address)": {
								"notice": "Transfers the full amount of a token held by this contract to recipient"
							},
							"unwrapWETH9(uint256,address)": {
								"notice": "Unwraps the contract's WETH9 balance and sends it to recipient as ETH."
							}
						},
						"notice": "Functions to ease deposits and withdrawals of ETH",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol": {
				"IPoolInitializer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token0",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token1",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "fee",
									"type": "uint24"
								},
								{
									"internalType": "uint160",
									"name": "sqrtPriceX96",
									"type": "uint160"
								}
							],
							"name": "createAndInitializePoolIfNecessary",
							"outputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"details": "This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool",
								"params": {
									"fee": "The fee amount of the v3 pool for the specified token pair",
									"sqrtPriceX96": "The initial square root price of the pool as a Q64.96 value",
									"token0": "The contract address of token0 of the pool",
									"token1": "The contract address of token1 of the pool"
								},
								"returns": {
									"pool": "Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
								}
							}
						},
						"title": "Creates and initializes V3 Pools",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": "13ead562"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"createAndInitializePoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"details\":\"This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\",\"params\":{\"fee\":\"The fee amount of the v3 pool for the specified token pair\",\"sqrtPriceX96\":\"The initial square root price of the pool as a Q64.96 value\",\"token0\":\"The contract address of token0 of the pool\",\"token1\":\"The contract address of token1 of the pool\"},\"returns\":{\"pool\":\"Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\"}}},\"title\":\"Creates and initializes V3 Pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAndInitializePoolIfNecessary(address,address,uint24,uint160)\":{\"notice\":\"Creates a new pool if it does not exist, then initializes if not initialized\"}},\"notice\":\"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol\":\"IPoolInitializer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol\":{\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f\",\"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createAndInitializePoolIfNecessary(address,address,uint24,uint160)": {
								"notice": "Creates a new pool if it does not exist, then initializes if not initialized"
							}
						},
						"notice": "Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",
						"version": 1
					}
				}
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol": {
				"PoolAddress": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Provides functions for deriving a pool address from the factory, tokens, and the fee",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\":167:1828  library PoolAddress {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\":167:1828  library PoolAddress {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122039c4f5f61767cbcf5a2f7138f79d0d8d73b7c09c9e8daceb73cab0264652d59364736f6c63430008160033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122039c4f5f61767cbcf5a2f7138f79d0d8d73b7c09c9e8daceb73cab0264652d59364736f6c63430008160033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY 0xC4 CREATE2 0xF6 OR PUSH8 0xCBCF5A2F7138F79D 0xD DUP14 PUSH20 0xB7C09C9E8DACEB73CAB0264652D59364736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "167:1661:31:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;167:1661:31;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122039c4f5f61767cbcf5a2f7138f79d0d8d73b7c09c9e8daceb73cab0264652d59364736f6c63430008160033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY 0xC4 CREATE2 0xF6 OR PUSH8 0xCBCF5A2F7138F79D 0xD DUP14 PUSH20 0xB7C09C9E8DACEB73CAB0264652D59364736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ",
							"sourceMap": "167:1661:31:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"computeAddress(address,struct PoolAddress.PoolKey memory)": "infinite",
								"getPoolKey(address,address,uint24)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH #[$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH [$]",
									"source": 31,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "B"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "CODECOPY",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "DUP1",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "MLOAD",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "BYTE",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "EQ",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH [tag]",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "JUMPI",
									"source": 31
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "MSTORE",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "4"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "MSTORE",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "24"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "REVERT",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "tag",
									"source": 31,
									"value": "1"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "JUMPDEST",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "ADDRESS",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "0"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "MSTORE",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "PUSH",
									"source": 31,
									"value": "73"
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "MSTORE8",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "DUP3",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "DUP2",
									"source": 31
								},
								{
									"begin": 167,
									"end": 1828,
									"name": "RETURN",
									"source": 31
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122039c4f5f61767cbcf5a2f7138f79d0d8d73b7c09c9e8daceb73cab0264652d59364736f6c63430008160033",
									".code": [
										{
											"begin": 167,
											"end": 1828,
											"name": "PUSHDEPLOYADDRESS",
											"source": 31
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "ADDRESS",
											"source": 31
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "EQ",
											"source": 31
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "PUSH",
											"source": 31,
											"value": "80"
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "PUSH",
											"source": 31,
											"value": "40"
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "MSTORE",
											"source": 31
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "PUSH",
											"source": 31,
											"value": "0"
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "DUP1",
											"source": 31
										},
										{
											"begin": 167,
											"end": 1828,
											"name": "REVERT",
											"source": 31
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
								"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol",
								"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol",
								"contracts/interfaces/IERC721Receiver.sol",
								"contracts/interfaces/IIERC20.sol",
								"contracts/interfaces/IOwner.sol",
								"contracts/interfaces/ITrader.sol",
								"contracts/interfaces/ITransaction.sol",
								"contracts/interfaces/IUniswapRouter.sol",
								"contracts/interfaces/IWETH.sol",
								"contracts/modifys/MulSigModify.sol",
								"contracts/uniswap/SwapToken.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol",
								"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol",
								"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol",
								"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol",
								"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol",
								"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol",
								"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Provides functions for deriving a pool address from the factory, tokens, and the fee\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\":\"PoolAddress\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\":{\"keccak256\":\"0x1a282547ae4326feb97fbb4a3a666f3c20739b07e0368ead986641f9d0d95e94\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://5ed8534eb7c0a03f4d67432e7a667b45d970825d42a67205ddd7b71bc8097e82\",\"dweb:/ipfs/QmWK4EqghbXmgmmgHByaWXpFGKeXkqzzoAbdct2sX3huGk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/uniswap/SwapToken.sol:31:32:\n   |\n31 |     function onERC721Received( address operator, address, uint256 tokenId, bytes calldata) external pure override returns (bytes4) {\n   |                                ^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1909,
					"file": "contracts/uniswap/SwapToken.sol",
					"start": 1893
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/uniswap/SwapToken.sol:31:59:\n   |\n31 |     function onERC721Received( address operator, address, uint256 tokenId, bytes calldata) external pure override returns (bytes4) {\n   |                                                           ^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1935,
					"file": "contracts/uniswap/SwapToken.sol",
					"start": 1920
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n  --> contracts/uniswap/SwapToken.sol:97:10:\n   |\n97 |         (bool success, bytes memory mintDataBytes) = address(nonfungiblePositionManager).call(minitParamsBytes);\n   |          ^^^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 5307,
					"file": "contracts/uniswap/SwapToken.sol",
					"start": 5295
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "213:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "395:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "404:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "426:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "446:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:0"
									},
									"src": "389:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "626:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "635:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "658:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "683:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:0"
									},
									"src": "620:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:0",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:0",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "930:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "970:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:0"
									},
									"scope": 77,
									"src": "911:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1221:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1233:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1266:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:0"
									},
									"scope": 77,
									"src": "1203:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1566:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1581:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1621:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:0"
									},
									"scope": 77,
									"src": "1547:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2325:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2375:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:0"
									},
									"scope": 77,
									"src": "2308:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2711:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2725:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2737:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2770:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:0"
									},
									"scope": 77,
									"src": "2689:87:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "203:2575:0",
							"usedErrors": [],
							"usedEvents": [
								11,
								20
							]
						}
					],
					"src": "106:2673:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						]
					},
					"id": 195,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 81,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 265,
							"src": "133:62:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 80,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 264,
										"src": "141:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 83,
										"name": "IERC165",
										"nameLocations": [
											"286:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 264,
										"src": "286:7:1"
									},
									"id": 84,
									"nodeType": "InheritanceSpecifier",
									"src": "286:7:1"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 82,
								"nodeType": "StructuredDocumentation",
								"src": "197:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 194,
							"linearizedBaseContracts": [
								194,
								264
							],
							"name": "IERC721",
							"nameLocation": "275:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "300:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 93,
									"name": "Transfer",
									"nameLocation": "399:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "424:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "408:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 86,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "408:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "446:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "430:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "430:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "466:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "450:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "407:67:1"
									},
									"src": "393:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "481:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 102,
									"name": "Approval",
									"nameLocation": "586:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "611:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "595:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 95,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "595:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 98,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "634:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "618:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 97,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "618:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 100,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "660:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "644:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "644:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "594:74:1"
									},
									"src": "580:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "675:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 111,
									"name": "ApprovalForAll",
									"nameLocation": "803:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "834:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "818:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "818:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "841:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "841:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "872:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "867:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "867:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "817:64:1"
									},
									"src": "797:85:1"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "888:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 119,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "978:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "996:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "988:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "988:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "987:15:1"
									},
									"returnParameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1034:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "1026:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1026:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1025:17:1"
									},
									"scope": 194,
									"src": "969:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "1049:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 127,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1194:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1210:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "1202:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1202:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1201:17:1"
									},
									"returnParameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1250:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "1242:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1241:15:1"
									},
									"scope": 194,
									"src": "1185:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "1263:565:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1842:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1867:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1859:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1859:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1881:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1873:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1873:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1893:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1885:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1885:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1917:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "1902:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 135,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1902:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1858:64:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1931:0:1"
									},
									"scope": 194,
									"src": "1833:99:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "1938:705:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2657:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2682:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2674:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2674:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2696:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2688:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2688:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2708:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "2700:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2700:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2673:43:1"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2725:0:1"
									},
									"scope": 194,
									"src": "2648:78:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "2732:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3478:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3499:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "3491:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3491:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3513:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "3505:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3505:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3525:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "3517:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3517:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3490:43:1"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3542:0:1"
									},
									"scope": 194,
									"src": "3469:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "3549:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4015:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4031:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "4023:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4043:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "4035:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4035:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4022:29:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4060:0:1"
									},
									"scope": 194,
									"src": "4006:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "4067:315:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 175,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4396:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4422:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "4414:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4414:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4437:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "4432:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 171,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4432:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4413:33:1"
									},
									"returnParameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4455:0:1"
									},
									"scope": 194,
									"src": "4387:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "4462:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 183,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4615:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4635:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "4627:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4627:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4626:17:1"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4675:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "4667:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4667:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4666:18:1"
									},
									"scope": 194,
									"src": "4606:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "4691:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4843:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4868:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "4860:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4883:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "4875:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4875:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:33:1"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "4916:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 190,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4916:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4915:6:1"
									},
									"scope": 194,
									"src": "4834:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 195,
							"src": "265:4659:1",
							"usedErrors": [],
							"usedEvents": [
								93,
								102,
								111
							]
						}
					],
					"src": "107:4818:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Enumerable": [
							225
						]
					},
					"id": 226,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 196,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 197,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 226,
							"sourceUnit": 195,
							"src": "59:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 199,
										"name": "IERC721",
										"nameLocations": [
											"252:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 194,
										"src": "252:7:2"
									},
									"id": 200,
									"nodeType": "InheritanceSpecifier",
									"src": "252:7:2"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 198,
								"nodeType": "StructuredDocumentation",
								"src": "84:136:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 225,
							"linearizedBaseContracts": [
								225,
								194,
								264
							],
							"name": "IERC721Enumerable",
							"nameLocation": "231:17:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "267:82:2",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "363:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "374:2:2"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "400:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "400:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "399:9:2"
									},
									"scope": 225,
									"src": "354:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "415:171:2",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "600:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "628:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "620:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "620:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "643:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "635:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "619:30:2"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "681:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "673:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "673:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:17:2"
									},
									"scope": 225,
									"src": "591:99:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "696:164:2",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 224,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "874:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "895:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "887:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "886:15:2"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "925:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "924:9:2"
									},
									"scope": 225,
									"src": "865:69:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 226,
							"src": "221:715:2",
							"usedErrors": [],
							"usedEvents": [
								93,
								102,
								111
							]
						}
					],
					"src": "33:904:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Metadata": [
							252
						]
					},
					"id": 253,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 227,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 228,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 253,
							"sourceUnit": 195,
							"src": "59:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 230,
										"name": "IERC721",
										"nameLocations": [
											"247:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 194,
										"src": "247:7:3"
									},
									"id": 231,
									"nodeType": "InheritanceSpecifier",
									"src": "247:7:3"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 229,
								"nodeType": "StructuredDocumentation",
								"src": "84:133:3",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 252,
							"linearizedBaseContracts": [
								252,
								194,
								264
							],
							"name": "IERC721Metadata",
							"nameLocation": "228:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "262:58:3",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "334:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "338:2:3"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "364:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 234,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "364:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "363:15:3"
									},
									"scope": 252,
									"src": "325:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "385:60:3",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "459:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "465:2:3"
									},
									"returnParameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "491:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 240,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "491:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "490:15:3"
									},
									"scope": 252,
									"src": "450:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "512:90:3",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 251,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "616:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "633:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "625:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "625:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "624:17:3"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "665:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 248,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "665:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "664:15:3"
									},
									"scope": 252,
									"src": "607:73:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 253,
							"src": "218:464:3",
							"usedErrors": [],
							"usedEvents": [
								93,
								102,
								111
							]
						}
					],
					"src": "33:650:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						]
					},
					"id": 265,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 254,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 255,
								"nodeType": "StructuredDocumentation",
								"src": "140:279:4",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 264,
							"linearizedBaseContracts": [
								264
							],
							"name": "IERC165",
							"nameLocation": "430:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "444:340:4",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 263,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "798:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "823:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "816:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 257,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "816:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "815:20:4"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "859:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 260,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "859:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "858:6:4"
									},
									"scope": 264,
									"src": "789:76:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 265,
							"src": "420:447:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:753:4"
				},
				"id": 4
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							278
						]
					},
					"id": 279,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 266,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3SwapCallback",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 267,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:5",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 278,
							"linearizedBaseContracts": [
								278
							],
							"name": "IUniswapV3SwapCallback",
							"nameLocation": "225:22:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 268,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:5",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nameLocation": "1166:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nameLocation": "1204:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "1197:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 269,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nameLocation": "1233:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "1226:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 271,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1270:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 277,
												"src": "1255:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 273,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:5"
									},
									"returnParameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:5"
									},
									"scope": 278,
									"src": "1157:133:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 279,
							"src": "215:1077:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1248:5"
				},
				"id": 5
			},
			"@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol",
					"exportedSymbols": {
						"IMulticall": [
							293
						]
					},
					"id": 294,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 280,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"id": 281,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IMulticall",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 282,
								"nodeType": "StructuredDocumentation",
								"src": "91:109:6",
								"text": "@title Multicall interface\n @notice Enables calling multiple methods in a single call to the contract"
							},
							"fullyImplemented": false,
							"id": 293,
							"linearizedBaseContracts": [
								293
							],
							"name": "IMulticall",
							"nameLocation": "210:10:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "227:378:6",
										"text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
									},
									"functionSelector": "ac9650d8",
									"id": 292,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nameLocation": "619:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "646:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 292,
												"src": "629:21:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 284,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "629:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 285,
													"nodeType": "ArrayTypeName",
													"src": "629:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "628:23:6"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "results",
												"nameLocation": "693:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 292,
												"src": "678:22:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 288,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "678:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 289,
													"nodeType": "ArrayTypeName",
													"src": "678:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:24:6"
									},
									"scope": 293,
									"src": "610:92:6",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 294,
							"src": "200:504:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:660:6"
				},
				"id": 6
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol",
					"exportedSymbols": {
						"ISelfPermit": [
							361
						]
					},
					"id": 362,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 295,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISelfPermit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 296,
								"nodeType": "StructuredDocumentation",
								"src": "71:117:7",
								"text": "@title Self Permit\n @notice Functionality to call permit on any EIP-2612-compliant token for use in the route"
							},
							"fullyImplemented": false,
							"id": 361,
							"linearizedBaseContracts": [
								361
							],
							"name": "ISelfPermit",
							"nameLocation": "198:11:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "216:663:7",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "f3995c67",
									"id": 312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermit",
									"nameLocation": "893:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "921:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "913:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "913:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "944:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "936:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "936:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "967:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "959:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "991:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "985:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 304,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "985:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1010:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1002:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 306,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1029:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "1021:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 308,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1021:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "903:133:7"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1053:0:7"
									},
									"scope": 361,
									"src": "884:170:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "1060:779:7",
										"text": "@notice Permits this contract to spend a given token from `msg.sender`\n @dev The `owner` is always msg.sender and the `spender` is always address(this).\n Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n @param token The address of the token spent\n @param value The amount that can be spent of token\n @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "c2e3140a",
									"id": 328,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitIfNecessary",
									"nameLocation": "1853:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1892:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1884:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1884:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1915:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1907:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 316,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1907:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1938:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1930:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1930:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1962:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1956:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 320,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1956:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1981:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1973:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 322,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1973:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2000:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1992:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 324,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1992:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1874:133:7"
									},
									"returnParameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2024:0:7"
									},
									"scope": 361,
									"src": "1844:181:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 329,
										"nodeType": "StructuredDocumentation",
										"src": "2031:670:7",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "4659a494",
									"id": 344,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowed",
									"nameLocation": "2715:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2750:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2742:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2742:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "2773:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2765:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "expiry",
												"nameLocation": "2796:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2788:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2818:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2812:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 336,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2812:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2837:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2829:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 338,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2829:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2856:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "2848:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 340,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2848:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2732:131:7"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2880:0:7"
									},
									"scope": 361,
									"src": "2706:175:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "2887:801:7",
										"text": "@notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n @dev The `owner` is always msg.sender and the `spender` is always address(this)\n Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n @param token The address of the token spent\n @param nonce The current nonce of the owner\n @param expiry The timestamp at which the permit is no longer valid\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "a4a78f0c",
									"id": 360,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfPermitAllowedIfNecessary",
									"nameLocation": "3702:28:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3748:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "3740:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3740:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "3771:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "3763:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3763:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "expiry",
												"nameLocation": "3794:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "3786:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3786:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3816:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "3810:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 352,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3810:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 355,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3835:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "3827:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 354,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3827:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3854:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "3846:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 356,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3846:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3730:131:7"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3878:0:7"
									},
									"scope": 361,
									"src": "3693:186:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 362,
							"src": "188:3693:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:3837:7"
				},
				"id": 7
			},
			"contracts/interfaces/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							377
						]
					},
					"id": 378,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 363,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 377,
							"linearizedBaseContracts": [
								377
							],
							"name": "IERC721Receiver",
							"nameLocation": "71:15:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "150b7a02",
									"id": 376,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "103:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "138:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "130:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 364,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "130:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "165:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "157:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 366,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "157:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "188:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "180:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "180:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "221:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "206:19:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 370,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "206:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "119:113:8"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "251:6:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 373,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "251:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "250:8:8"
									},
									"scope": 377,
									"src": "94:165:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 378,
							"src": "61:201:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:229:8"
				},
				"id": 8
			},
			"contracts/interfaces/IIERC20.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IIERC20.sol",
					"exportedSymbols": {
						"IIERC20": [
							430
						]
					},
					"id": 431,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 379,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IIERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 430,
							"linearizedBaseContracts": [
								430
							],
							"name": "IIERC20",
							"nameLocation": "71:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "18160ddd",
									"id": 384,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "95:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "106:2:9"
									},
									"returnParameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 384,
												"src": "132:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "132:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "131:9:9"
									},
									"scope": 430,
									"src": "86:55:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "70a08231",
									"id": 391,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "156:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "174:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "166:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "166:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "165:17:9"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "206:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "206:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "205:9:9"
									},
									"scope": 430,
									"src": "147:68:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "a9059cbb",
									"id": 400,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "230:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "247:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "239:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "239:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "266:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "258:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "258:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "238:35:9"
									},
									"returnParameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "292:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 397,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "292:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "291:6:9"
									},
									"scope": 430,
									"src": "221:77:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dd62ed3e",
									"id": 409,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "313:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "331:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "323:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 401,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "323:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "346:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "338:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "338:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "322:32:9"
									},
									"returnParameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "378:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "377:9:9"
									},
									"scope": 430,
									"src": "304:83:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "095ea7b3",
									"id": 418,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "402:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "418:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "410:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "435:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "427:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:33:9"
									},
									"returnParameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "461:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 415,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "461:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "460:6:9"
									},
									"scope": 430,
									"src": "393:74:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "23b872dd",
									"id": 429,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "482:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "503:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "495:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "519:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "511:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 421,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "538:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "530:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "530:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:51:9"
									},
									"returnParameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "564:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 426,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "564:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "563:6:9"
									},
									"scope": 430,
									"src": "473:97:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 431,
							"src": "61:512:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:540:9"
				},
				"id": 9
			},
			"contracts/interfaces/IOwner.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IOwner.sol",
					"exportedSymbols": {
						"IOwner": [
							440
						]
					},
					"id": 441,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 432,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IOwner",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 440,
							"linearizedBaseContracts": [
								440
							],
							"name": "IOwner",
							"nameLocation": "71:6:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "2f54bf6e",
									"id": 439,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOwner",
									"nameLocation": "92:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "108:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 439,
												"src": "100:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "100:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "99:16:10"
									},
									"returnParameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 439,
												"src": "139:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 436,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "139:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "138:6:10"
									},
									"scope": 440,
									"src": "83:62:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 441,
							"src": "61:87:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:115:10"
				},
				"id": 10
			},
			"contracts/interfaces/ITrader.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ITrader.sol",
					"exportedSymbols": {
						"ITrader": [
							450
						]
					},
					"id": 451,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 442,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITrader",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 450,
							"linearizedBaseContracts": [
								450
							],
							"name": "ITrader",
							"nameLocation": "71:7:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "4039ad0d",
									"id": 449,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isTrader",
									"nameLocation": "93:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "110:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "102:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "102:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "101:16:11"
									},
									"returnParameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 449,
												"src": "140:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 446,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "140:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "139:6:11"
									},
									"scope": 450,
									"src": "84:62:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 451,
							"src": "61:88:11",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:116:11"
				},
				"id": 11
			},
			"contracts/interfaces/ITransaction.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ITransaction.sol",
					"exportedSymbols": {
						"ITransaction": [
							474
						]
					},
					"id": 475,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 452,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITransaction",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 474,
							"linearizedBaseContracts": [
								474
							],
							"name": "ITransaction",
							"nameLocation": "71:12:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "26e7b525",
									"id": 459,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transactionNotExec",
									"nameLocation": "98:18:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "txIndex",
												"nameLocation": "122:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "117:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 453,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "117:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "116:14:12"
									},
									"returnParameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "153:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 456,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "153:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "152:6:12"
									},
									"scope": 474,
									"src": "89:70:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "297dbaef",
									"id": 466,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transactionNotConfirmed",
									"nameLocation": "172:23:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "txIndex",
												"nameLocation": "201:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "196:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 460,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "196:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "195:14:12"
									},
									"returnParameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "232:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 463,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "232:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "231:6:12"
									},
									"scope": 474,
									"src": "163:75:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "eea0099d",
									"id": 473,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transactionNotExit",
									"nameLocation": "251:18:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "txIndex",
												"nameLocation": "275:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "270:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 467,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "270:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "269:14:12"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "306:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "306:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "305:6:12"
									},
									"scope": 474,
									"src": "242:70:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 475,
							"src": "61:254:12",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:282:12"
				},
				"id": 12
			},
			"contracts/interfaces/IUniswapRouter.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IUniswapRouter.sol",
					"exportedSymbols": {
						"IApproveAndCall": [
							1404
						],
						"IMulticall": [
							293
						],
						"IMulticallExtended": [
							1436
						],
						"ISelfPermit": [
							361
						],
						"ISwapRouter02": [
							1456
						],
						"IUniswapRouter": [
							484
						],
						"IUniswapV3SwapCallback": [
							278
						],
						"IV2SwapRouter": [
							1491
						],
						"IV3SwapRouter": [
							1583
						]
					},
					"id": 485,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 476,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:13"
						},
						{
							"id": 477,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "59:19:13"
						},
						{
							"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol",
							"file": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol",
							"id": 478,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 485,
							"sourceUnit": 1457,
							"src": "82:107:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 479,
										"name": "ISwapRouter02",
										"nameLocations": [
											"221:13:13"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1456,
										"src": "221:13:13"
									},
									"id": 480,
									"nodeType": "InheritanceSpecifier",
									"src": "221:13:13"
								}
							],
							"canonicalName": "IUniswapRouter",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 484,
							"linearizedBaseContracts": [
								484,
								1456,
								361,
								1436,
								293,
								1404,
								1583,
								278,
								1491
							],
							"name": "IUniswapRouter",
							"nameLocation": "203:14:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "12210e8a",
									"id": 483,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nameLocation": "251:9:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "260:2:13"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "279:0:13"
									},
									"scope": 484,
									"src": "242:38:13",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 485,
							"src": "193:90:13",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:250:13"
				},
				"id": 13
			},
			"contracts/interfaces/IWETH.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/IWETH.sol",
					"exportedSymbols": {
						"IIERC20": [
							430
						],
						"IWETH": [
							498
						]
					},
					"id": 499,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 486,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:14"
						},
						{
							"absolutePath": "contracts/interfaces/IIERC20.sol",
							"file": "./IIERC20.sol",
							"id": 487,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 499,
							"sourceUnit": 431,
							"src": "61:23:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 488,
										"name": "IIERC20",
										"nameLocations": [
											"107:7:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 430,
										"src": "107:7:14"
									},
									"id": 489,
									"nodeType": "InheritanceSpecifier",
									"src": "107:7:14"
								}
							],
							"canonicalName": "IWETH",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 498,
							"linearizedBaseContracts": [
								498,
								430
							],
							"name": "IWETH",
							"nameLocation": "98:5:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d0e30db0",
									"id": 492,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "131:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "138:2:14"
									},
									"returnParameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "157:0:14"
									},
									"scope": 498,
									"src": "122:36:14",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "173:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "190:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "182:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 493,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "182:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "181:16:14"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "206:0:14"
									},
									"scope": 498,
									"src": "164:43:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 499,
							"src": "88:122:14",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:177:14"
				},
				"id": 14
			},
			"contracts/modifys/MulSigModify.sol": {
				"ast": {
					"absolutePath": "contracts/modifys/MulSigModify.sol",
					"exportedSymbols": {
						"IOwner": [
							440
						],
						"ITrader": [
							450
						],
						"ITransaction": [
							474
						],
						"MulSigModify": [
							628
						]
					},
					"id": 629,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 500,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:15"
						},
						{
							"absolutePath": "contracts/interfaces/IOwner.sol",
							"file": "./../interfaces/IOwner.sol",
							"id": 501,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 629,
							"sourceUnit": 441,
							"src": "61:36:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ITrader.sol",
							"file": "./../interfaces/ITrader.sol",
							"id": 502,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 629,
							"sourceUnit": 451,
							"src": "99:37:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ITransaction.sol",
							"file": "./../interfaces/ITransaction.sol",
							"id": 503,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 629,
							"sourceUnit": 475,
							"src": "138:42:15",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 505,
										"name": "IOwner",
										"nameLocations": [
											"253:6:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 440,
										"src": "253:6:15"
									},
									"id": 506,
									"nodeType": "InheritanceSpecifier",
									"src": "253:6:15"
								},
								{
									"baseName": {
										"id": 507,
										"name": "ITrader",
										"nameLocations": [
											"260:7:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 450,
										"src": "260:7:15"
									},
									"id": 508,
									"nodeType": "InheritanceSpecifier",
									"src": "260:7:15"
								},
								{
									"baseName": {
										"id": 509,
										"name": "ITransaction",
										"nameLocations": [
											"268:12:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 474,
										"src": "268:12:15"
									},
									"id": 510,
									"nodeType": "InheritanceSpecifier",
									"src": "268:12:15"
								}
							],
							"canonicalName": "MulSigModify",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 504,
								"nodeType": "StructuredDocumentation",
								"src": "184:35:15",
								"text": "@dev 多签合约的判定器"
							},
							"fullyImplemented": false,
							"id": 628,
							"linearizedBaseContracts": [
								628,
								474,
								450,
								440
							],
							"name": "MulSigModify",
							"nameLocation": "237:12:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 548,
										"nodeType": "Block",
										"src": "458:323:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 522,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "485:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 521,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "477:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 520,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "477:7:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 523,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "477:10:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 524,
																"name": "_traderPeople",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 513,
																"src": "491:13:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "477:27:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c6964207472616465722070656f706c65",
															"id": 526,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "506:23:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_db4c02874672268dea6977016912c5f6bc41069f6e9ae51117beb33078856cfa",
																"typeString": "literal_string \"invalid trader people\""
															},
															"value": "invalid trader people"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_db4c02874672268dea6977016912c5f6bc41069f6e9ae51117beb33078856cfa",
																"typeString": "literal_string \"invalid trader people\""
															}
														],
														"id": 519,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "469:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "469:61:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 528,
												"nodeType": "ExpressionStatement",
												"src": "469:61:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 532,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 530,
																"name": "_ownerCount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 515,
																"src": "549:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 531,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "563:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "549:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6f776e6572207265717569726564",
															"id": 533,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "566:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b15ddd9193c0ea205dc50f4b49d6d571a07ea26fdc96c5ddc96474b4f15e09a2",
																"typeString": "literal_string \"owner required\""
															},
															"value": "owner required"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b15ddd9193c0ea205dc50f4b49d6d571a07ea26fdc96c5ddc96474b4f15e09a2",
																"typeString": "literal_string \"owner required\""
															}
														],
														"id": 529,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "541:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "541:42:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 535,
												"nodeType": "ExpressionStatement",
												"src": "541:42:15"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 543,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 539,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 537,
																	"name": "_approvalThresholdCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 517,
																	"src": "616:23:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "642:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "616:27:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 540,
																	"name": "_approvalThresholdCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 517,
																	"src": "664:23:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"id": 541,
																	"name": "_ownerCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 515,
																	"src": "691:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "664:38:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "616:86:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c6964206e756d626572206f6620636f6e6669726d6174696f6e73",
															"id": 544,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "717:33:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6b3bf3d8a6bffbae2bea76adb960b1e1040973f48fd2c839884aa107efb92515",
																"typeString": "literal_string \"invalid number of confirmations\""
															},
															"value": "invalid number of confirmations"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6b3bf3d8a6bffbae2bea76adb960b1e1040973f48fd2c839884aa107efb92515",
																"typeString": "literal_string \"invalid number of confirmations\""
															}
														],
														"id": 536,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "594:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "594:167:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 546,
												"nodeType": "ExpressionStatement",
												"src": "594:167:15"
											},
											{
												"id": 547,
												"nodeType": "PlaceholderStatement",
												"src": "772:1:15"
											}
										]
									},
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "288:33:15",
										"text": "@dev 创建合约实例条件"
									},
									"id": 549,
									"name": "checkConstructor",
									"nameLocation": "336:16:15",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "_traderPeople",
												"nameLocation": "371:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "363:21:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "363:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "_ownerCount",
												"nameLocation": "400:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "395:16:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 514,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "395:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "_approvalThresholdCount",
												"nameLocation": "427:23:15",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "422:28:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 516,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "422:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "352:105:15"
									},
									"src": "327:454:15",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 562,
										"nodeType": "Block",
										"src": "855:78:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 555,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "887:3:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 556,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "891:6:15",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "887:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 553,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "874:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MulSigModify_$628",
																		"typeString": "contract MulSigModify"
																	}
																},
																"id": 554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "879:7:15",
																"memberName": "isOwner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 439,
																"src": "874:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view external returns (bool)"
																}
															},
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "874:24:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6f6e6c79206f776e6572",
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "900:12:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ae2932905fc5bb055d2e7b29311075afd0dbf688106cf649cb515d342f4c7367",
																"typeString": "literal_string \"only owner\""
															},
															"value": "only owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ae2932905fc5bb055d2e7b29311075afd0dbf688106cf649cb515d342f4c7367",
																"typeString": "literal_string \"only owner\""
															}
														],
														"id": 552,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "866:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "866:47:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 560,
												"nodeType": "ExpressionStatement",
												"src": "866:47:15"
											},
											{
												"id": 561,
												"nodeType": "PlaceholderStatement",
												"src": "924:1:15"
											}
										]
									},
									"documentation": {
										"id": 550,
										"nodeType": "StructuredDocumentation",
										"src": "789:39:15",
										"text": "@dev 校验是否是合约所有者"
									},
									"id": 563,
									"name": "onlyOwner",
									"nameLocation": "843:9:15",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "852:2:15"
									},
									"src": "834:99:15",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 577,
										"nodeType": "Block",
										"src": "1043:89:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 571,
																	"name": "_txIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 566,
																	"src": "1086:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 569,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1062:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MulSigModify_$628",
																		"typeString": "contract MulSigModify"
																	}
																},
																"id": 570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1067:18:15",
																"memberName": "transactionNotExit",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 473,
																"src": "1062:23:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view external returns (bool)"
																}
															},
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1062:33:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7478206e6f74206578697374",
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1097:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a909ce7876ba32b8546d13cd992296b945a4c596ba828696b7fe4119f042148a",
																"typeString": "literal_string \"tx not exist\""
															},
															"value": "tx not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a909ce7876ba32b8546d13cd992296b945a4c596ba828696b7fe4119f042148a",
																"typeString": "literal_string \"tx not exist\""
															}
														],
														"id": 568,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1054:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1054:58:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "1054:58:15"
											},
											{
												"id": 576,
												"nodeType": "PlaceholderStatement",
												"src": "1123:1:15"
											}
										]
									},
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "941:63:15",
										"text": "@dev 校验交易是否存在，交易不存在抛出异常"
									},
									"id": 578,
									"name": "txExists",
									"nameLocation": "1019:8:15",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "_txIndex",
												"nameLocation": "1033:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "1028:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 565,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1028:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1027:15:15"
									},
									"src": "1010:122:15",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 591,
										"nodeType": "Block",
										"src": "1268:88:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 585,
																	"name": "_txIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 580,
																	"src": "1311:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 583,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1287:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MulSigModify_$628",
																		"typeString": "contract MulSigModify"
																	}
																},
																"id": 584,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1292:18:15",
																"memberName": "transactionNotExec",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 459,
																"src": "1287:23:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view external returns (bool)"
																}
															},
															"id": 586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1287:33:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7478206578656375746564",
															"id": 587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1322:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04da0062500ffbc404968ebc474f2ceb8ddfed2f2af9337c93a7c38727b1c0bd",
																"typeString": "literal_string \"tx executed\""
															},
															"value": "tx executed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04da0062500ffbc404968ebc474f2ceb8ddfed2f2af9337c93a7c38727b1c0bd",
																"typeString": "literal_string \"tx executed\""
															}
														],
														"id": 582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1279:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1279:57:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 589,
												"nodeType": "ExpressionStatement",
												"src": "1279:57:15"
											},
											{
												"id": 590,
												"nodeType": "PlaceholderStatement",
												"src": "1347:1:15"
											}
										]
									},
									"id": 592,
									"name": "notExecuted",
									"nameLocation": "1241:11:15",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "_txIndex",
												"nameLocation": "1258:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "1253:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 579,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1253:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1252:15:15"
									},
									"src": "1232:124:15",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 606,
										"nodeType": "Block",
										"src": "1479:136:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 600,
																	"name": "_txIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 595,
																	"src": "1541:8:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 598,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1512:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MulSigModify_$628",
																		"typeString": "contract MulSigModify"
																	}
																},
																"id": 599,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1517:23:15",
																"memberName": "transactionNotConfirmed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 466,
																"src": "1512:28:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (uint256) view external returns (bool)"
																}
															},
															"id": 601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1512:38:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "616c726561647920636f6e6669726d6564",
															"id": 602,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1565:19:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2297a0ce838684750f382a8f417045e84ae64b1af62d9a96a54ae59c9ca1eed5",
																"typeString": "literal_string \"already confirmed\""
															},
															"value": "already confirmed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2297a0ce838684750f382a8f417045e84ae64b1af62d9a96a54ae59c9ca1eed5",
																"typeString": "literal_string \"already confirmed\""
															}
														],
														"id": 597,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1490:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1490:105:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "ExpressionStatement",
												"src": "1490:105:15"
											},
											{
												"id": 605,
												"nodeType": "PlaceholderStatement",
												"src": "1606:1:15"
											}
										]
									},
									"documentation": {
										"id": 593,
										"nodeType": "StructuredDocumentation",
										"src": "1364:72:15",
										"text": "@dev 校验交易是否已经确认，交易已经确认抛出异常"
									},
									"id": 607,
									"name": "notConfirmed",
									"nameLocation": "1451:12:15",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "_txIndex",
												"nameLocation": "1469:8:15",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "1464:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 594,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1464:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1463:15:15"
									},
									"src": "1442:173:15",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 626,
										"nodeType": "Block",
										"src": "1722:164:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 613,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1769:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 614,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1773:6:15",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1769:10:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 611,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1755:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MulSigModify_$628",
																			"typeString": "contract MulSigModify"
																		}
																	},
																	"id": 612,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1760:8:15",
																	"memberName": "isTrader",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 449,
																	"src": "1755:13:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address) view external returns (bool)"
																	}
																},
																"id": 615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1755:25:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 618,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1797:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1801:6:15",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1797:10:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 616,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1784:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MulSigModify_$628",
																			"typeString": "contract MulSigModify"
																		}
																	},
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1789:7:15",
																	"memberName": "isOwner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 439,
																	"src": "1784:12:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address) view external returns (bool)"
																	}
																},
																"id": 620,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1784:24:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1755:53:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74207472616465722070656f706c65206f72206e6f74206f776e6572",
															"id": 622,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1823:32:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a66bb56d8bb601f1d73142f884432616d106b7ca531c0a10298f1494e62ade73",
																"typeString": "literal_string \"not trader people or not owner\""
															},
															"value": "not trader people or not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a66bb56d8bb601f1d73142f884432616d106b7ca531c0a10298f1494e62ade73",
																"typeString": "literal_string \"not trader people or not owner\""
															}
														],
														"id": 610,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1733:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1733:133:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 624,
												"nodeType": "ExpressionStatement",
												"src": "1733:133:15"
											},
											{
												"id": 625,
												"nodeType": "PlaceholderStatement",
												"src": "1877:1:15"
											}
										]
									},
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "1623:58:15",
										"text": "@dev  校验是否是合约所有者认可的交易员"
									},
									"id": 627,
									"name": "onlyTraderPeopleOrOwner",
									"nameLocation": "1696:23:15",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1719:2:15"
									},
									"src": "1687:199:15",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 629,
							"src": "219:2268:15",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:2456:15"
				},
				"id": 15
			},
			"contracts/uniswap/SwapToken.sol": {
				"ast": {
					"absolutePath": "contracts/uniswap/SwapToken.sol",
					"exportedSymbols": {
						"IApproveAndCall": [
							1404
						],
						"IERC165": [
							264
						],
						"IERC20": [
							77
						],
						"IERC721": [
							194
						],
						"IERC721Enumerable": [
							225
						],
						"IERC721Metadata": [
							252
						],
						"IERC721Permit": [
							2039
						],
						"IERC721Receiver": [
							377
						],
						"IIERC20": [
							430
						],
						"IMulticall": [
							293
						],
						"IMulticallExtended": [
							1436
						],
						"INonfungiblePositionManager": [
							2238
						],
						"IOwner": [
							440
						],
						"IPeripheryImmutableState": [
							2254
						],
						"IPeripheryPayments": [
							2280
						],
						"IPoolInitializer": [
							2299
						],
						"IQuoter": [
							1640
						],
						"IQuoterV2": [
							1733
						],
						"ISelfPermit": [
							361
						],
						"ISwapRouter": [
							1833
						],
						"ISwapRouter02": [
							1456
						],
						"ITrader": [
							450
						],
						"ITransaction": [
							474
						],
						"IUniswapRouter": [
							484
						],
						"IUniswapV3SwapCallback": [
							278
						],
						"IV2SwapRouter": [
							1491
						],
						"IV3SwapRouter": [
							1583
						],
						"IWETH": [
							498
						],
						"MulSigModify": [
							628
						],
						"PoolAddress": [
							2397
						],
						"SwapToken": [
							1305
						],
						"TransferHelper": [
							2004
						]
					},
					"id": 1306,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 630,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "37:24:16"
						},
						{
							"id": 631,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "63:19:16"
						},
						{
							"absolutePath": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol",
							"file": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol",
							"id": 632,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 1834,
							"src": "86:104:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol",
							"file": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol",
							"id": 633,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 1641,
							"src": "192:100:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol",
							"file": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol",
							"id": 634,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 1734,
							"src": "294:102:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol",
							"file": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol",
							"id": 635,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 1457,
							"src": "398:107:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol",
							"file": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol",
							"id": 636,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 1584,
							"src": "507:107:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol",
							"file": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol",
							"id": 637,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 2005,
							"src": "693:98:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol",
							"file": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol",
							"id": 638,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 2239,
							"src": "793:114:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IUniswapRouter.sol",
							"file": "../interfaces/IUniswapRouter.sol",
							"id": 639,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 485,
							"src": "909:42:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IWETH.sol",
							"file": "../interfaces/IWETH.sol",
							"id": 640,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 499,
							"src": "953:33:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IIERC20.sol",
							"file": "../interfaces/IIERC20.sol",
							"id": 641,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 431,
							"src": "988:35:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/modifys/MulSigModify.sol",
							"file": "../modifys/MulSigModify.sol",
							"id": 642,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 629,
							"src": "1025:37:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/IERC721Receiver.sol",
							"file": "../interfaces/IERC721Receiver.sol",
							"id": 643,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1306,
							"sourceUnit": 378,
							"src": "1064:43:16",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 644,
										"name": "MulSigModify",
										"nameLocations": [
											"1142:12:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 628,
										"src": "1142:12:16"
									},
									"id": 645,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:12:16"
								},
								{
									"baseName": {
										"id": 646,
										"name": "IERC721Receiver",
										"nameLocations": [
											"1156:15:16"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 377,
										"src": "1156:15:16"
									},
									"id": 647,
									"nodeType": "InheritanceSpecifier",
									"src": "1156:15:16"
								}
							],
							"canonicalName": "SwapToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": false,
							"id": 1305,
							"linearizedBaseContracts": [
								1305,
								377,
								628,
								474,
								450,
								440
							],
							"name": "SwapToken",
							"nameLocation": "1129:9:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "735de9f7",
									"id": 653,
									"mutability": "constant",
									"name": "uniswapRouter",
									"nameLocation": "1210:13:16",
									"nodeType": "VariableDeclaration",
									"scope": 1305,
									"src": "1179:105:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IUniswapRouter_$484",
										"typeString": "contract IUniswapRouter"
									},
									"typeName": {
										"id": 649,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 648,
											"name": "IUniswapRouter",
											"nameLocations": [
												"1179:14:16"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 484,
											"src": "1179:14:16"
										},
										"referencedDeclaration": 484,
										"src": "1179:14:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapRouter_$484",
											"typeString": "contract IUniswapRouter"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307833624641343736394642303965656643356138306436453837633342394336353066374165343845",
												"id": 651,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1241:42:16",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 650,
											"name": "IUniswapRouter",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 484,
											"src": "1226:14:16",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IUniswapRouter_$484_$",
												"typeString": "type(contract IUniswapRouter)"
											}
										},
										"id": 652,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1226:58:16",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IUniswapRouter_$484",
											"typeString": "contract IUniswapRouter"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b44a2722",
									"id": 659,
									"mutability": "mutable",
									"name": "nonfungiblePositionManager",
									"nameLocation": "1326:26:16",
									"nodeType": "VariableDeclaration",
									"scope": 1305,
									"src": "1291:135:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
										"typeString": "contract INonfungiblePositionManager"
									},
									"typeName": {
										"id": 655,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 654,
											"name": "INonfungiblePositionManager",
											"nameLocations": [
												"1291:27:16"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 2238,
											"src": "1291:27:16"
										},
										"referencedDeclaration": 2238,
										"src": "1291:27:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
											"typeString": "contract INonfungiblePositionManager"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307831323338353336303731453163363737413633323432396533363535633739396232326344413532",
												"id": 657,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1383:42:16",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0x1238536071E1c677A632429e3655c799b22cDA52"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 656,
											"name": "INonfungiblePositionManager",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 2238,
											"src": "1355:27:16",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$2238_$",
												"typeString": "type(contract INonfungiblePositionManager)"
											}
										},
										"id": 658,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1355:71:16",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
											"typeString": "contract INonfungiblePositionManager"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 665,
									"mutability": "constant",
									"name": "uniToken",
									"nameLocation": "1458:8:16",
									"nodeType": "VariableDeclaration",
									"scope": 1305,
									"src": "1433:87:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IIERC20_$430",
										"typeString": "contract IIERC20"
									},
									"typeName": {
										"id": 661,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 660,
											"name": "IIERC20",
											"nameLocations": [
												"1433:7:16"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 430,
											"src": "1433:7:16"
										},
										"referencedDeclaration": 430,
										"src": "1433:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IIERC20_$430",
											"typeString": "contract IIERC20"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307831663938343061383564356146356266314431373632463932354244414464433432303146393834",
												"id": 663,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1477:42:16",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 662,
											"name": "IIERC20",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 430,
											"src": "1469:7:16",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IIERC20_$430_$",
												"typeString": "type(contract IIERC20)"
											}
										},
										"id": 664,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1469:51:16",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IIERC20_$430",
											"typeString": "contract IIERC20"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 671,
									"mutability": "constant",
									"name": "wethToken",
									"nameLocation": "1550:9:16",
									"nodeType": "VariableDeclaration",
									"scope": 1305,
									"src": "1527:84:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IWETH_$498",
										"typeString": "contract IWETH"
									},
									"typeName": {
										"id": 667,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 666,
											"name": "IWETH",
											"nameLocations": [
												"1527:5:16"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 498,
											"src": "1527:5:16"
										},
										"referencedDeclaration": 498,
										"src": "1527:5:16",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IWETH_$498",
											"typeString": "contract IWETH"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307866466639393736373832643436434330353633304431663665424162313862323332346436423134",
												"id": 669,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1568:42:16",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 668,
											"name": "IWETH",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 498,
											"src": "1562:5:16",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IWETH_$498_$",
												"typeString": "type(contract IWETH)"
											}
										},
										"id": 670,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1562:49:16",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IWETH_$498",
											"typeString": "contract IWETH"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 675,
									"mutability": "constant",
									"name": "MIN_TICK",
									"nameLocation": "1647:8:16",
									"nodeType": "VariableDeclaration",
									"scope": 1305,
									"src": "1624:41:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 672,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "1624:5:16",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 674,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "1658:7:16",
										"subExpression": {
											"hexValue": "383837323732",
											"id": 673,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1659:6:16",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_887272_by_1",
												"typeString": "int_const 887272"
											},
											"value": "887272"
										},
										"typeDescriptions": {
											"typeIdentifier": "t_rational_minus_887272_by_1",
											"typeString": "int_const -887272"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 679,
									"mutability": "constant",
									"name": "MAX_TICK",
									"nameLocation": "1695:8:16",
									"nodeType": "VariableDeclaration",
									"scope": 1305,
									"src": "1672:43:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 676,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "1672:5:16",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"id": 678,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "-",
										"prefix": true,
										"src": "1706:9:16",
										"subExpression": {
											"id": 677,
											"name": "MIN_TICK",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 675,
											"src": "1707:8:16",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 682,
									"mutability": "constant",
									"name": "TICK_SPACING",
									"nameLocation": "1745:12:16",
									"nodeType": "VariableDeclaration",
									"scope": 1305,
									"src": "1722:40:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int24",
										"typeString": "int24"
									},
									"typeName": {
										"id": 680,
										"name": "int24",
										"nodeType": "ElementaryTypeName",
										"src": "1722:5:16",
										"typeDescriptions": {
											"typeIdentifier": "t_int24",
											"typeString": "int24"
										}
									},
									"value": {
										"hexValue": "3630",
										"id": 681,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1760:2:16",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_60_by_1",
											"typeString": "int_const 60"
										},
										"value": "60"
									},
									"visibility": "private"
								},
								{
									"baseFunctions": [
										376
									],
									"body": {
										"id": 701,
										"nodeType": "Block",
										"src": "1993:87:16",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 697,
															"name": "this",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967268,
															"src": "2042:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_SwapToken_$1305",
																"typeString": "contract SwapToken"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2047:16:16",
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 702,
														"src": "2042:21:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_pure$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) pure external returns (bytes4)"
														}
													},
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "2064:8:16",
													"memberName": "selector",
													"nodeType": "MemberAccess",
													"src": "2042:30:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 696,
												"id": 700,
												"nodeType": "Return",
												"src": "2035:37:16"
											}
										]
									},
									"documentation": {
										"id": 683,
										"nodeType": "StructuredDocumentation",
										"src": "1777:83:16",
										"text": "@dev 实现' onERC721Received '，使该合约可以接收erc721代币的托管"
									},
									"functionSelector": "150b7a02",
									"id": 702,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "1875:16:16",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 693,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1967:8:16"
									},
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1901:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "1893:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1893:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "1911:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 686,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1911:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1928:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "1920:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1920:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "1937:14:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 690,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1937:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1891:61:16"
									},
									"returnParameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "1985:6:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 694,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1985:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1984:8:16"
									},
									"scope": 1305,
									"src": "1866:214:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 746,
										"nodeType": "Block",
										"src": "2253:265:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 715,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 712,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2280:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 711,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2272:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 710,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2272:7:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2272:10:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 714,
																"name": "inputToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 705,
																"src": "2286:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2272:24:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c696420746f6b656e",
															"id": 716,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2298:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7",
																"typeString": "literal_string \"invalid token\""
															},
															"value": "invalid token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_91766924399ba2aa6ad0c8d1146b6e8fd47173f69f3b391bd887f350814cada7",
																"typeString": "literal_string \"invalid token\""
															}
														],
														"id": 709,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2264:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 717,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2264:50:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 718,
												"nodeType": "ExpressionStatement",
												"src": "2264:50:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 722,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 720,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 707,
																"src": "2333:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 721,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2344:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2333:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c696420746f6b656e20636f756e74",
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2347:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b253071d95eaa725149020fef0a2b34036b078180e6b400885606d5bde964b09",
																"typeString": "literal_string \"invalid token count\""
															},
															"value": "invalid token count"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b253071d95eaa725149020fef0a2b34036b078180e6b400885606d5bde964b09",
																"typeString": "literal_string \"invalid token count\""
															}
														],
														"id": 719,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2325:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2325:44:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 725,
												"nodeType": "ExpressionStatement",
												"src": "2325:44:16"
											},
											{
												"assignments": [
													727
												],
												"declarations": [
													{
														"constant": false,
														"id": 727,
														"mutability": "mutable",
														"name": "count",
														"nameLocation": "2388:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 746,
														"src": "2380:13:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 726,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2380:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 737,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 734,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2434:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																],
																"id": 733,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2426:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 732,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2426:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2426:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 729,
																	"name": "inputToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 705,
																	"src": "2404:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 728,
																"name": "IIERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 430,
																"src": "2396:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IIERC20_$430_$",
																	"typeString": "type(contract IIERC20)"
																}
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2396:19:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IIERC20_$430",
																"typeString": "contract IIERC20"
															}
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2416:9:16",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 391,
														"src": "2396:29:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2396:44:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2380:60:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 739,
																"name": "count",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 727,
																"src": "2459:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 740,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 707,
																"src": "2468:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2459:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f20656e6f75676820746f6b656e7321",
															"id": 742,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2478:19:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_da6e554eec865357eae13209ae7647f8f66e3f6a0d3aa5f03657982ca2341800",
																"typeString": "literal_string \"no enough tokens!\""
															},
															"value": "no enough tokens!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_da6e554eec865357eae13209ae7647f8f66e3f6a0d3aa5f03657982ca2341800",
																"typeString": "literal_string \"no enough tokens!\""
															}
														],
														"id": 738,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2451:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2451:47:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 744,
												"nodeType": "ExpressionStatement",
												"src": "2451:47:16"
											},
											{
												"id": 745,
												"nodeType": "PlaceholderStatement",
												"src": "2509:1:16"
											}
										]
									},
									"documentation": {
										"id": 703,
										"nodeType": "StructuredDocumentation",
										"src": "2088:96:16",
										"text": "@notice 没有充足的代币，报错\n @dev 检查交换代币，输入代币数量"
									},
									"id": 747,
									"name": "checkInputToken",
									"nameLocation": "2199:15:16",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "inputToken",
												"nameLocation": "2223:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "2215:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 707,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2243:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "2235:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 706,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2235:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:38:16"
									},
									"src": "2190:328:16",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 829,
										"nodeType": "Block",
										"src": "2824:912:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 768,
															"name": "inputToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "2924:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 771,
																	"name": "uniswapRouter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 653,
																	"src": "2944:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IUniswapRouter_$484",
																		"typeString": "contract IUniswapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IUniswapRouter_$484",
																		"typeString": "contract IUniswapRouter"
																	}
																],
																"id": 770,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2936:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 769,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2936:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 772,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2936:22:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 773,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 754,
															"src": "2960:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 765,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2004,
															"src": "2897:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 767,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2912:11:16",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1977,
														"src": "2897:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2897:72:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 775,
												"nodeType": "ExpressionStatement",
												"src": "2897:72:16"
											},
											{
												"assignments": [
													780
												],
												"declarations": [
													{
														"constant": false,
														"id": 780,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "3025:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 829,
														"src": "2981:50:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$1513_memory_ptr",
															"typeString": "struct IV3SwapRouter.ExactInputSingleParams"
														},
														"typeName": {
															"id": 779,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 778,
																"name": "IV3SwapRouter.ExactInputSingleParams",
																"nameLocations": [
																	"2981:13:16",
																	"2995:22:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1513,
																"src": "2981:36:16"
															},
															"referencedDeclaration": 1513,
															"src": "2981:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$1513_storage_ptr",
																"typeString": "struct IV3SwapRouter.ExactInputSingleParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 794,
												"initialValue": {
													"arguments": [
														{
															"id": 783,
															"name": "inputToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "3113:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 784,
															"name": "outputToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 752,
															"src": "3152:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "33303030",
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3187:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3000_by_1",
																"typeString": "int_const 3000"
															},
															"value": "3000"
														},
														{
															"arguments": [
																{
																	"id": 788,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3229:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																],
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3221:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 786,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3221:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 789,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3221:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 790,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 754,
															"src": "3263:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 791,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3308:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 792,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3347:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_3000_by_1",
																"typeString": "int_const 3000"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"expression": {
															"id": 781,
															"name": "IV3SwapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1583,
															"src": "3034:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IV3SwapRouter_$1583_$",
																"typeString": "type(contract IV3SwapRouter)"
															}
														},
														"id": 782,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3062:22:16",
														"memberName": "ExactInputSingleParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1513,
														"src": "3034:50:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_ExactInputSingleParams_$1513_storage_ptr_$",
															"typeString": "type(struct IV3SwapRouter.ExactInputSingleParams storage pointer)"
														}
													},
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"3104:7:16",
														"3142:8:16",
														"3182:3:16",
														"3210:9:16",
														"3253:8:16",
														"3290:16:16",
														"3328:17:16"
													],
													"names": [
														"tokenIn",
														"tokenOut",
														"fee",
														"recipient",
														"amountIn",
														"amountOutMinimum",
														"sqrtPriceLimitX96"
													],
													"nodeType": "FunctionCall",
													"src": "3034:330:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$1513_memory_ptr",
														"typeString": "struct IV3SwapRouter.ExactInputSingleParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2981:383:16"
											},
											{
												"assignments": [
													796
												],
												"declarations": [
													{
														"constant": false,
														"id": 796,
														"mutability": "mutable",
														"name": "exactInputSingleBytes",
														"nameLocation": "3388:21:16",
														"nodeType": "VariableDeclaration",
														"scope": 829,
														"src": "3375:34:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 795,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3375:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 802,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "6578616374496e70757453696e676c652828616464726573732c616464726573732c75696e7432342c616464726573732c75696e743235362c75696e743235362c75696e743136302929",
															"id": 799,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3436:76:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04e45aaf2114920f5543345d26d17731f15bfb089b8360c4e1c69c195f2adcc6",
																"typeString": "literal_string \"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\""
															},
															"value": "exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))"
														},
														{
															"id": 800,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "3514:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$1513_memory_ptr",
																"typeString": "struct IV3SwapRouter.ExactInputSingleParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_04e45aaf2114920f5543345d26d17731f15bfb089b8360c4e1c69c195f2adcc6",
																"typeString": "literal_string \"exactInputSingle((address,address,uint24,address,uint256,uint256,uint160))\""
															},
															{
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$1513_memory_ptr",
																"typeString": "struct IV3SwapRouter.ExactInputSingleParams memory"
															}
														],
														"expression": {
															"id": 797,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3412:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 798,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3416:19:16",
														"memberName": "encodeWithSignature",
														"nodeType": "MemberAccess",
														"src": "3412:23:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (string memory) pure returns (bytes memory)"
														}
													},
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3412:109:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3375:146:16"
											},
											{
												"assignments": [
													804,
													806
												],
												"declarations": [
													{
														"constant": false,
														"id": 804,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3538:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 829,
														"src": "3533:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 803,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3533:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 806,
														"mutability": "mutable",
														"name": "returnDatas",
														"nameLocation": "3560:11:16",
														"nodeType": "VariableDeclaration",
														"scope": 829,
														"src": "3547:24:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 805,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3547:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 814,
												"initialValue": {
													"arguments": [
														{
															"id": 812,
															"name": "exactInputSingleBytes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 796,
															"src": "3603:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 809,
																	"name": "uniswapRouter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 653,
																	"src": "3583:13:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IUniswapRouter_$484",
																		"typeString": "contract IUniswapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IUniswapRouter_$484",
																		"typeString": "contract IUniswapRouter"
																	}
																],
																"id": 808,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3575:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 807,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3575:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3575:22:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 811,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3598:4:16",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "3575:27:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3575:50:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3532:93:16"
											},
											{
												"assignments": [
													816
												],
												"declarations": [
													{
														"constant": false,
														"id": 816,
														"mutability": "mutable",
														"name": "amountOut",
														"nameLocation": "3644:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 829,
														"src": "3636:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 815,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3636:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 824,
												"initialValue": {
													"arguments": [
														{
															"id": 819,
															"name": "returnDatas",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 806,
															"src": "3667:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"components": [
																{
																	"id": 821,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3681:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 820,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3681:7:16",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 822,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3680:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															}
														],
														"expression": {
															"id": 817,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3656:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 818,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3660:6:16",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "3656:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3656:34:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3636:54:16"
											},
											{
												"expression": {
													"components": [
														{
															"id": 825,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 804,
															"src": "3709:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 826,
															"name": "amountOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 816,
															"src": "3718:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 827,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "3708:20:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 764,
												"id": 828,
												"nodeType": "Return",
												"src": "3701:27:16"
											}
										]
									},
									"documentation": {
										"id": 748,
										"nodeType": "StructuredDocumentation",
										"src": "2532:140:16",
										"text": "@dev 交换代币\n @param inputToken 输入代币\n @param outputToken 输出代币\n @param amountIn 交换数量"
									},
									"functionSelector": "ec6cc0cc",
									"id": 830,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 757,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 756,
												"name": "onlyOwner",
												"nameLocations": [
													"2766:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "2766:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "2766:9:16"
										},
										{
											"id": 759,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 758,
												"name": "onlyTraderPeopleOrOwner",
												"nameLocations": [
													"2776:23:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 627,
												"src": "2776:23:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "2776:23:16"
										}
									],
									"name": "swapTokens",
									"nameLocation": "2687:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "inputToken",
												"nameLocation": "2706:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2698:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 749,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2698:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "outputToken",
												"nameLocation": "2726:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2718:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 751,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2718:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2747:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2739:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 753,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2739:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2697:59:16"
									},
									"returnParameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2809:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 760,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2809:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2815:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2815:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2808:15:16"
									},
									"scope": 1305,
									"src": "2678:1058:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "4228:1927:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 857,
															"name": "inputToken1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 833,
															"src": "4266:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 860,
																	"name": "nonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 659,
																	"src": "4287:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																],
																"id": 859,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4279:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 858,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4279:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4279:35:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 862,
															"name": "inputToken1Count",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 835,
															"src": "4316:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 854,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2004,
															"src": "4239:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 856,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4254:11:16",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1977,
														"src": "4239:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4239:95:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 864,
												"nodeType": "ExpressionStatement",
												"src": "4239:95:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 868,
															"name": "inputToken2",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 837,
															"src": "4372:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 871,
																	"name": "nonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 659,
																	"src": "4393:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																],
																"id": 870,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4385:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 869,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4385:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4385:35:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 873,
															"name": "inputToken2Count",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 839,
															"src": "4422:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 865,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2004,
															"src": "4345:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 867,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4360:11:16",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1977,
														"src": "4345:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4345:95:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 875,
												"nodeType": "ExpressionStatement",
												"src": "4345:95:16"
											},
											{
												"assignments": [
													880
												],
												"declarations": [
													{
														"constant": false,
														"id": 880,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "4497:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 1022,
														"src": "4451:52:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_MintParams_$2148_memory_ptr",
															"typeString": "struct INonfungiblePositionManager.MintParams"
														},
														"typeName": {
															"id": 879,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 878,
																"name": "INonfungiblePositionManager.MintParams",
																"nameLocations": [
																	"4451:27:16",
																	"4479:10:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2148,
																"src": "4451:38:16"
															},
															"referencedDeclaration": 2148,
															"src": "4451:38:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$2148_storage_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 909,
												"initialValue": {
													"arguments": [
														{
															"id": 883,
															"name": "inputToken1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 833,
															"src": "4577:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 884,
															"name": "inputToken2",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 837,
															"src": "4611:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "33303030",
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4642:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3000_by_1",
																"typeString": "int_const 3000"
															},
															"value": "3000"
														},
														{
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 891,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 888,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 886,
																			"name": "MIN_TICK",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 675,
																			"src": "4673:8:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 887,
																			"name": "TICK_SPACING",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 682,
																			"src": "4684:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "4673:23:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"id": 889,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4672:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 890,
																"name": "TICK_SPACING",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 682,
																"src": "4700:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "4672:40:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		},
																		"id": 894,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 892,
																			"name": "MAX_TICK",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 679,
																			"src": "4739:8:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 893,
																			"name": "TICK_SPACING",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 682,
																			"src": "4750:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int24",
																				"typeString": "int24"
																			}
																		},
																		"src": "4739:23:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int24",
																			"typeString": "int24"
																		}
																	}
																],
																"id": 895,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4738:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 896,
																"name": "TICK_SPACING",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 682,
																"src": "4766:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_int24",
																	"typeString": "int24"
																}
															},
															"src": "4738:40:16",
															"typeDescriptions": {
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															}
														},
														{
															"id": 898,
															"name": "inputToken1Count",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 835,
															"src": "4809:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 899,
															"name": "inputToken2Count",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 839,
															"src": "4856:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 900,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4899:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 901,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4927:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"arguments": [
																{
																	"id": 904,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4962:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																],
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4954:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 902,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4954:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4954:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 906,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "4992:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 907,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4998:9:16",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "4992:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_3000_by_1",
																"typeString": "int_const 3000"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_int24",
																"typeString": "int24"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 881,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "4515:27:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$2238_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 882,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4543:10:16",
														"memberName": "MintParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2148,
														"src": "4515:38:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_MintParams_$2148_storage_ptr_$",
															"typeString": "type(struct INonfungiblePositionManager.MintParams storage pointer)"
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"4569:6:16",
														"4603:6:16",
														"4637:3:16",
														"4661:9:16",
														"4727:9:16",
														"4793:14:16",
														"4840:14:16",
														"4887:10:16",
														"4915:10:16",
														"4943:9:16",
														"4982:8:16"
													],
													"names": [
														"token0",
														"token1",
														"fee",
														"tickLower",
														"tickUpper",
														"amount0Desired",
														"amount1Desired",
														"amount0Min",
														"amount1Min",
														"recipient",
														"deadline"
													],
													"nodeType": "FunctionCall",
													"src": "4515:504:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$2148_memory_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4451:568:16"
											},
											{
												"assignments": [
													911
												],
												"declarations": [
													{
														"constant": false,
														"id": 911,
														"mutability": "mutable",
														"name": "minitParamsBytes",
														"nameLocation": "5139:16:16",
														"nodeType": "VariableDeclaration",
														"scope": 1022,
														"src": "5126:29:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 910,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5126:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 917,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "6d696e742828616464726573732c616464726573732c75696e7432342c696e7432342c696e7432342c75696e743235362c75696e743235362c75696e743235362c75696e743235362c616464726573732c75696e743235362929",
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5182:92:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88316456ea4eb762522032f7a1c5897e22bfe070ad8c1ef6d6cb98fb9c7c26f2",
																"typeString": "literal_string \"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\""
															},
															"value": "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))"
														},
														{
															"id": 915,
															"name": "params",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 880,
															"src": "5276:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_MintParams_$2148_memory_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_88316456ea4eb762522032f7a1c5897e22bfe070ad8c1ef6d6cb98fb9c7c26f2",
																"typeString": "literal_string \"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))\""
															},
															{
																"typeIdentifier": "t_struct$_MintParams_$2148_memory_ptr",
																"typeString": "struct INonfungiblePositionManager.MintParams memory"
															}
														],
														"expression": {
															"id": 912,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5158:3:16",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 913,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5162:19:16",
														"memberName": "encodeWithSignature",
														"nodeType": "MemberAccess",
														"src": "5158:23:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (string memory) pure returns (bytes memory)"
														}
													},
													"id": 916,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5158:125:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5126:157:16"
											},
											{
												"assignments": [
													919,
													921
												],
												"declarations": [
													{
														"constant": false,
														"id": 919,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5300:7:16",
														"nodeType": "VariableDeclaration",
														"scope": 1022,
														"src": "5295:12:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 918,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5295:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 921,
														"mutability": "mutable",
														"name": "mintDataBytes",
														"nameLocation": "5322:13:16",
														"nodeType": "VariableDeclaration",
														"scope": 1022,
														"src": "5309:26:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 920,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5309:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 929,
												"initialValue": {
													"arguments": [
														{
															"id": 927,
															"name": "minitParamsBytes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 911,
															"src": "5380:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 924,
																	"name": "nonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 659,
																	"src": "5347:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																],
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5339:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 922,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5339:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 925,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5339:35:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 926,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5375:4:16",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "5339:40:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5339:58:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5294:103:16"
											},
											{
												"expression": {
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 930,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 846,
																"src": "5409:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 931,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 848,
																"src": "5418:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 932,
																"name": "amount0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 850,
																"src": "5429:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 933,
																"name": "amount1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "5438:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 934,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "5408:38:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint128,uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 937,
																"name": "mintDataBytes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 921,
																"src": "5460:13:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															{
																"components": [
																	{
																		"id": 939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5476:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 938,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5476:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	{
																		"id": 941,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5485:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 940,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "5485:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	{
																		"id": 943,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5494:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 942,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5494:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	{
																		"id": 945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5503:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 944,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "5503:7:16",
																			"typeDescriptions": {}
																		}
																	}
																],
																"id": 946,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5475:37:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_type$_t_uint256_$_$_t_type$_t_uint128_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$",
																	"typeString": "tuple(type(uint256),type(uint128),type(uint256),type(uint256))"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																},
																{
																	"typeIdentifier": "t_tuple$_t_type$_t_uint256_$_$_t_type$_t_uint128_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$",
																	"typeString": "tuple(type(uint256),type(uint128),type(uint256),type(uint256))"
																}
															],
															"expression": {
																"id": 935,
																"name": "abi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967295,
																"src": "5449:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_abi",
																	"typeString": "abi"
																}
															},
															"id": 936,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "5453:6:16",
															"memberName": "decode",
															"nodeType": "MemberAccess",
															"src": "5449:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5449:64:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint128,uint256,uint256)"
														}
													},
													"src": "5408:105:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 949,
												"nodeType": "ExpressionStatement",
												"src": "5408:105:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 950,
														"name": "amount0",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 850,
														"src": "5528:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 951,
														"name": "inputToken1Count",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 835,
														"src": "5538:16:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5528:26:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 982,
												"nodeType": "IfStatement",
												"src": "5524:278:16",
												"trueBody": {
													"id": 981,
													"nodeType": "Block",
													"src": "5556:246:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 956,
																		"name": "inputToken1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 833,
																		"src": "5599:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 959,
																				"name": "nonfungiblePositionManager",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 659,
																				"src": "5620:26:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																					"typeString": "contract INonfungiblePositionManager"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																					"typeString": "contract INonfungiblePositionManager"
																				}
																			],
																			"id": 958,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5612:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 957,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5612:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 960,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5612:35:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "30",
																		"id": 961,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5649:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"expression": {
																		"id": 953,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2004,
																		"src": "5571:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5586:11:16",
																	"memberName": "safeApprove",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1977,
																	"src": "5571:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 962,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5571:81:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 963,
															"nodeType": "ExpressionStatement",
															"src": "5571:81:16"
														},
														{
															"assignments": [
																965
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 965,
																	"mutability": "mutable",
																	"name": "refund0",
																	"nameLocation": "5675:7:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 981,
																	"src": "5667:15:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 964,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5667:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 969,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 966,
																	"name": "inputToken1Count",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 835,
																	"src": "5685:16:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 967,
																	"name": "amount0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 850,
																	"src": "5704:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5685:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5667:44:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 973,
																		"name": "inputToken1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 833,
																		"src": "5754:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 976,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "5775:4:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_SwapToken_$1305",
																					"typeString": "contract SwapToken"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_SwapToken_$1305",
																					"typeString": "contract SwapToken"
																				}
																			],
																			"id": 975,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5767:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 974,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5767:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 977,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5767:13:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 978,
																		"name": "refund0",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 965,
																		"src": "5782:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 970,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2004,
																		"src": "5726:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5741:12:16",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1931,
																	"src": "5726:27:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5726:64:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 980,
															"nodeType": "ExpressionStatement",
															"src": "5726:64:16"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 985,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 983,
														"name": "amount1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 852,
														"src": "5816:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 984,
														"name": "inputToken2Count",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 839,
														"src": "5826:16:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5816:26:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1015,
												"nodeType": "IfStatement",
												"src": "5812:279:16",
												"trueBody": {
													"id": 1014,
													"nodeType": "Block",
													"src": "5844:247:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 989,
																		"name": "inputToken2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 837,
																		"src": "5888:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 992,
																				"name": "nonfungiblePositionManager",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 659,
																				"src": "5909:26:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																					"typeString": "contract INonfungiblePositionManager"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																					"typeString": "contract INonfungiblePositionManager"
																				}
																			],
																			"id": 991,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5901:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 990,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5901:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 993,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5901:35:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "30",
																		"id": 994,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5938:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"expression": {
																		"id": 986,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2004,
																		"src": "5860:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 988,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5875:11:16",
																	"memberName": "safeApprove",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1977,
																	"src": "5860:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 995,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5860:81:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 996,
															"nodeType": "ExpressionStatement",
															"src": "5860:81:16"
														},
														{
															"assignments": [
																998
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 998,
																	"mutability": "mutable",
																	"name": "refund1",
																	"nameLocation": "5964:7:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 1014,
																	"src": "5956:15:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 997,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5956:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1002,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 999,
																	"name": "inputToken2Count",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 839,
																	"src": "5974:16:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1000,
																	"name": "amount0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 850,
																	"src": "5993:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5974:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5956:44:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1006,
																		"name": "inputToken2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 837,
																		"src": "6043:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1009,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "6064:4:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_SwapToken_$1305",
																					"typeString": "contract SwapToken"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_SwapToken_$1305",
																					"typeString": "contract SwapToken"
																				}
																			],
																			"id": 1008,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6056:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1007,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6056:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1010,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6056:13:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1011,
																		"name": "refund1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 998,
																		"src": "6071:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1003,
																		"name": "TransferHelper",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2004,
																		"src": "6015:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																			"typeString": "type(library TransferHelper)"
																		}
																	},
																	"id": 1005,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6030:12:16",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1931,
																	"src": "6015:27:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1012,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6015:64:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1013,
															"nodeType": "ExpressionStatement",
															"src": "6015:64:16"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1016,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "6111:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1017,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 848,
															"src": "6120:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 1018,
															"name": "amount0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "6130:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1019,
															"name": "amount1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 852,
															"src": "6138:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1020,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6110:36:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint128_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint128,uint256,uint256)"
													}
												},
												"functionReturnParameters": 853,
												"id": 1021,
												"nodeType": "Return",
												"src": "6103:43:16"
											}
										]
									},
									"documentation": {
										"id": 831,
										"nodeType": "StructuredDocumentation",
										"src": "3744:231:16",
										"text": "@notice 添加流动性\n @dev 添加流动性\n @param inputToken1 代币地址\n @param inputToken1Count 代币数量\n @param inputToken2 代币地址\n @param inputToken2Count 代币数量"
									},
									"functionSelector": "3ca604e6",
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 842,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 841,
												"name": "onlyOwner",
												"nameLocations": [
													"4116:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "4116:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "4116:9:16"
										},
										{
											"id": 844,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 843,
												"name": "onlyTraderPeopleOrOwner",
												"nameLocations": [
													"4126:23:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 627,
												"src": "4126:23:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "4126:23:16"
										}
									],
									"name": "mintNewPosition",
									"nameLocation": "3990:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "inputToken1",
												"nameLocation": "4014:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4006:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 832,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "inputToken1Count",
												"nameLocation": "4036:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4028:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 834,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4028:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "inputToken2",
												"nameLocation": "4061:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4053:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4053:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "inputToken2Count",
												"nameLocation": "4083:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4075:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4075:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:95:16"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4167:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4159:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 845,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4159:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "4184:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4176:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 847,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4176:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "4203:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4195:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 849,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4195:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "4219:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "4211:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4211:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4158:69:16"
									},
									"scope": 1305,
									"src": "3981:2174:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1074,
										"nodeType": "Block",
										"src": "6585:789:16",
										"statements": [
											{
												"assignments": [
													1041
												],
												"declarations": [
													{
														"constant": false,
														"id": 1041,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "6645:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 1074,
														"src": "6596:55:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_CollectParams_$2220_memory_ptr",
															"typeString": "struct INonfungiblePositionManager.CollectParams"
														},
														"typeName": {
															"id": 1040,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1039,
																"name": "INonfungiblePositionManager.CollectParams",
																"nameLocations": [
																	"6596:27:16",
																	"6624:13:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2220,
																"src": "6596:41:16"
															},
															"referencedDeclaration": 2220,
															"src": "6596:41:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_CollectParams_$2220_storage_ptr",
																"typeString": "struct INonfungiblePositionManager.CollectParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1060,
												"initialValue": {
													"arguments": [
														{
															"id": 1044,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "6724:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 1047,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6769:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																],
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6761:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1045,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6761:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6761:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1051,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "6810:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 1050,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "6810:7:16",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		}
																	],
																	"id": 1049,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "6805:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1052,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6805:13:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint128",
																	"typeString": "type(uint128)"
																}
															},
															"id": 1053,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6819:3:16",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "6805:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1056,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "6858:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": {
																			"id": 1055,
																			"name": "uint128",
																			"nodeType": "ElementaryTypeName",
																			"src": "6858:7:16",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		}
																	],
																	"id": 1054,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "6853:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1057,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6853:13:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint128",
																	"typeString": "type(uint128)"
																}
															},
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6867:3:16",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "6853:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														],
														"expression": {
															"id": 1042,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "6654:27:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$2238_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 1043,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6682:13:16",
														"memberName": "CollectParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2220,
														"src": "6654:41:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_CollectParams_$2220_storage_ptr_$",
															"typeString": "type(struct INonfungiblePositionManager.CollectParams storage pointer)"
														}
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"6715:7:16",
														"6750:9:16",
														"6793:10:16",
														"6841:10:16"
													],
													"names": [
														"tokenId",
														"recipient",
														"amount0Max",
														"amount1Max"
													],
													"nodeType": "FunctionCall",
													"src": "6654:232:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$2220_memory_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6596:290:16"
											},
											{
												"expression": {
													"id": 1068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 1061,
																"name": "amount0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1033,
																"src": "7268:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1062,
																"name": "amount1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1035,
																"src": "7277:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1063,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "7267:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1066,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1041,
																"src": "7323:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_CollectParams_$2220_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.CollectParams memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_CollectParams_$2220_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.CollectParams memory"
																}
															],
															"expression": {
																"id": 1064,
																"name": "nonfungiblePositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 659,
																"src": "7288:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																	"typeString": "contract INonfungiblePositionManager"
																}
															},
															"id": 1065,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7315:7:16",
															"memberName": "collect",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2231,
															"src": "7288:34:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_struct$_CollectParams_$2220_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
																"typeString": "function (struct INonfungiblePositionManager.CollectParams memory) payable external returns (uint256,uint256)"
															}
														},
														"id": 1067,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7288:42:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"src": "7267:63:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1069,
												"nodeType": "ExpressionStatement",
												"src": "7267:63:16"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1070,
															"name": "amount0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "7349:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1071,
															"name": "amount1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "7358:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1072,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7348:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1036,
												"id": 1073,
												"nodeType": "Return",
												"src": "7341:25:16"
											}
										]
									},
									"documentation": {
										"id": 1024,
										"nodeType": "StructuredDocumentation",
										"src": "6165:286:16",
										"text": "@notice 收取与提供的流动性相关的费用\n @dev 合约必须持有erc721代币才能收取费用\n @param tokenId The id of the erc721 token\n @return amount0 在token0中收取的费用金额\n @return amount1 在token1中收取的费用金额"
									},
									"functionSelector": "46ce96dd",
									"id": 1075,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1029,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1028,
												"name": "onlyOwner",
												"nameLocations": [
													"6507:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "6507:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "6507:9:16"
										},
										{
											"id": 1031,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1030,
												"name": "onlyTraderPeopleOrOwner",
												"nameLocations": [
													"6517:23:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 627,
												"src": "6517:23:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "6517:23:16"
										}
									],
									"name": "collectAllFees",
									"nameLocation": "6466:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6489:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "6481:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1025,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6481:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6480:17:16"
									},
									"returnParameters": {
										"id": 1036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "6558:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "6550:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6550:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "6575:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "6567:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1034,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6567:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6549:34:16"
									},
									"scope": 1305,
									"src": "6457:917:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1119,
										"nodeType": "Block",
										"src": "7858:444:16",
										"statements": [
											{
												"assignments": [
													1095
												],
												"declarations": [
													{
														"constant": false,
														"id": 1095,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "7928:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 1119,
														"src": "7869:65:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2200_memory_ptr",
															"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
														},
														"typeName": {
															"id": 1094,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1093,
																"name": "INonfungiblePositionManager.DecreaseLiquidityParams",
																"nameLocations": [
																	"7869:27:16",
																	"7897:23:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2200,
																"src": "7869:51:16"
															},
															"referencedDeclaration": 2200,
															"src": "7869:51:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2200_storage_ptr",
																"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1105,
												"initialValue": {
													"arguments": [
														{
															"id": 1098,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1078,
															"src": "8022:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1099,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1080,
															"src": "8055:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"hexValue": "30",
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8091:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8119:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"expression": {
																"id": 1102,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "8145:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8151:9:16",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "8145:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1096,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "7946:27:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$2238_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 1097,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7974:23:16",
														"memberName": "DecreaseLiquidityParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2200,
														"src": "7946:51:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_DecreaseLiquidityParams_$2200_storage_ptr_$",
															"typeString": "type(struct INonfungiblePositionManager.DecreaseLiquidityParams storage pointer)"
														}
													},
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"8013:7:16",
														"8044:9:16",
														"8079:10:16",
														"8107:10:16",
														"8135:8:16"
													],
													"names": [
														"tokenId",
														"liquidity",
														"amount0Min",
														"amount1Min",
														"deadline"
													],
													"nodeType": "FunctionCall",
													"src": "7946:226:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2200_memory_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7869:303:16"
											},
											{
												"expression": {
													"id": 1113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 1106,
																"name": "amount0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1087,
																"src": "8186:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1107,
																"name": "amount1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1089,
																"src": "8195:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1108,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "8185:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1111,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1095,
																"src": "8251:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2200_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2200_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams memory"
																}
															],
															"expression": {
																"id": 1109,
																"name": "nonfungiblePositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 659,
																"src": "8206:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																	"typeString": "contract INonfungiblePositionManager"
																}
															},
															"id": 1110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8233:17:16",
															"memberName": "decreaseLiquidity",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2211,
															"src": "8206:44:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_struct$_DecreaseLiquidityParams_$2200_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
																"typeString": "function (struct INonfungiblePositionManager.DecreaseLiquidityParams memory) payable external returns (uint256,uint256)"
															}
														},
														"id": 1112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8206:52:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"src": "8185:73:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1114,
												"nodeType": "ExpressionStatement",
												"src": "8185:73:16"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1115,
															"name": "amount0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1087,
															"src": "8277:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1116,
															"name": "amount1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1089,
															"src": "8286:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1117,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "8276:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1090,
												"id": 1118,
												"nodeType": "Return",
												"src": "8269:25:16"
											}
										]
									},
									"documentation": {
										"id": 1076,
										"nodeType": "StructuredDocumentation",
										"src": "7382:316:16",
										"text": "@notice 减少流动性: 将当前流动性减少一半的函数。一个例子来显示如何调用'减少流动性'函数定义在外围。\n @param tokenId The id of the erc721 token\n @return amount0 The amount received back in token0\n @return amount1 The amount returned back in token1"
									},
									"functionSelector": "5944e928",
									"id": 1120,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1083,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1082,
												"name": "onlyOwner",
												"nameLocations": [
													"7781:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "7781:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "7781:9:16"
										},
										{
											"id": 1085,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1084,
												"name": "onlyTraderPeopleOrOwner",
												"nameLocations": [
													"7791:23:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 627,
												"src": "7791:23:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "7791:23:16"
										}
									],
									"name": "decreaseLiquidityInHalf",
									"nameLocation": "7713:23:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7745:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "7737:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7737:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "7761:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "7753:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1079,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7736:35:16"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "7832:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "7824:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7824:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "7849:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "7841:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7841:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7823:34:16"
									},
									"scope": 1305,
									"src": "7704:598:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1197,
										"nodeType": "Block",
										"src": "8821:727:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1147,
															"name": "inputToken1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1125,
															"src": "8869:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1150,
																	"name": "nonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 659,
																	"src": "8890:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																],
																"id": 1149,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8882:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1148,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8882:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8882:35:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1152,
															"name": "amountAdd0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1127,
															"src": "8919:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1144,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2004,
															"src": "8842:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1146,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8857:11:16",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1977,
														"src": "8842:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8842:89:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1154,
												"nodeType": "ExpressionStatement",
												"src": "8842:89:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1158,
															"name": "inputToken2",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1129,
															"src": "8969:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1161,
																	"name": "nonfungiblePositionManager",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 659,
																	"src": "8990:26:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																		"typeString": "contract INonfungiblePositionManager"
																	}
																],
																"id": 1160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8982:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1159,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8982:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8982:35:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1163,
															"name": "amountAdd1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "9019:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1155,
															"name": "TransferHelper",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2004,
															"src": "8942:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_TransferHelper_$2004_$",
																"typeString": "type(library TransferHelper)"
															}
														},
														"id": 1157,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8957:11:16",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1977,
														"src": "8942:26:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8942:89:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1165,
												"nodeType": "ExpressionStatement",
												"src": "8942:89:16"
											},
											{
												"assignments": [
													1170
												],
												"declarations": [
													{
														"constant": false,
														"id": 1170,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "9103:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 1197,
														"src": "9044:65:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2176_memory_ptr",
															"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
														},
														"typeName": {
															"id": 1169,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1168,
																"name": "INonfungiblePositionManager.IncreaseLiquidityParams",
																"nameLocations": [
																	"9044:27:16",
																	"9072:23:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2176,
																"src": "9044:51:16"
															},
															"referencedDeclaration": 2176,
															"src": "9044:51:16",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2176_storage_ptr",
																"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1181,
												"initialValue": {
													"arguments": [
														{
															"id": 1173,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1123,
															"src": "9197:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1174,
															"name": "amountAdd0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1127,
															"src": "9235:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1175,
															"name": "amountAdd1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "9276:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 1176,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9313:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1177,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9341:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"expression": {
																"id": 1178,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "9367:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1179,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9373:9:16",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "9367:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1171,
															"name": "INonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "9121:27:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_INonfungiblePositionManager_$2238_$",
																"typeString": "type(contract INonfungiblePositionManager)"
															}
														},
														"id": 1172,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "9149:23:16",
														"memberName": "IncreaseLiquidityParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2176,
														"src": "9121:51:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_IncreaseLiquidityParams_$2176_storage_ptr_$",
															"typeString": "type(struct INonfungiblePositionManager.IncreaseLiquidityParams storage pointer)"
														}
													},
													"id": 1180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"9188:7:16",
														"9219:14:16",
														"9260:14:16",
														"9301:10:16",
														"9329:10:16",
														"9357:8:16"
													],
													"names": [
														"tokenId",
														"amount0Desired",
														"amount1Desired",
														"amount0Min",
														"amount1Min",
														"deadline"
													],
													"nodeType": "FunctionCall",
													"src": "9121:273:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2176_memory_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9044:350:16"
											},
											{
												"expression": {
													"id": 1190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 1182,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1138,
																"src": "9408:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															{
																"id": 1183,
																"name": "amount0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1140,
																"src": "9419:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1184,
																"name": "amount1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1142,
																"src": "9428:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1185,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "9407:29:16",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint128,uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1188,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1170,
																"src": "9484:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2176_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2176_memory_ptr",
																	"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams memory"
																}
															],
															"expression": {
																"id": 1186,
																"name": "nonfungiblePositionManager",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 659,
																"src": "9439:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																	"typeString": "contract INonfungiblePositionManager"
																}
															},
															"id": 1187,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9466:17:16",
															"memberName": "increaseLiquidity",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2189,
															"src": "9439:44:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_struct$_IncreaseLiquidityParams_$2176_memory_ptr_$returns$_t_uint128_$_t_uint256_$_t_uint256_$",
																"typeString": "function (struct INonfungiblePositionManager.IncreaseLiquidityParams memory) payable external returns (uint128,uint256,uint256)"
															}
														},
														"id": 1189,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9439:52:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint128_$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint128,uint256,uint256)"
														}
													},
													"src": "9407:84:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1191,
												"nodeType": "ExpressionStatement",
												"src": "9407:84:16"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1192,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "9512:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint128",
																"typeString": "uint128"
															}
														},
														{
															"id": 1193,
															"name": "amount0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "9523:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1194,
															"name": "amount1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "9532:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1195,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "9511:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint128_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint128,uint256,uint256)"
													}
												},
												"functionReturnParameters": 1143,
												"id": 1196,
												"nodeType": "Return",
												"src": "9504:36:16"
											}
										]
									},
									"documentation": {
										"id": 1121,
										"nodeType": "StructuredDocumentation",
										"src": "8310:264:16",
										"text": "@notice 增加当前范围内的流动性\n @dev Pool must be initialized already to add liquidity\n @param tokenId The id of the erc721 token\n @param amount0 The amount to add of token0\n @param amount1 The amount to add of token1"
									},
									"functionSelector": "7e14be2a",
									"id": 1198,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1134,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1133,
												"name": "onlyOwner",
												"nameLocations": [
													"8725:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "8725:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "8725:9:16"
										},
										{
											"id": 1136,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1135,
												"name": "onlyTraderPeopleOrOwner",
												"nameLocations": [
													"8735:23:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 627,
												"src": "8735:23:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "8735:23:16"
										}
									],
									"name": "increaseLiquidityCurrentRange",
									"nameLocation": "8589:29:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8627:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8619:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8619:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "inputToken1",
												"nameLocation": "8643:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8635:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "amountAdd0",
												"nameLocation": "8664:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8656:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8656:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "inputToken2",
												"nameLocation": "8684:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8676:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8676:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "amountAdd1",
												"nameLocation": "8704:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8696:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8696:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8618:97:16"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "8777:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8769:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 1137,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8769:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "8796:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8788:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8788:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "8813:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "8805:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8805:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8767:54:16"
									},
									"scope": 1305,
									"src": "8580:968:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1214,
										"nodeType": "Block",
										"src": "9785:237:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1211,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1201,
															"src": "10006:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1208,
															"name": "nonfungiblePositionManager",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 659,
															"src": "9974:26:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_INonfungiblePositionManager_$2238",
																"typeString": "contract INonfungiblePositionManager"
															}
														},
														"id": 1210,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10001:4:16",
														"memberName": "burn",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2237,
														"src": "9974:31:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$",
															"typeString": "function (uint256) payable external"
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9974:40:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1213,
												"nodeType": "ExpressionStatement",
												"src": "9974:40:16"
											}
										]
									},
									"documentation": {
										"id": 1199,
										"nodeType": "StructuredDocumentation",
										"src": "9558:147:16",
										"text": "@notice 销毁流动性仓位\n @dev 烧掉一个令牌ID，并将其从NFT合约中删除。代币必须具有0流动性和所有代币"
									},
									"functionSelector": "42966c68",
									"id": 1215,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1204,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1203,
												"name": "onlyOwner",
												"nameLocations": [
													"9751:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "9751:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "9751:9:16"
										},
										{
											"id": 1206,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1205,
												"name": "onlyTraderPeopleOrOwner",
												"nameLocations": [
													"9761:23:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 627,
												"src": "9761:23:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "9761:23:16"
										}
									],
									"name": "burn",
									"nameLocation": "9720:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9733:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "9725:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9725:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9724:17:16"
									},
									"returnParameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9785:0:16"
									},
									"scope": 1305,
									"src": "9711:311:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1232,
										"nodeType": "Block",
										"src": "10175:73:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1227,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "10233:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SwapToken_$1305",
																				"typeString": "contract SwapToken"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SwapToken_$1305",
																				"typeString": "contract SwapToken"
																			}
																		],
																		"id": 1226,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "10225:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1225,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "10225:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10225:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1223,
																	"name": "wethToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 671,
																	"src": "10205:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IWETH_$498",
																		"typeString": "contract IWETH"
																	}
																},
																"id": 1224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10215:9:16",
																"memberName": "balanceOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 391,
																"src": "10205:19:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view external returns (uint256)"
																}
															},
															"id": 1229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10205:34:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1220,
															"name": "wethToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 671,
															"src": "10186:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH_$498",
																"typeString": "contract IWETH"
															}
														},
														"id": 1222,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10196:8:16",
														"memberName": "withdraw",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 497,
														"src": "10186:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256) external"
														}
													},
													"id": 1230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10186:54:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1231,
												"nodeType": "ExpressionStatement",
												"src": "10186:54:16"
											}
										]
									},
									"functionSelector": "915f68a6",
									"id": 1233,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1218,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1217,
												"name": "onlyOwner",
												"nameLocations": [
													"10164:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "10164:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "10164:9:16"
										}
									],
									"name": "unwrapEther",
									"nameLocation": "10143:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10154:2:16"
									},
									"returnParameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10175:0:16"
									},
									"scope": 1305,
									"src": "10134:114:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1275,
										"nodeType": "Block",
										"src": "10309:240:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1243,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "10336:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SwapToken_$1305",
																				"typeString": "contract SwapToken"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SwapToken_$1305",
																				"typeString": "contract SwapToken"
																			}
																		],
																		"id": 1242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "10328:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1241,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "10328:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10328:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10342:7:16",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "10328:21:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1246,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10352:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10328:25:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f206d6f6e6579",
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10355:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e1229687c2b849b25bc6ac3b605aacb449e3f44f91d21973231294fe985f2c1e",
																"typeString": "literal_string \"no money\""
															},
															"value": "no money"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e1229687c2b849b25bc6ac3b605aacb449e3f44f91d21973231294fe985f2c1e",
																"typeString": "literal_string \"no money\""
															}
														],
														"id": 1240,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10320:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10320:46:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1250,
												"nodeType": "ExpressionStatement",
												"src": "10320:46:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1251,
														"name": "count",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1235,
														"src": "10381:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1252,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10390:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10381:10:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1273,
													"nodeType": "Block",
													"src": "10477:62:16",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"id": 1266,
																			"name": "wethToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 671,
																			"src": "10492:9:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IWETH_$498",
																				"typeString": "contract IWETH"
																			}
																		},
																		"id": 1268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10502:7:16",
																		"memberName": "deposit",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 492,
																		"src": "10492:17:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_payable$__$returns$__$",
																			"typeString": "function () payable external"
																		}
																	},
																	"id": 1270,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 1269,
																			"name": "count",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1235,
																			"src": "10518:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "10492:33:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_payable$__$returns$__$value",
																		"typeString": "function () payable external"
																	}
																},
																"id": 1271,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10492:35:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1272,
															"nodeType": "ExpressionStatement",
															"src": "10492:35:16"
														}
													]
												},
												"id": 1274,
												"nodeType": "IfStatement",
												"src": "10377:162:16",
												"trueBody": {
													"id": 1265,
													"nodeType": "Block",
													"src": "10393:78:16",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"id": 1254,
																			"name": "wethToken",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 671,
																			"src": "10408:9:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IWETH_$498",
																				"typeString": "contract IWETH"
																			}
																		},
																		"id": 1256,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10418:7:16",
																		"memberName": "deposit",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 492,
																		"src": "10408:17:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_payable$__$returns$__$",
																			"typeString": "function () payable external"
																		}
																	},
																	"id": 1262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1259,
																						"name": "this",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967268,
																						"src": "10442:4:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_SwapToken_$1305",
																							"typeString": "contract SwapToken"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_SwapToken_$1305",
																							"typeString": "contract SwapToken"
																						}
																					],
																					"id": 1258,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "10434:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1257,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "10434:7:16",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1260,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10434:13:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 1261,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "10448:7:16",
																			"memberName": "balance",
																			"nodeType": "MemberAccess",
																			"src": "10434:21:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "10408:49:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_payable$__$returns$__$value",
																		"typeString": "function () payable external"
																	}
																},
																"id": 1263,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10408:51:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1264,
															"nodeType": "ExpressionStatement",
															"src": "10408:51:16"
														}
													]
												}
											}
										]
									},
									"functionSelector": "ef590ca5",
									"id": 1276,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1238,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1237,
												"name": "onlyOwner",
												"nameLocations": [
													"10299:9:16"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 563,
												"src": "10299:9:16"
											},
											"nodeType": "ModifierInvocation",
											"src": "10299:9:16"
										}
									],
									"name": "wrapEther",
									"nameLocation": "10265:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "count",
												"nameLocation": "10283:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "10275:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10275:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10274:15:16"
									},
									"returnParameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10309:0:16"
									},
									"scope": 1305,
									"src": "10256:293:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1289,
										"nodeType": "Block",
										"src": "10608:60:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1285,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "10654:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																],
																"id": 1284,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10646:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1283,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10646:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 1286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10646:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1281,
															"name": "uniToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "10627:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IIERC20_$430",
																"typeString": "contract IIERC20"
															}
														},
														"id": 1282,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10636:9:16",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 391,
														"src": "10627:18:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10627:33:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1280,
												"id": 1288,
												"nodeType": "Return",
												"src": "10620:40:16"
											}
										]
									},
									"functionSelector": "44533cb5",
									"id": 1290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "uniBalance",
									"nameLocation": "10566:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10576:2:16"
									},
									"returnParameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "10600:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10600:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10599:9:16"
									},
									"scope": 1305,
									"src": "10557:111:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1303,
										"nodeType": "Block",
										"src": "10728:61:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1299,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "10775:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SwapToken_$1305",
																		"typeString": "contract SwapToken"
																	}
																],
																"id": 1298,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10767:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1297,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10767:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 1300,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10767:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1295,
															"name": "wethToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 671,
															"src": "10747:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IWETH_$498",
																"typeString": "contract IWETH"
															}
														},
														"id": 1296,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10757:9:16",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 391,
														"src": "10747:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10747:34:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1294,
												"id": 1302,
												"nodeType": "Return",
												"src": "10740:41:16"
											}
										]
									},
									"functionSelector": "4e6630b0",
									"id": 1304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ethBalance",
									"nameLocation": "10686:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10696:2:16"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "10720:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10719:9:16"
									},
									"scope": 1305,
									"src": "10677:112:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1306,
							"src": "1111:9683:16",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "37:10757:16"
				},
				"id": 16
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol",
					"exportedSymbols": {
						"IApproveAndCall": [
							1404
						]
					},
					"id": 1405,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1307,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:17"
						},
						{
							"id": 1308,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IApproveAndCall",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1404,
							"linearizedBaseContracts": [
								1404
							],
							"name": "IApproveAndCall",
							"nameLocation": "101:15:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IApproveAndCall.ApprovalType",
									"id": 1314,
									"members": [
										{
											"id": 1309,
											"name": "NOT_REQUIRED",
											"nameLocation": "142:12:17",
											"nodeType": "EnumValue",
											"src": "142:12:17"
										},
										{
											"id": 1310,
											"name": "MAX",
											"nameLocation": "156:3:17",
											"nodeType": "EnumValue",
											"src": "156:3:17"
										},
										{
											"id": 1311,
											"name": "MAX_MINUS_ONE",
											"nameLocation": "161:13:17",
											"nodeType": "EnumValue",
											"src": "161:13:17"
										},
										{
											"id": 1312,
											"name": "ZERO_THEN_MAX",
											"nameLocation": "176:13:17",
											"nodeType": "EnumValue",
											"src": "176:13:17"
										},
										{
											"id": 1313,
											"name": "ZERO_THEN_MAX_MINUS_ONE",
											"nameLocation": "191:23:17",
											"nodeType": "EnumValue",
											"src": "191:23:17"
										}
									],
									"name": "ApprovalType",
									"nameLocation": "128:12:17",
									"nodeType": "EnumDefinition",
									"src": "123:92:17"
								},
								{
									"documentation": {
										"id": 1315,
										"nodeType": "StructuredDocumentation",
										"src": "221:245:17",
										"text": "@dev Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\n @param token The token to approve\n @param amount The amount to approve\n @return The required approval type"
									},
									"functionSelector": "dee00f35",
									"id": 1325,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApprovalType",
									"nameLocation": "480:15:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "504:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "496:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "496:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "519:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "511:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "495:31:17"
									},
									"returnParameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "545:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_ApprovalType_$1314",
													"typeString": "enum IApproveAndCall.ApprovalType"
												},
												"typeName": {
													"id": 1322,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1321,
														"name": "ApprovalType",
														"nameLocations": [
															"545:12:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1314,
														"src": "545:12:17"
													},
													"referencedDeclaration": 1314,
													"src": "545:12:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_ApprovalType_$1314",
														"typeString": "enum IApproveAndCall.ApprovalType"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "544:14:17"
									},
									"scope": 1404,
									"src": "471:88:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1326,
										"nodeType": "StructuredDocumentation",
										"src": "565:102:17",
										"text": "@notice Approves a token for the maximum possible amount\n @param token The token to approve"
									},
									"functionSelector": "571ac8b0",
									"id": 1331,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveMax",
									"nameLocation": "681:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "700:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 1331,
												"src": "692:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "692:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "691:15:17"
									},
									"returnParameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "723:0:17"
									},
									"scope": 1404,
									"src": "672:52:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1332,
										"nodeType": "StructuredDocumentation",
										"src": "730:112:17",
										"text": "@notice Approves a token for the maximum possible amount minus one\n @param token The token to approve"
									},
									"functionSelector": "cab372ce",
									"id": 1337,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveMaxMinusOne",
									"nameLocation": "856:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "883:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 1337,
												"src": "875:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "875:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "874:15:17"
									},
									"returnParameters": {
										"id": 1336,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:0:17"
									},
									"scope": 1404,
									"src": "847:60:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1338,
										"nodeType": "StructuredDocumentation",
										"src": "913:113:17",
										"text": "@notice Approves a token for zero, then the maximum possible amount\n @param token The token to approve"
									},
									"functionSelector": "639d71a9",
									"id": 1343,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveZeroThenMax",
									"nameLocation": "1040:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1067:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 1343,
												"src": "1059:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1059:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1058:15:17"
									},
									"returnParameters": {
										"id": 1342,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1090:0:17"
									},
									"scope": 1404,
									"src": "1031:60:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1344,
										"nodeType": "StructuredDocumentation",
										"src": "1097:123:17",
										"text": "@notice Approves a token for zero, then the maximum possible amount minus one\n @param token The token to approve"
									},
									"functionSelector": "ab3fdd50",
									"id": 1349,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveZeroThenMaxMinusOne",
									"nameLocation": "1234:26:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1269:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 1349,
												"src": "1261:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1261:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:15:17"
									},
									"returnParameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1292:0:17"
									},
									"scope": 1404,
									"src": "1225:68:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1350,
										"nodeType": "StructuredDocumentation",
										"src": "1299:177:17",
										"text": "@notice Calls the position manager with arbitrary calldata\n @param data Calldata to pass along to the position manager\n @return result The result from the call"
									},
									"functionSelector": "b3a2af13",
									"id": 1357,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callPositionManager",
									"nameLocation": "1490:19:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1523:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 1357,
												"src": "1510:17:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1351,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1510:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1509:19:17"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1568:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1357,
												"src": "1555:19:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1354,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1555:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1554:21:17"
									},
									"scope": 1404,
									"src": "1481:95:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IApproveAndCall.MintParams",
									"id": 1374,
									"members": [
										{
											"constant": false,
											"id": 1359,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "1618:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1610:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1358,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1610:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1361,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "1642:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1634:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1360,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1634:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1363,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1665:3:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1658:10:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1362,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1658:6:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1365,
											"mutability": "mutable",
											"name": "tickLower",
											"nameLocation": "1684:9:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1678:15:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1364,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "1678:5:17",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1367,
											"mutability": "mutable",
											"name": "tickUpper",
											"nameLocation": "1709:9:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1703:15:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 1366,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "1703:5:17",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1369,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "1736:10:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1728:18:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1368,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1728:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1371,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "1764:10:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1756:18:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1370,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1756:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1373,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1792:9:17",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "1784:17:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1372,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1784:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nameLocation": "1589:10:17",
									"nodeType": "StructDefinition",
									"scope": 1404,
									"src": "1582:226:17",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1375,
										"nodeType": "StructuredDocumentation",
										"src": "1814:171:17",
										"text": "@notice Calls the position manager's mint function\n @param params Calldata to pass along to the position manager\n @return result The result from the call"
									},
									"functionSelector": "11ed56c9",
									"id": 1383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "1999:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2024:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "2004:26:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$1374_calldata_ptr",
													"typeString": "struct IApproveAndCall.MintParams"
												},
												"typeName": {
													"id": 1377,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1376,
														"name": "MintParams",
														"nameLocations": [
															"2004:10:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1374,
														"src": "2004:10:17"
													},
													"referencedDeclaration": 1374,
													"src": "2004:10:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$1374_storage_ptr",
														"typeString": "struct IApproveAndCall.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2003:28:17"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "2071:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1383,
												"src": "2058:19:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1380,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2058:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2057:21:17"
									},
									"scope": 1404,
									"src": "1990:89:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IApproveAndCall.IncreaseLiquidityParams",
									"id": 1394,
									"members": [
										{
											"constant": false,
											"id": 1385,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "2134:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1394,
											"src": "2126:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1384,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2126:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1387,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "2158:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 1394,
											"src": "2150:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1386,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2150:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1389,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "2182:7:17",
											"nodeType": "VariableDeclaration",
											"scope": 1394,
											"src": "2174:15:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1388,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2174:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1391,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "2207:10:17",
											"nodeType": "VariableDeclaration",
											"scope": 1394,
											"src": "2199:18:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1390,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2199:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1393,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "2235:10:17",
											"nodeType": "VariableDeclaration",
											"scope": 1394,
											"src": "2227:18:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1392,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2227:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nameLocation": "2092:23:17",
									"nodeType": "StructDefinition",
									"scope": 1404,
									"src": "2085:167:17",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1395,
										"nodeType": "StructuredDocumentation",
										"src": "2258:184:17",
										"text": "@notice Calls the position manager's increaseLiquidity function\n @param params Calldata to pass along to the position manager\n @return result The result from the call"
									},
									"functionSelector": "f100b205",
									"id": 1403,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nameLocation": "2456:17:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2507:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "2474:39:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1394_calldata_ptr",
													"typeString": "struct IApproveAndCall.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 1397,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1396,
														"name": "IncreaseLiquidityParams",
														"nameLocations": [
															"2474:23:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1394,
														"src": "2474:23:17"
													},
													"referencedDeclaration": 1394,
													"src": "2474:23:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$1394_storage_ptr",
														"typeString": "struct IApproveAndCall.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2473:41:17"
									},
									"returnParameters": {
										"id": 1402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "2554:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "2541:19:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2541:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2540:21:17"
									},
									"scope": 1404,
									"src": "2447:115:17",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1405,
							"src": "91:2473:17",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:2520:17"
				},
				"id": 17
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol",
					"exportedSymbols": {
						"IMulticall": [
							293
						],
						"IMulticallExtended": [
							1436
						]
					},
					"id": 1437,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1406,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:18"
						},
						{
							"id": 1407,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:18"
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol",
							"id": 1408,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1437,
							"sourceUnit": 294,
							"src": "91:67:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1410,
										"name": "IMulticall",
										"nameLocations": [
											"334:10:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 293,
										"src": "334:10:18"
									},
									"id": 1411,
									"nodeType": "InheritanceSpecifier",
									"src": "334:10:18"
								}
							],
							"canonicalName": "IMulticallExtended",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1409,
								"nodeType": "StructuredDocumentation",
								"src": "160:142:18",
								"text": "@title MulticallExtended interface\n @notice Enables calling multiple methods in a single call to the contract with optional validation"
							},
							"fullyImplemented": false,
							"id": 1436,
							"linearizedBaseContracts": [
								1436,
								293
							],
							"name": "IMulticallExtended",
							"nameLocation": "312:18:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1412,
										"nodeType": "StructuredDocumentation",
										"src": "351:464:18",
										"text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param deadline The time by which this function must be called before failing\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
									},
									"functionSelector": "5ae401dc",
									"id": 1423,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nameLocation": "829:9:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "847:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 1423,
												"src": "839:16:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1413,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "839:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1417,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "874:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 1423,
												"src": "857:21:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1415,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "857:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1416,
													"nodeType": "ArrayTypeName",
													"src": "857:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "838:41:18"
									},
									"returnParameters": {
										"id": 1422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1421,
												"mutability": "mutable",
												"name": "results",
												"nameLocation": "921:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1423,
												"src": "906:22:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1419,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "906:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1420,
													"nodeType": "ArrayTypeName",
													"src": "906:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "905:24:18"
									},
									"scope": 1436,
									"src": "820:110:18",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1424,
										"nodeType": "StructuredDocumentation",
										"src": "936:441:18",
										"text": "@notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n @dev The `msg.value` should not be trusted for any method callable from multicall.\n @param previousBlockhash The expected parent blockHash\n @param data The encoded function data for each of the calls to make to this contract\n @return results The results from each of the calls passed in via data"
									},
									"functionSelector": "1f0464d1",
									"id": 1435,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multicall",
									"nameLocation": "1391:9:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "previousBlockhash",
												"nameLocation": "1409:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "1401:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1425,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1401:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1445:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "1428:21:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1427,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "1428:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1428,
													"nodeType": "ArrayTypeName",
													"src": "1428:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1400:50:18"
									},
									"returnParameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "results",
												"nameLocation": "1516:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 1435,
												"src": "1501:22:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 1431,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "1501:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 1432,
													"nodeType": "ArrayTypeName",
													"src": "1501:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1500:24:18"
									},
									"scope": 1436,
									"src": "1382:143:18",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1437,
							"src": "302:1225:18",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1483:18"
				},
				"id": 18
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol",
					"exportedSymbols": {
						"IApproveAndCall": [
							1404
						],
						"IMulticall": [
							293
						],
						"IMulticallExtended": [
							1436
						],
						"ISelfPermit": [
							361
						],
						"ISwapRouter02": [
							1456
						],
						"IUniswapV3SwapCallback": [
							278
						],
						"IV2SwapRouter": [
							1491
						],
						"IV3SwapRouter": [
							1583
						]
					},
					"id": 1457,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1438,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:19"
						},
						{
							"id": 1439,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:19"
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/ISelfPermit.sol",
							"id": 1440,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1457,
							"sourceUnit": 362,
							"src": "91:68:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol",
							"file": "./IV2SwapRouter.sol",
							"id": 1441,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1457,
							"sourceUnit": 1492,
							"src": "161:29:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol",
							"file": "./IV3SwapRouter.sol",
							"id": 1442,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1457,
							"sourceUnit": 1584,
							"src": "191:29:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IApproveAndCall.sol",
							"file": "./IApproveAndCall.sol",
							"id": 1443,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1457,
							"sourceUnit": 1405,
							"src": "221:31:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IMulticallExtended.sol",
							"file": "./IMulticallExtended.sol",
							"id": 1444,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1457,
							"sourceUnit": 1437,
							"src": "253:34:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1446,
										"name": "IV2SwapRouter",
										"nameLocations": [
											"363:13:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1491,
										"src": "363:13:19"
									},
									"id": 1447,
									"nodeType": "InheritanceSpecifier",
									"src": "363:13:19"
								},
								{
									"baseName": {
										"id": 1448,
										"name": "IV3SwapRouter",
										"nameLocations": [
											"378:13:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1583,
										"src": "378:13:19"
									},
									"id": 1449,
									"nodeType": "InheritanceSpecifier",
									"src": "378:13:19"
								},
								{
									"baseName": {
										"id": 1450,
										"name": "IApproveAndCall",
										"nameLocations": [
											"393:15:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1404,
										"src": "393:15:19"
									},
									"id": 1451,
									"nodeType": "InheritanceSpecifier",
									"src": "393:15:19"
								},
								{
									"baseName": {
										"id": 1452,
										"name": "IMulticallExtended",
										"nameLocations": [
											"410:18:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1436,
										"src": "410:18:19"
									},
									"id": 1453,
									"nodeType": "InheritanceSpecifier",
									"src": "410:18:19"
								},
								{
									"baseName": {
										"id": 1454,
										"name": "ISelfPermit",
										"nameLocations": [
											"430:11:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 361,
										"src": "430:11:19"
									},
									"id": 1455,
									"nodeType": "InheritanceSpecifier",
									"src": "430:11:19"
								}
							],
							"canonicalName": "ISwapRouter02",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1445,
								"nodeType": "StructuredDocumentation",
								"src": "289:47:19",
								"text": "@title Router token swapping functionality"
							},
							"fullyImplemented": false,
							"id": 1456,
							"linearizedBaseContracts": [
								1456,
								361,
								1436,
								293,
								1404,
								1583,
								278,
								1491
							],
							"name": "ISwapRouter02",
							"nameLocation": "346:13:19",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1457,
							"src": "336:110:19",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:402:19"
				},
				"id": 19
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV2SwapRouter.sol",
					"exportedSymbols": {
						"IV2SwapRouter": [
							1491
						]
					},
					"id": 1492,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1458,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:20"
						},
						{
							"id": 1459,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IV2SwapRouter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1460,
								"nodeType": "StructuredDocumentation",
								"src": "91:104:20",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V2"
							},
							"fullyImplemented": false,
							"id": 1491,
							"linearizedBaseContracts": [
								1491
							],
							"name": "IV2SwapRouter",
							"nameLocation": "205:13:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1461,
										"nodeType": "StructuredDocumentation",
										"src": "225:564:20",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n and swap the entire amount, enabling contracts to send tokens before calling this function.\n @param amountIn The amount of token to swap\n @param amountOutMin The minimum amount of output that must be received\n @param path The ordered list of tokens to swap through\n @param to The recipient address\n @return amountOut The amount of the received token"
									},
									"functionSelector": "472b43f3",
									"id": 1475,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapExactTokensForTokens",
									"nameLocation": "803:24:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "845:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "837:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "837:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "amountOutMin",
												"nameLocation": "871:12:20",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "863:20:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "863:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "912:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "893:23:20",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1466,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "893:7:20",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1467,
													"nodeType": "ArrayTypeName",
													"src": "893:9:20",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "934:2:20",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "926:10:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1469,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "827:115:20"
									},
									"returnParameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "977:9:20",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "969:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:19:20"
									},
									"scope": 1491,
									"src": "794:194:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1476,
										"nodeType": "StructuredDocumentation",
										"src": "994:381:20",
										"text": "@notice Swaps as little as possible of one token for an exact amount of another token\n @param amountOut The amount of token to swap for\n @param amountInMax The maximum amount of input that the caller will pay\n @param path The ordered list of tokens to swap through\n @param to The recipient address\n @return amountIn The amount of token to pay"
									},
									"functionSelector": "42712a67",
									"id": 1490,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapTokensForExactTokens",
									"nameLocation": "1389:24:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1478,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1431:9:20",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "1423:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "amountInMax",
												"nameLocation": "1458:11:20",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "1450:19:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1450:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "1498:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "1479:23:20",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1481,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1479:7:20",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1482,
													"nodeType": "ArrayTypeName",
													"src": "1479:9:20",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1520:2:20",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "1512:10:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1512:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1413:115:20"
									},
									"returnParameters": {
										"id": 1489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1488,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "1563:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 1490,
												"src": "1555:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1555:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1554:18:20"
									},
									"scope": 1491,
									"src": "1380:193:20",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1492,
							"src": "195:1380:20",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1531:20"
				},
				"id": 20
			},
			"https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/IV3SwapRouter.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							278
						],
						"IV3SwapRouter": [
							1583
						]
					},
					"id": 1584,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1493,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:21"
						},
						{
							"id": 1494,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:21"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 1495,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1584,
							"sourceUnit": 279,
							"src": "91:83:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1497,
										"name": "IUniswapV3SwapCallback",
										"nameLocations": [
											"307:22:21"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 278,
										"src": "307:22:21"
									},
									"id": 1498,
									"nodeType": "InheritanceSpecifier",
									"src": "307:22:21"
								}
							],
							"canonicalName": "IV3SwapRouter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1496,
								"nodeType": "StructuredDocumentation",
								"src": "176:104:21",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 1583,
							"linearizedBaseContracts": [
								1583,
								278
							],
							"name": "IV3SwapRouter",
							"nameLocation": "290:13:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IV3SwapRouter.ExactInputSingleParams",
									"id": 1513,
									"members": [
										{
											"constant": false,
											"id": 1500,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "384:7:21",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "376:15:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1499,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "376:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1502,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "409:8:21",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "401:16:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1501,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "401:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1504,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "434:3:21",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "427:10:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1503,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "427:6:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1506,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "455:9:21",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "447:17:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1505,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "447:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1508,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "482:8:21",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "474:16:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1507,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "474:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1510,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "508:16:21",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "500:24:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1509,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "500:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1512,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "542:17:21",
											"nodeType": "VariableDeclaration",
											"scope": 1513,
											"src": "534:25:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1511,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "534:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nameLocation": "343:22:21",
									"nodeType": "StructDefinition",
									"scope": 1583,
									"src": "336:230:21",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1514,
										"nodeType": "StructuredDocumentation",
										"src": "572:439:21",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n and swap the entire amount, enabling contracts to send tokens before calling this function.\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "04e45aaf",
									"id": 1522,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nameLocation": "1025:16:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "1074:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "1042:38:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$1513_calldata_ptr",
													"typeString": "struct IV3SwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 1516,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1515,
														"name": "ExactInputSingleParams",
														"nameLocations": [
															"1042:22:21"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1513,
														"src": "1042:22:21"
													},
													"referencedDeclaration": 1513,
													"src": "1042:22:21",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$1513_storage_ptr",
														"typeString": "struct IV3SwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:40:21"
									},
									"returnParameters": {
										"id": 1521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1116:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "1108:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1108:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1107:19:21"
									},
									"scope": 1583,
									"src": "1016:111:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IV3SwapRouter.ExactInputParams",
									"id": 1531,
									"members": [
										{
											"constant": false,
											"id": 1524,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "1173:4:21",
											"nodeType": "VariableDeclaration",
											"scope": 1531,
											"src": "1167:10:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1523,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1167:5:21",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1526,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1195:9:21",
											"nodeType": "VariableDeclaration",
											"scope": 1531,
											"src": "1187:17:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1525,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1187:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1528,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "1222:8:21",
											"nodeType": "VariableDeclaration",
											"scope": 1531,
											"src": "1214:16:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1527,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1214:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1530,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "1248:16:21",
											"nodeType": "VariableDeclaration",
											"scope": 1531,
											"src": "1240:24:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1529,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1240:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nameLocation": "1140:16:21",
									"nodeType": "StructDefinition",
									"scope": 1583,
									"src": "1133:138:21",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1532,
										"nodeType": "StructuredDocumentation",
										"src": "1277:462:21",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\n and swap the entire amount, enabling contracts to send tokens before calling this function.\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "b858183f",
									"id": 1540,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nameLocation": "1753:10:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1535,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "1790:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "1764:32:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$1531_calldata_ptr",
													"typeString": "struct IV3SwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 1534,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1533,
														"name": "ExactInputParams",
														"nameLocations": [
															"1764:16:21"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1531,
														"src": "1764:16:21"
													},
													"referencedDeclaration": 1531,
													"src": "1764:16:21",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$1531_storage_ptr",
														"typeString": "struct IV3SwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1763:34:21"
									},
									"returnParameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1832:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 1540,
												"src": "1824:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1537,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1824:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1823:19:21"
									},
									"scope": 1583,
									"src": "1744:99:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IV3SwapRouter.ExactOutputSingleParams",
									"id": 1555,
									"members": [
										{
											"constant": false,
											"id": 1542,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "1898:7:21",
											"nodeType": "VariableDeclaration",
											"scope": 1555,
											"src": "1890:15:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1541,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1890:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1544,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "1923:8:21",
											"nodeType": "VariableDeclaration",
											"scope": 1555,
											"src": "1915:16:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1543,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1915:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1546,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1948:3:21",
											"nodeType": "VariableDeclaration",
											"scope": 1555,
											"src": "1941:10:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1545,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1941:6:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1548,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1969:9:21",
											"nodeType": "VariableDeclaration",
											"scope": 1555,
											"src": "1961:17:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1547,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1961:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1550,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "1996:9:21",
											"nodeType": "VariableDeclaration",
											"scope": 1555,
											"src": "1988:17:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1549,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1988:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1552,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "2023:15:21",
											"nodeType": "VariableDeclaration",
											"scope": 1555,
											"src": "2015:23:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1551,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2015:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1554,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "2056:17:21",
											"nodeType": "VariableDeclaration",
											"scope": 1555,
											"src": "2048:25:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1553,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "2048:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nameLocation": "1856:23:21",
									"nodeType": "StructDefinition",
									"scope": 1583,
									"src": "1849:231:21",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1556,
										"nodeType": "StructuredDocumentation",
										"src": "2086:304:21",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n that may remain in the router after the swap.\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "5023b4df",
									"id": 1564,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nameLocation": "2404:17:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2455:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "2422:39:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1555_calldata_ptr",
													"typeString": "struct IV3SwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 1558,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1557,
														"name": "ExactOutputSingleParams",
														"nameLocations": [
															"2422:23:21"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1555,
														"src": "2422:23:21"
													},
													"referencedDeclaration": 1555,
													"src": "2422:23:21",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1555_storage_ptr",
														"typeString": "struct IV3SwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2421:41:21"
									},
									"returnParameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2497:8:21",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "2489:16:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2489:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2488:18:21"
									},
									"scope": 1583,
									"src": "2395:112:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IV3SwapRouter.ExactOutputParams",
									"id": 1573,
									"members": [
										{
											"constant": false,
											"id": 1566,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "2554:4:21",
											"nodeType": "VariableDeclaration",
											"scope": 1573,
											"src": "2548:10:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1565,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2548:5:21",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1568,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "2576:9:21",
											"nodeType": "VariableDeclaration",
											"scope": 1573,
											"src": "2568:17:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1567,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2568:7:21",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1570,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "2603:9:21",
											"nodeType": "VariableDeclaration",
											"scope": 1573,
											"src": "2595:17:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1569,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2595:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1572,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "2630:15:21",
											"nodeType": "VariableDeclaration",
											"scope": 1573,
											"src": "2622:23:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1571,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2622:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nameLocation": "2520:17:21",
									"nodeType": "StructDefinition",
									"scope": 1583,
									"src": "2513:139:21",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1574,
										"nodeType": "StructuredDocumentation",
										"src": "2658:338:21",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n that may remain in the router after the swap.\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "09b81346",
									"id": 1582,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nameLocation": "3010:11:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "3049:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "3022:33:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$1573_calldata_ptr",
													"typeString": "struct IV3SwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 1576,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1575,
														"name": "ExactOutputParams",
														"nameLocations": [
															"3022:17:21"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1573,
														"src": "3022:17:21"
													},
													"referencedDeclaration": 1573,
													"src": "3022:17:21",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$1573_storage_ptr",
														"typeString": "struct IV3SwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3021:35:21"
									},
									"returnParameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "3091:8:21",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "3083:16:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3083:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3082:18:21"
									},
									"scope": 1583,
									"src": "3001:100:21",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1584,
							"src": "280:2823:21",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:3059:21"
				},
				"id": 21
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoter.sol",
					"exportedSymbols": {
						"IQuoter": [
							1640
						]
					},
					"id": 1641,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1585,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:22"
						},
						{
							"id": 1586,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:22"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IQuoter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1587,
								"nodeType": "StructuredDocumentation",
								"src": "91:320:22",
								"text": "@title Quoter Interface\n @notice Supports quoting the calculated amounts from exact input or exact output swaps\n @dev These functions are not marked view because they rely on calling non-view functions and reverting\n to compute the result. They are also not gas efficient and should not be called on-chain."
							},
							"fullyImplemented": false,
							"id": 1640,
							"linearizedBaseContracts": [
								1640
							],
							"name": "IQuoter",
							"nameLocation": "421:7:22",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1588,
										"nodeType": "StructuredDocumentation",
										"src": "435:319:22",
										"text": "@notice Returns the amount out received for a given exact input swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountIn The amount of the first token to swap\n @return amountOut The amount of the last token that would be received"
									},
									"functionSelector": "cdca1753",
									"id": 1597,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInput",
									"nameLocation": "768:15:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1590,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "797:4:22",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "784:17:22",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1589,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "784:5:22",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1592,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "811:8:22",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "803:16:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "783:37:22"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "847:9:22",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "839:17:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "839:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "838:19:22"
									},
									"scope": 1640,
									"src": "759:99:22",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1598,
										"nodeType": "StructuredDocumentation",
										"src": "864:491:22",
										"text": "@notice Returns the amount out received for a given exact input but for a swap of a single pool\n @param tokenIn The token being swapped in\n @param tokenOut The token being swapped out\n @param fee The fee of the token pool to consider for the pair\n @param amountIn The desired input amount\n @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountOut The amount of `tokenOut` that would be received"
									},
									"functionSelector": "f7729d43",
									"id": 1613,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInputSingle",
									"nameLocation": "1369:21:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "tokenIn",
												"nameLocation": "1408:7:22",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "1400:15:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1400:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "tokenOut",
												"nameLocation": "1433:8:22",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "1425:16:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1458:3:22",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "1451:10:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1603,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1451:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1606,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "1479:8:22",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "1471:16:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1605,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1608,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nameLocation": "1505:17:22",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "1497:25:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1607,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1497:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1390:138:22"
									},
									"returnParameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1555:9:22",
												"nodeType": "VariableDeclaration",
												"scope": 1613,
												"src": "1547:17:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1546:19:22"
									},
									"scope": 1640,
									"src": "1360:206:22",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1614,
										"nodeType": "StructuredDocumentation",
										"src": "1572:355:22",
										"text": "@notice Returns the amount in required for a given exact output swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n @param amountOut The amount of the last token to receive\n @return amountIn The amount of first token required to be paid"
									},
									"functionSelector": "2f80bb1d",
									"id": 1623,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutput",
									"nameLocation": "1941:16:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1616,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "1971:4:22",
												"nodeType": "VariableDeclaration",
												"scope": 1623,
												"src": "1958:17:22",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1615,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1958:5:22",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1618,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1985:9:22",
												"nodeType": "VariableDeclaration",
												"scope": 1623,
												"src": "1977:17:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1617,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1977:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1957:38:22"
									},
									"returnParameters": {
										"id": 1622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1621,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2022:8:22",
												"nodeType": "VariableDeclaration",
												"scope": 1623,
												"src": "2014:16:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:18:22"
									},
									"scope": 1640,
									"src": "1932:100:22",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1624,
										"nodeType": "StructuredDocumentation",
										"src": "2038:538:22",
										"text": "@notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n @param tokenIn The token being swapped in\n @param tokenOut The token being swapped out\n @param fee The fee of the token pool to consider for the pair\n @param amountOut The desired output amount\n @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountIn The amount required as the input for the swap in order to receive `amountOut`"
									},
									"functionSelector": "30d07f21",
									"id": 1639,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutputSingle",
									"nameLocation": "2590:22:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1626,
												"mutability": "mutable",
												"name": "tokenIn",
												"nameLocation": "2630:7:22",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "2622:15:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2622:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1628,
												"mutability": "mutable",
												"name": "tokenOut",
												"nameLocation": "2655:8:22",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "2647:16:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1627,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2647:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1630,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "2680:3:22",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "2673:10:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 1629,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "2673:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "2701:9:22",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "2693:17:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1631,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1634,
												"mutability": "mutable",
												"name": "sqrtPriceLimitX96",
												"nameLocation": "2728:17:22",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "2720:25:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1633,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2720:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:139:22"
									},
									"returnParameters": {
										"id": 1638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2778:8:22",
												"nodeType": "VariableDeclaration",
												"scope": 1639,
												"src": "2770:16:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2770:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:18:22"
									},
									"scope": 1640,
									"src": "2581:207:22",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1641,
							"src": "411:2379:22",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:2746:22"
				},
				"id": 22
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/IQuoterV2.sol",
					"exportedSymbols": {
						"IQuoterV2": [
							1733
						]
					},
					"id": 1734,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1642,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:23"
						},
						{
							"id": 1643,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:23"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IQuoterV2",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1644,
								"nodeType": "StructuredDocumentation",
								"src": "91:451:23",
								"text": "@title QuoterV2 Interface\n @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n @dev These functions are not marked view because they rely on calling non-view functions and reverting\n to compute the result. They are also not gas efficient and should not be called on-chain."
							},
							"fullyImplemented": false,
							"id": 1733,
							"linearizedBaseContracts": [
								1733
							],
							"name": "IQuoterV2",
							"nameLocation": "552:9:23",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1645,
										"nodeType": "StructuredDocumentation",
										"src": "568:618:23",
										"text": "@notice Returns the amount out received for a given exact input swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountIn The amount of the first token to swap\n @return amountOut The amount of the last token that would be received\n @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n @return gasEstimate The estimate of the gas that the swap consumes"
									},
									"functionSelector": "cdca1753",
									"id": 1662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInput",
									"nameLocation": "1200:15:23",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1647,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "1229:4:23",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1216:17:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1646,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1216:5:23",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1649,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "1243:8:23",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1235:16:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1235:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1215:37:23"
									},
									"returnParameters": {
										"id": 1661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1652,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1308:9:23",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1300:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1300:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "sqrtPriceX96AfterList",
												"nameLocation": "1348:21:23",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1331:38:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 1653,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "1331:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 1654,
													"nodeType": "ArrayTypeName",
													"src": "1331:9:23",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "initializedTicksCrossedList",
												"nameLocation": "1399:27:23",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1383:43:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1656,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "1383:6:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 1657,
													"nodeType": "ArrayTypeName",
													"src": "1383:8:23",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "gasEstimate",
												"nameLocation": "1448:11:23",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1440:19:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1440:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1286:183:23"
									},
									"scope": 1733,
									"src": "1191:279:23",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IQuoterV2.QuoteExactInputSingleParams",
									"id": 1673,
									"members": [
										{
											"constant": false,
											"id": 1664,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "1529:7:23",
											"nodeType": "VariableDeclaration",
											"scope": 1673,
											"src": "1521:15:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1663,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1521:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1666,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "1554:8:23",
											"nodeType": "VariableDeclaration",
											"scope": 1673,
											"src": "1546:16:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1665,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1546:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1668,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "1580:8:23",
											"nodeType": "VariableDeclaration",
											"scope": 1673,
											"src": "1572:16:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1667,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1572:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1670,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1605:3:23",
											"nodeType": "VariableDeclaration",
											"scope": 1673,
											"src": "1598:10:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1669,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1598:6:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1672,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "1626:17:23",
											"nodeType": "VariableDeclaration",
											"scope": 1673,
											"src": "1618:25:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1671,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1618:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "QuoteExactInputSingleParams",
									"nameLocation": "1483:27:23",
									"nodeType": "StructDefinition",
									"scope": 1733,
									"src": "1476:174:23",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1674,
										"nodeType": "StructuredDocumentation",
										"src": "1656:790:23",
										"text": "@notice Returns the amount out received for a given exact input but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountIn The desired input amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountOut The amount of `tokenOut` that would be received\n @return sqrtPriceX96After The sqrt price of the pool after the swap\n @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n @return gasEstimate The estimate of the gas that the swap consumes"
									},
									"functionSelector": "c6a5026a",
									"id": 1688,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactInputSingle",
									"nameLocation": "2460:21:23",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1677,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2517:6:23",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "2482:41:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_QuoteExactInputSingleParams_$1673_memory_ptr",
													"typeString": "struct IQuoterV2.QuoteExactInputSingleParams"
												},
												"typeName": {
													"id": 1676,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1675,
														"name": "QuoteExactInputSingleParams",
														"nameLocations": [
															"2482:27:23"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1673,
														"src": "2482:27:23"
													},
													"referencedDeclaration": 1673,
													"src": "2482:27:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_QuoteExactInputSingleParams_$1673_storage_ptr",
														"typeString": "struct IQuoterV2.QuoteExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2481:43:23"
									},
									"returnParameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "2580:9:23",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "2572:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2572:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1682,
												"mutability": "mutable",
												"name": "sqrtPriceX96After",
												"nameLocation": "2611:17:23",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "2603:25:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1681,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "2603:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1684,
												"mutability": "mutable",
												"name": "initializedTicksCrossed",
												"nameLocation": "2649:23:23",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "2642:30:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1683,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2642:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "gasEstimate",
												"nameLocation": "2694:11:23",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "2686:19:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2686:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2558:157:23"
									},
									"scope": 1733,
									"src": "2451:265:23",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1689,
										"nodeType": "StructuredDocumentation",
										"src": "2722:654:23",
										"text": "@notice Returns the amount in required for a given exact output swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n @param amountOut The amount of the last token to receive\n @return amountIn The amount of first token required to be paid\n @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n @return gasEstimate The estimate of the gas that the swap consumes"
									},
									"functionSelector": "2f80bb1d",
									"id": 1706,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutput",
									"nameLocation": "3390:16:23",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "3420:4:23",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3407:17:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1690,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3407:5:23",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "3434:9:23",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3426:17:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3426:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3406:38:23"
									},
									"returnParameters": {
										"id": 1705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1696,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "3500:8:23",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3492:16:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1695,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3492:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "sqrtPriceX96AfterList",
												"nameLocation": "3539:21:23",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3522:38:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint160_$dyn_memory_ptr",
													"typeString": "uint160[]"
												},
												"typeName": {
													"baseType": {
														"id": 1697,
														"name": "uint160",
														"nodeType": "ElementaryTypeName",
														"src": "3522:7:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint160",
															"typeString": "uint160"
														}
													},
													"id": 1698,
													"nodeType": "ArrayTypeName",
													"src": "3522:9:23",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint160_$dyn_storage_ptr",
														"typeString": "uint160[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "initializedTicksCrossedList",
												"nameLocation": "3590:27:23",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3574:43:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint32_$dyn_memory_ptr",
													"typeString": "uint32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1700,
														"name": "uint32",
														"nodeType": "ElementaryTypeName",
														"src": "3574:6:23",
														"typeDescriptions": {
															"typeIdentifier": "t_uint32",
															"typeString": "uint32"
														}
													},
													"id": 1701,
													"nodeType": "ArrayTypeName",
													"src": "3574:8:23",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint32_$dyn_storage_ptr",
														"typeString": "uint32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1704,
												"mutability": "mutable",
												"name": "gasEstimate",
												"nameLocation": "3639:11:23",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3631:19:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3631:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3478:182:23"
									},
									"scope": 1733,
									"src": "3381:280:23",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IQuoterV2.QuoteExactOutputSingleParams",
									"id": 1717,
									"members": [
										{
											"constant": false,
											"id": 1708,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "3721:7:23",
											"nodeType": "VariableDeclaration",
											"scope": 1717,
											"src": "3713:15:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1707,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3713:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1710,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "3746:8:23",
											"nodeType": "VariableDeclaration",
											"scope": 1717,
											"src": "3738:16:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1709,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3738:7:23",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1712,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "3772:6:23",
											"nodeType": "VariableDeclaration",
											"scope": 1717,
											"src": "3764:14:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1711,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "3764:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1714,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "3795:3:23",
											"nodeType": "VariableDeclaration",
											"scope": 1717,
											"src": "3788:10:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1713,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "3788:6:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1716,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "3816:17:23",
											"nodeType": "VariableDeclaration",
											"scope": 1717,
											"src": "3808:25:23",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1715,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "3808:7:23",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "QuoteExactOutputSingleParams",
									"nameLocation": "3674:28:23",
									"nodeType": "StructDefinition",
									"scope": 1733,
									"src": "3667:173:23",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1718,
										"nodeType": "StructuredDocumentation",
										"src": "3846:838:23",
										"text": "@notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountOut The desired output amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n @return sqrtPriceX96After The sqrt price of the pool after the swap\n @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n @return gasEstimate The estimate of the gas that the swap consumes"
									},
									"functionSelector": "bd21704a",
									"id": 1732,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quoteExactOutputSingle",
									"nameLocation": "4698:22:23",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1721,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "4757:6:23",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "4721:42:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_QuoteExactOutputSingleParams_$1717_memory_ptr",
													"typeString": "struct IQuoterV2.QuoteExactOutputSingleParams"
												},
												"typeName": {
													"id": 1720,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1719,
														"name": "QuoteExactOutputSingleParams",
														"nameLocations": [
															"4721:28:23"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1717,
														"src": "4721:28:23"
													},
													"referencedDeclaration": 1717,
													"src": "4721:28:23",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_QuoteExactOutputSingleParams_$1717_storage_ptr",
														"typeString": "struct IQuoterV2.QuoteExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4720:44:23"
									},
									"returnParameters": {
										"id": 1731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1724,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "4820:8:23",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "4812:16:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1726,
												"mutability": "mutable",
												"name": "sqrtPriceX96After",
												"nameLocation": "4850:17:23",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "4842:25:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 1725,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4842:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1728,
												"mutability": "mutable",
												"name": "initializedTicksCrossed",
												"nameLocation": "4888:23:23",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "4881:30:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 1727,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "4881:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "gasEstimate",
												"nameLocation": "4933:11:23",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "4925:19:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4925:7:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4798:156:23"
									},
									"scope": 1733,
									"src": "4689:266:23",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1734,
							"src": "542:4415:23",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:4913:23"
				},
				"id": 23
			},
			"https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol",
					"exportedSymbols": {
						"ISwapRouter": [
							1833
						],
						"IUniswapV3SwapCallback": [
							278
						]
					},
					"id": 1834,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1735,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:24"
						},
						{
							"id": 1736,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:24"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 1737,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1834,
							"sourceUnit": 279,
							"src": "91:83:24",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1739,
										"name": "IUniswapV3SwapCallback",
										"nameLocations": [
											"305:22:24"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 278,
										"src": "305:22:24"
									},
									"id": 1740,
									"nodeType": "InheritanceSpecifier",
									"src": "305:22:24"
								}
							],
							"canonicalName": "ISwapRouter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1738,
								"nodeType": "StructuredDocumentation",
								"src": "176:104:24",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 1833,
							"linearizedBaseContracts": [
								1833,
								278
							],
							"name": "ISwapRouter",
							"nameLocation": "290:11:24",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ISwapRouter.ExactInputSingleParams",
									"id": 1757,
									"members": [
										{
											"constant": false,
											"id": 1742,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "382:7:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "374:15:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1741,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "374:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1744,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "407:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "399:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1743,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "399:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1746,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "432:3:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "425:10:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1745,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "425:6:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1748,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "453:9:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "445:17:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1747,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "445:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1750,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "480:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "472:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1749,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "472:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1752,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "506:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "498:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1751,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "498:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1754,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "532:16:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "524:24:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1753,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "524:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1756,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "566:17:24",
											"nodeType": "VariableDeclaration",
											"scope": 1757,
											"src": "558:25:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1755,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nameLocation": "341:22:24",
									"nodeType": "StructDefinition",
									"scope": 1833,
									"src": "334:256:24",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1758,
										"nodeType": "StructuredDocumentation",
										"src": "596:250:24",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "414bf389",
									"id": 1766,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nameLocation": "860:16:24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "909:6:24",
												"nodeType": "VariableDeclaration",
												"scope": 1766,
												"src": "877:38:24",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$1757_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 1760,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1759,
														"name": "ExactInputSingleParams",
														"nameLocations": [
															"877:22:24"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1757,
														"src": "877:22:24"
													},
													"referencedDeclaration": 1757,
													"src": "877:22:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$1757_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:40:24"
									},
									"returnParameters": {
										"id": 1765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "951:9:24",
												"nodeType": "VariableDeclaration",
												"scope": 1766,
												"src": "943:17:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1763,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "942:19:24"
									},
									"scope": 1833,
									"src": "851:111:24",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactInputParams",
									"id": 1777,
									"members": [
										{
											"constant": false,
											"id": 1768,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "1008:4:24",
											"nodeType": "VariableDeclaration",
											"scope": 1777,
											"src": "1002:10:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1767,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1002:5:24",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1770,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1030:9:24",
											"nodeType": "VariableDeclaration",
											"scope": 1777,
											"src": "1022:17:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1769,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1022:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1772,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1057:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1777,
											"src": "1049:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1771,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1049:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1774,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "1083:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1777,
											"src": "1075:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1773,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1075:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1776,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "1109:16:24",
											"nodeType": "VariableDeclaration",
											"scope": 1777,
											"src": "1101:24:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1775,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1101:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nameLocation": "975:16:24",
									"nodeType": "StructDefinition",
									"scope": 1833,
									"src": "968:164:24",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1778,
										"nodeType": "StructuredDocumentation",
										"src": "1138:273:24",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "c04b8d59",
									"id": 1786,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nameLocation": "1425:10:24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1781,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "1462:6:24",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "1436:32:24",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$1777_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 1780,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1779,
														"name": "ExactInputParams",
														"nameLocations": [
															"1436:16:24"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1777,
														"src": "1436:16:24"
													},
													"referencedDeclaration": 1777,
													"src": "1436:16:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$1777_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1435:34:24"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1504:9:24",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "1496:17:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1496:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:19:24"
									},
									"scope": 1833,
									"src": "1416:99:24",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputSingleParams",
									"id": 1803,
									"members": [
										{
											"constant": false,
											"id": 1788,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "1570:7:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1562:15:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1787,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1790,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "1595:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1587:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1789,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1587:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1792,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1620:3:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1613:10:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 1791,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1613:6:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1794,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1641:9:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1633:17:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1793,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1633:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1796,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1668:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1660:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1795,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1660:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1798,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "1694:9:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1686:17:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1797,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1800,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "1721:15:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1713:23:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1799,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1713:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1802,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "1754:17:24",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1746:25:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 1801,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1746:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nameLocation": "1528:23:24",
									"nodeType": "StructDefinition",
									"scope": 1833,
									"src": "1521:257:24",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1804,
										"nodeType": "StructuredDocumentation",
										"src": "1784:250:24",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "db3e2198",
									"id": 1812,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nameLocation": "2048:17:24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1807,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2099:6:24",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "2066:39:24",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1803_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 1806,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1805,
														"name": "ExactOutputSingleParams",
														"nameLocations": [
															"2066:23:24"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1803,
														"src": "2066:23:24"
													},
													"referencedDeclaration": 1803,
													"src": "2066:23:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$1803_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2065:41:24"
									},
									"returnParameters": {
										"id": 1811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1810,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2141:8:24",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "2133:16:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2133:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:18:24"
									},
									"scope": 1833,
									"src": "2039:112:24",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputParams",
									"id": 1823,
									"members": [
										{
											"constant": false,
											"id": 1814,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "2198:4:24",
											"nodeType": "VariableDeclaration",
											"scope": 1823,
											"src": "2192:10:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1813,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2192:5:24",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1816,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "2220:9:24",
											"nodeType": "VariableDeclaration",
											"scope": 1823,
											"src": "2212:17:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1815,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2212:7:24",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1818,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2247:8:24",
											"nodeType": "VariableDeclaration",
											"scope": 1823,
											"src": "2239:16:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1817,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2239:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1820,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "2273:9:24",
											"nodeType": "VariableDeclaration",
											"scope": 1823,
											"src": "2265:17:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1819,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2265:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1822,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "2300:15:24",
											"nodeType": "VariableDeclaration",
											"scope": 1823,
											"src": "2292:23:24",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1821,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2292:7:24",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nameLocation": "2164:17:24",
									"nodeType": "StructDefinition",
									"scope": 1833,
									"src": "2157:165:24",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1824,
										"nodeType": "StructuredDocumentation",
										"src": "2328:284:24",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "f28c0498",
									"id": 1832,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nameLocation": "2626:11:24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1827,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2665:6:24",
												"nodeType": "VariableDeclaration",
												"scope": 1832,
												"src": "2638:33:24",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$1823_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 1826,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1825,
														"name": "ExactOutputParams",
														"nameLocations": [
															"2638:17:24"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1823,
														"src": "2638:17:24"
													},
													"referencedDeclaration": 1823,
													"src": "2638:17:24",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$1823_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:35:24"
									},
									"returnParameters": {
										"id": 1831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2707:8:24",
												"nodeType": "VariableDeclaration",
												"scope": 1832,
												"src": "2699:16:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1829,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2698:18:24"
									},
									"scope": 1833,
									"src": "2617:100:24",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1834,
							"src": "280:2439:24",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:2675:24"
				},
				"id": 24
			},
			"https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/TransferHelper.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						],
						"TransferHelper": [
							2004
						]
					},
					"id": 2005,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1835,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:25"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1836,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2005,
							"sourceUnit": 78,
							"src": "71:56:25",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TransferHelper",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 2004,
							"linearizedBaseContracts": [
								2004
							],
							"name": "TransferHelper",
							"nameLocation": "137:14:25",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1884,
										"nodeType": "Block",
										"src": "690:229:25",
										"statements": [
											{
												"assignments": [
													1849,
													1851
												],
												"declarations": [
													{
														"constant": false,
														"id": 1849,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "706:7:25",
														"nodeType": "VariableDeclaration",
														"scope": 1884,
														"src": "701:12:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1848,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "701:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1851,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "728:4:25",
														"nodeType": "VariableDeclaration",
														"scope": 1884,
														"src": "715:17:25",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1850,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "715:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1864,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1856,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 77,
																			"src": "782:6:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1857,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "789:12:25",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 76,
																		"src": "782:19:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transferFrom(address,address,uint256) returns (bool)"
																		}
																	},
																	"id": 1858,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "802:8:25",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "782:28:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1859,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1841,
																	"src": "812:4:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1860,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1843,
																	"src": "818:2:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1861,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1845,
																	"src": "822:5:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1854,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "759:3:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1855,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "763:18:25",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "759:22:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1862,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "759:69:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1852,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1839,
															"src": "748:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1853,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "754:4:25",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "748:10:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "748:81:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "700:129:25"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1880,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1866,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1849,
																"src": "847:7:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1878,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1870,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1867,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1851,
																					"src": "859:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1868,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "864:6:25",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "859:11:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1869,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "874:1:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "859:16:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1873,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1851,
																					"src": "890:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1875,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "897:4:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1874,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "897:4:25",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1876,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "896:6:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1871,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "879:3:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1872,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "883:6:25",
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "879:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1877,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "879:24:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "859:44:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1879,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "858:46:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "847:57:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535446",
															"id": 1881,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "906:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															},
															"value": "STF"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86",
																"typeString": "literal_string \"STF\""
															}
														],
														"id": 1865,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "839:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "839:73:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1883,
												"nodeType": "ExpressionStatement",
												"src": "839:73:25"
											}
										]
									},
									"documentation": {
										"id": 1837,
										"nodeType": "StructuredDocumentation",
										"src": "158:398:25",
										"text": "@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"
									},
									"id": 1885,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "570:16:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1839,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "604:5:25",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "596:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "596:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1841,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "627:4:25",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "619:12:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "619:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1843,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "649:2:25",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "641:10:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1842,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "641:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "669:5:25",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "661:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "586:94:25"
									},
									"returnParameters": {
										"id": 1847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "690:0:25"
									},
									"scope": 2004,
									"src": "561:358:25",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1930,
										"nodeType": "Block",
										"src": "1314:206:25",
										"statements": [
											{
												"assignments": [
													1896,
													1898
												],
												"declarations": [
													{
														"constant": false,
														"id": 1896,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1330:7:25",
														"nodeType": "VariableDeclaration",
														"scope": 1930,
														"src": "1325:12:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1895,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1325:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1898,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "1352:4:25",
														"nodeType": "VariableDeclaration",
														"scope": 1930,
														"src": "1339:17:25",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1897,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1339:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1910,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1903,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 77,
																			"src": "1394:6:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1904,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "1401:8:25",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 44,
																		"src": "1394:15:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.transfer(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1905,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "1410:8:25",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1394:24:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1906,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1890,
																	"src": "1420:2:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1907,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1892,
																	"src": "1424:5:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1901,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1371:3:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1902,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1375:18:25",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1371:22:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1371:59:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1899,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1888,
															"src": "1360:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1900,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1366:4:25",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "1360:10:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1360:71:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1324:107:25"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1912,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1896,
																"src": "1449:7:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1924,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1916,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1913,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1898,
																					"src": "1461:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1914,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1466:6:25",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "1461:11:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1915,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1476:1:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "1461:16:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1919,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1898,
																					"src": "1492:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1921,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1499:4:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1920,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "1499:4:25",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1922,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "1498:6:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1917,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "1481:3:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1918,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "1485:6:25",
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "1481:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1923,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1481:24:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "1461:44:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1925,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1460:46:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1449:57:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5354",
															"id": 1927,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1508:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															},
															"value": "ST"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca",
																"typeString": "literal_string \"ST\""
															}
														],
														"id": 1911,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1441:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1441:72:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1929,
												"nodeType": "ExpressionStatement",
												"src": "1441:72:25"
											}
										]
									},
									"documentation": {
										"id": 1886,
										"nodeType": "StructuredDocumentation",
										"src": "925:281:25",
										"text": "@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"
									},
									"id": 1931,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1220:12:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1250:5:25",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "1242:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1242:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1890,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1273:2:25",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "1265:10:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1889,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1265:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1293:5:25",
												"nodeType": "VariableDeclaration",
												"scope": 1931,
												"src": "1285:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1891,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1232:72:25"
									},
									"returnParameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1314:0:25"
									},
									"scope": 2004,
									"src": "1211:309:25",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1976,
										"nodeType": "Block",
										"src": "1975:205:25",
										"statements": [
											{
												"assignments": [
													1942,
													1944
												],
												"declarations": [
													{
														"constant": false,
														"id": 1942,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1991:7:25",
														"nodeType": "VariableDeclaration",
														"scope": 1976,
														"src": "1986:12:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1941,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1986:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1944,
														"mutability": "mutable",
														"name": "data",
														"nameLocation": "2013:4:25",
														"nodeType": "VariableDeclaration",
														"scope": 1976,
														"src": "2000:17:25",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1943,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2000:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1956,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 1949,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 77,
																			"src": "2055:6:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1950,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2062:7:25",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2055:14:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function IERC20.approve(address,uint256) returns (bool)"
																		}
																	},
																	"id": 1951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2070:8:25",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2055:23:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 1952,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1936,
																	"src": "2080:2:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1953,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "2084:5:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1947,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2032:3:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1948,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2036:18:25",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2032:22:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 1954,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2032:58:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1945,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1934,
															"src": "2021:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1946,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2027:4:25",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "2021:10:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1955,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2021:70:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1985:106:25"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1972,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1958,
																"name": "success",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1942,
																"src": "2109:7:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1970,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1962,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1959,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1944,
																					"src": "2121:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1960,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2126:6:25",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2121:11:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "30",
																				"id": 1961,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2136:1:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			},
																			"src": "2121:16:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"arguments": [
																				{
																					"id": 1965,
																					"name": "data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1944,
																					"src": "2152:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				{
																					"components": [
																						{
																							"id": 1967,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2159:4:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_bool_$",
																								"typeString": "type(bool)"
																							},
																							"typeName": {
																								"id": 1966,
																								"name": "bool",
																								"nodeType": "ElementaryTypeName",
																								"src": "2159:4:25",
																								"typeDescriptions": {}
																							}
																						}
																					],
																					"id": 1968,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "2158:6:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					},
																					{
																						"typeIdentifier": "t_type$_t_bool_$",
																						"typeString": "type(bool)"
																					}
																				],
																				"expression": {
																					"id": 1963,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2141:3:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1964,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "2145:6:25",
																				"memberName": "decode",
																				"nodeType": "MemberAccess",
																				"src": "2141:10:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1969,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2141:24:25",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "2121:44:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 1971,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2120:46:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2109:57:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5341",
															"id": 1973,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2168:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															},
															"value": "SA"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa",
																"typeString": "literal_string \"SA\""
															}
														],
														"id": 1957,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2101:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1974,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2101:72:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1975,
												"nodeType": "ExpressionStatement",
												"src": "2101:72:25"
											}
										]
									},
									"documentation": {
										"id": 1932,
										"nodeType": "StructuredDocumentation",
										"src": "1526:342:25",
										"text": "@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"
									},
									"id": 1977,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1882:11:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1934,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1911:5:25",
												"nodeType": "VariableDeclaration",
												"scope": 1977,
												"src": "1903:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1903:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1936,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1934:2:25",
												"nodeType": "VariableDeclaration",
												"scope": 1977,
												"src": "1926:10:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1926:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1938,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1954:5:25",
												"nodeType": "VariableDeclaration",
												"scope": 1977,
												"src": "1946:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1937,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1946:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1893:72:25"
									},
									"returnParameters": {
										"id": 1940,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1975:0:25"
									},
									"scope": 2004,
									"src": "1873:307:25",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2002,
										"nodeType": "Block",
										"src": "2431:104:25",
										"statements": [
											{
												"assignments": [
													1986,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1986,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2447:7:25",
														"nodeType": "VariableDeclaration",
														"scope": 2002,
														"src": "2442:12:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1985,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2442:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1996,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1993,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2492:1:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1992,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "2482:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																},
																"typeName": {
																	"id": 1991,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2486:5:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes"
																	}
																}
															},
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2482:12:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1987,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1980,
																"src": "2460:2:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2463:4:25",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2460:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1990,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1989,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1982,
																"src": "2475:5:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2460:21:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:35:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2441:54:25"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1998,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1986,
															"src": "2513:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "535445",
															"id": 1999,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2522:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															},
															"value": "STE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4",
																"typeString": "literal_string \"STE\""
															}
														],
														"id": 1997,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2505:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:23:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2001,
												"nodeType": "ExpressionStatement",
												"src": "2505:23:25"
											}
										]
									},
									"documentation": {
										"id": 1978,
										"nodeType": "StructuredDocumentation",
										"src": "2186:179:25",
										"text": "@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"
									},
									"id": 2003,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nameLocation": "2379:15:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1980,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2403:2:25",
												"nodeType": "VariableDeclaration",
												"scope": 2003,
												"src": "2395:10:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1982,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2415:5:25",
												"nodeType": "VariableDeclaration",
												"scope": 2003,
												"src": "2407:13:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1981,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:27:25"
									},
									"returnParameters": {
										"id": 1984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2431:0:25"
									},
									"scope": 2004,
									"src": "2370:165:25",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2005,
							"src": "129:2408:25",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:2493:25"
				},
				"id": 25
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Permit": [
							2039
						]
					},
					"id": 2040,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2006,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:26"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 2007,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2040,
							"sourceUnit": 195,
							"src": "71:58:26",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2009,
										"name": "IERC721",
										"nameLocations": [
											"282:7:26"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 194,
										"src": "282:7:26"
									},
									"id": 2010,
									"nodeType": "InheritanceSpecifier",
									"src": "282:7:26"
								}
							],
							"canonicalName": "IERC721Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2008,
								"nodeType": "StructuredDocumentation",
								"src": "131:124:26",
								"text": "@title ERC721 with permit\n @notice Extension to ERC721 that includes a permit function for signature based approvals"
							},
							"fullyImplemented": false,
							"id": 2039,
							"linearizedBaseContracts": [
								2039,
								194,
								264
							],
							"name": "IERC721Permit",
							"nameLocation": "265:13:26",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2011,
										"nodeType": "StructuredDocumentation",
										"src": "296:104:26",
										"text": "@notice The permit typehash used in the permit signature\n @return The typehash for the permit"
									},
									"functionSelector": "30adf81f",
									"id": 2016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "414:15:26",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:26"
									},
									"returnParameters": {
										"id": 2015,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2014,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2016,
												"src": "455:7:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2013,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "455:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "454:9:26"
									},
									"scope": 2039,
									"src": "405:59:26",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2017,
										"nodeType": "StructuredDocumentation",
										"src": "470:135:26",
										"text": "@notice The domain separator used in the permit signature\n @return The domain seperator used in encoding of permit signature"
									},
									"functionSelector": "3644e515",
									"id": 2022,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "619:16:26",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2018,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:26"
									},
									"returnParameters": {
										"id": 2021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2022,
												"src": "661:7:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2019,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:9:26"
									},
									"scope": 2039,
									"src": "610:60:26",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2023,
										"nodeType": "StructuredDocumentation",
										"src": "676:605:26",
										"text": "@notice Approve of a specific token ID for spending by spender via signature\n @param spender The account that is being approved\n @param tokenId The ID of the token that is being approved for spending\n @param deadline The deadline timestamp by which the call must be mined for the approve to work\n @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`"
									},
									"functionSelector": "7ac2ff7b",
									"id": 2038,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1295:6:26",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2025,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1319:7:26",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "1311:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2024,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1311:7:26",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1344:7:26",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "1336:15:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1336:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2029,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1369:8:26",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "1361:16:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2028,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2031,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1393:1:26",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "1387:7:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2030,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1387:5:26",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2033,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1412:1:26",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "1404:9:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2032,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1404:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1431:1:26",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "1423:9:26",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2034,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:26",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1301:137:26"
									},
									"returnParameters": {
										"id": 2037,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1455:0:26"
									},
									"scope": 2039,
									"src": "1286:170:26",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2040,
							"src": "255:1203:26",
							"usedErrors": [],
							"usedEvents": [
								93,
								102,
								111
							]
						}
					],
					"src": "45:1414:26"
				},
				"id": 26
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/INonfungiblePositionManager.sol",
					"exportedSymbols": {
						"IERC165": [
							264
						],
						"IERC721": [
							194
						],
						"IERC721Enumerable": [
							225
						],
						"IERC721Metadata": [
							252
						],
						"IERC721Permit": [
							2039
						],
						"INonfungiblePositionManager": [
							2238
						],
						"IPeripheryImmutableState": [
							2254
						],
						"IPeripheryPayments": [
							2280
						],
						"IPoolInitializer": [
							2299
						],
						"PoolAddress": [
							2397
						]
					},
					"id": 2239,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2041,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:27"
						},
						{
							"id": 2042,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:27"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol",
							"id": 2043,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2239,
							"sourceUnit": 253,
							"src": "91:66:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol",
							"id": 2044,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2239,
							"sourceUnit": 226,
							"src": "158:68:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol",
							"file": "./IPoolInitializer.sol",
							"id": 2045,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2239,
							"sourceUnit": 2300,
							"src": "228:32:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IERC721Permit.sol",
							"file": "./IERC721Permit.sol",
							"id": 2046,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2239,
							"sourceUnit": 2040,
							"src": "261:29:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol",
							"file": "./IPeripheryPayments.sol",
							"id": 2047,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2239,
							"sourceUnit": 2281,
							"src": "291:34:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol",
							"file": "./IPeripheryImmutableState.sol",
							"id": 2048,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2239,
							"sourceUnit": 2255,
							"src": "326:40:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol",
							"file": "../libraries/PoolAddress.sol",
							"id": 2049,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2239,
							"sourceUnit": 2398,
							"src": "367:38:27",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2051,
										"name": "IPoolInitializer",
										"nameLocations": [
											"629:16:27"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2299,
										"src": "629:16:27"
									},
									"id": 2052,
									"nodeType": "InheritanceSpecifier",
									"src": "629:16:27"
								},
								{
									"baseName": {
										"id": 2053,
										"name": "IPeripheryPayments",
										"nameLocations": [
											"651:18:27"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2280,
										"src": "651:18:27"
									},
									"id": 2054,
									"nodeType": "InheritanceSpecifier",
									"src": "651:18:27"
								},
								{
									"baseName": {
										"id": 2055,
										"name": "IPeripheryImmutableState",
										"nameLocations": [
											"675:24:27"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2254,
										"src": "675:24:27"
									},
									"id": 2056,
									"nodeType": "InheritanceSpecifier",
									"src": "675:24:27"
								},
								{
									"baseName": {
										"id": 2057,
										"name": "IERC721Metadata",
										"nameLocations": [
											"705:15:27"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 252,
										"src": "705:15:27"
									},
									"id": 2058,
									"nodeType": "InheritanceSpecifier",
									"src": "705:15:27"
								},
								{
									"baseName": {
										"id": 2059,
										"name": "IERC721Enumerable",
										"nameLocations": [
											"726:17:27"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 225,
										"src": "726:17:27"
									},
									"id": 2060,
									"nodeType": "InheritanceSpecifier",
									"src": "726:17:27"
								},
								{
									"baseName": {
										"id": 2061,
										"name": "IERC721Permit",
										"nameLocations": [
											"749:13:27"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2039,
										"src": "749:13:27"
									},
									"id": 2062,
									"nodeType": "InheritanceSpecifier",
									"src": "749:13:27"
								}
							],
							"canonicalName": "INonfungiblePositionManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2050,
								"nodeType": "StructuredDocumentation",
								"src": "407:177:27",
								"text": "@title Non-fungible token for positions\n @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n and authorized."
							},
							"fullyImplemented": false,
							"id": 2238,
							"linearizedBaseContracts": [
								2238,
								2039,
								225,
								252,
								194,
								264,
								2254,
								2280,
								2299
							],
							"name": "INonfungiblePositionManager",
							"nameLocation": "594:27:27",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2063,
										"nodeType": "StructuredDocumentation",
										"src": "769:458:27",
										"text": "@notice Emitted when liquidity is increased for a position NFT\n @dev Also emitted when a token is minted\n @param tokenId The ID of the token for which liquidity was increased\n @param liquidity The amount by which liquidity for the NFT position was increased\n @param amount0 The amount of token0 that was paid for the increase in liquidity\n @param amount1 The amount of token1 that was paid for the increase in liquidity"
									},
									"eventSelector": "3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f",
									"id": 2073,
									"name": "IncreaseLiquidity",
									"nameLocation": "1238:17:27",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2065,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1272:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "1256:23:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1256:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2067,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1289:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "1281:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2066,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2069,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1308:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "1300:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2068,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1300:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2071,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1325:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "1317:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1317:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1255:78:27"
									},
									"src": "1232:102:27"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2074,
										"nodeType": "StructuredDocumentation",
										"src": "1339:419:27",
										"text": "@notice Emitted when liquidity is decreased for a position NFT\n @param tokenId The ID of the token for which liquidity was decreased\n @param liquidity The amount by which liquidity for the NFT position was decreased\n @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n @param amount1 The amount of token1 that was accounted for the decrease in liquidity"
									},
									"eventSelector": "26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b4",
									"id": 2084,
									"name": "DecreaseLiquidity",
									"nameLocation": "1769:17:27",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1803:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "1787:23:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2075,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1787:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2078,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1820:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "1812:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2077,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "1812:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2080,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "1839:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "1831:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1831:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2082,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "1856:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "1848:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2081,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1848:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1786:78:27"
									},
									"src": "1763:102:27"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2085,
										"nodeType": "StructuredDocumentation",
										"src": "1870:522:27",
										"text": "@notice Emitted when tokens are collected for a position NFT\n @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n @param tokenId The ID of the token for which underlying tokens were collected\n @param recipient The address of the account that received the collected tokens\n @param amount0 The amount of token0 owed to the position that was collected\n @param amount1 The amount of token1 owed to the position that was collected"
									},
									"eventSelector": "40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01",
									"id": 2095,
									"name": "Collect",
									"nameLocation": "2403:7:27",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2087,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2427:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "2411:23:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2411:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2089,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2444:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "2436:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2088,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2436:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2091,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "2463:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "2455:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2455:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2093,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "2480:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "2472:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2472:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2410:78:27"
									},
									"src": "2397:92:27"
								},
								{
									"documentation": {
										"id": 2096,
										"nodeType": "StructuredDocumentation",
										"src": "2495:1157:27",
										"text": "@notice Returns the position information associated with a given token ID.\n @dev Throws if the token ID is not valid.\n @param tokenId The ID of the token that represents the position\n @return nonce The nonce for permits\n @return operator The address that is approved for spending\n @return token0 The address of the token0 for a specific pool\n @return token1 The address of the token1 for a specific pool\n @return fee The fee associated with the pool\n @return tickLower The lower end of the tick range for the position\n @return tickUpper The higher end of the tick range for the position\n @return liquidity The liquidity of the position\n @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation"
									},
									"functionSelector": "99fbab88",
									"id": 2125,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "positions",
									"nameLocation": "3666:9:27",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2098,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3684:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3676:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2097,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3676:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3675:17:27"
									},
									"returnParameters": {
										"id": 2124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2101,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "3760:5:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3753:12:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 2100,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "3753:6:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2103,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3787:8:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3779:16:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3779:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2105,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "3817:6:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3809:14:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3809:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2107,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "3845:6:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3837:14:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3837:7:27",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "3872:3:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3865:10:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2108,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "3865:6:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2111,
												"mutability": "mutable",
												"name": "tickLower",
												"nameLocation": "3895:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3889:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2110,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3889:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2113,
												"mutability": "mutable",
												"name": "tickUpper",
												"nameLocation": "3924:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3918:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												},
												"typeName": {
													"id": 2112,
													"name": "int24",
													"nodeType": "ElementaryTypeName",
													"src": "3918:5:27",
													"typeDescriptions": {
														"typeIdentifier": "t_int24",
														"typeString": "int24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "3955:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3947:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2114,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "3947:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2117,
												"mutability": "mutable",
												"name": "feeGrowthInside0LastX128",
												"nameLocation": "3986:24:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "3978:32:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3978:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2119,
												"mutability": "mutable",
												"name": "feeGrowthInside1LastX128",
												"nameLocation": "4032:24:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "4024:32:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4024:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2121,
												"mutability": "mutable",
												"name": "tokensOwed0",
												"nameLocation": "4078:11:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "4070:19:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2120,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4070:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2123,
												"mutability": "mutable",
												"name": "tokensOwed1",
												"nameLocation": "4111:11:27",
												"nodeType": "VariableDeclaration",
												"scope": 2125,
												"src": "4103:19:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2122,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "4103:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3739:393:27"
									},
									"scope": 2238,
									"src": "3657:476:27",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.MintParams",
									"id": 2148,
									"members": [
										{
											"constant": false,
											"id": 2127,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "4175:6:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4167:14:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2126,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4167:7:27",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2129,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "4199:6:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4191:14:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2128,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4191:7:27",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2131,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "4222:3:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4215:10:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2130,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "4215:6:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2133,
											"mutability": "mutable",
											"name": "tickLower",
											"nameLocation": "4241:9:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4235:15:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2132,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4235:5:27",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2135,
											"mutability": "mutable",
											"name": "tickUpper",
											"nameLocation": "4266:9:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4260:15:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int24",
												"typeString": "int24"
											},
											"typeName": {
												"id": 2134,
												"name": "int24",
												"nodeType": "ElementaryTypeName",
												"src": "4260:5:27",
												"typeDescriptions": {
													"typeIdentifier": "t_int24",
													"typeString": "int24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2137,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "4293:14:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4285:22:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2136,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4285:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2139,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "4325:14:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4317:22:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2138,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4317:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2141,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "4357:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4349:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2140,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4349:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2143,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "4385:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4377:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2142,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4377:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2145,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "4413:9:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4405:17:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2144,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4405:7:27",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2147,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "4440:8:27",
											"nodeType": "VariableDeclaration",
											"scope": 2148,
											"src": "4432:16:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2146,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4432:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MintParams",
									"nameLocation": "4146:10:27",
									"nodeType": "StructDefinition",
									"scope": 2238,
									"src": "4139:316:27",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2149,
										"nodeType": "StructuredDocumentation",
										"src": "4461:586:27",
										"text": "@notice Creates a new position wrapped in a NFT\n @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n a method does not exist, i.e. the pool is assumed to be initialized.\n @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n @return tokenId The ID of the token that represents the minted position\n @return liquidity The amount of liquidity for this position\n @return amount0 The amount of token0\n @return amount1 The amount of token1"
									},
									"functionSelector": "88316456",
									"id": 2163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "5061:4:27",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2152,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "5086:6:27",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "5066:26:27",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MintParams_$2148_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.MintParams"
												},
												"typeName": {
													"id": 2151,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2150,
														"name": "MintParams",
														"nameLocations": [
															"5066:10:27"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2148,
														"src": "5066:10:27"
													},
													"referencedDeclaration": 2148,
													"src": "5066:10:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MintParams_$2148_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.MintParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5065:28:27"
									},
									"returnParameters": {
										"id": 2162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2155,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5165:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "5157:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5157:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "5194:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "5186:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2156,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "5186:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2159,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "5225:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "5217:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5217:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2161,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "5254:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "5246:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5246:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:128:27"
									},
									"scope": 2238,
									"src": "5052:220:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.IncreaseLiquidityParams",
									"id": 2176,
									"members": [
										{
											"constant": false,
											"id": 2165,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "5327:7:27",
											"nodeType": "VariableDeclaration",
											"scope": 2176,
											"src": "5319:15:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2164,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5319:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2167,
											"mutability": "mutable",
											"name": "amount0Desired",
											"nameLocation": "5352:14:27",
											"nodeType": "VariableDeclaration",
											"scope": 2176,
											"src": "5344:22:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2166,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5344:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2169,
											"mutability": "mutable",
											"name": "amount1Desired",
											"nameLocation": "5384:14:27",
											"nodeType": "VariableDeclaration",
											"scope": 2176,
											"src": "5376:22:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2168,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5376:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2171,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "5416:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2176,
											"src": "5408:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2170,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5408:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2173,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "5444:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2176,
											"src": "5436:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2172,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5436:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2175,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "5472:8:27",
											"nodeType": "VariableDeclaration",
											"scope": 2176,
											"src": "5464:16:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2174,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5464:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "IncreaseLiquidityParams",
									"nameLocation": "5285:23:27",
									"nodeType": "StructDefinition",
									"scope": 2238,
									"src": "5278:209:27",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2177,
										"nodeType": "StructuredDocumentation",
										"src": "5493:821:27",
										"text": "@notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n @param params tokenId The ID of the token for which liquidity is being increased,\n amount0Desired The desired amount of token0 to be spent,\n amount1Desired The desired amount of token1 to be spent,\n amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n deadline The time by which the transaction must be included to effect the change\n @return liquidity The new liquidity amount as a result of the increase\n @return amount0 The amount of token0 to acheive resulting liquidity\n @return amount1 The amount of token1 to acheive resulting liquidity"
									},
									"functionSelector": "219f5d17",
									"id": 2189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseLiquidity",
									"nameLocation": "6328:17:27",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2180,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "6379:6:27",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "6346:39:27",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2176_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
												},
												"typeName": {
													"id": 2179,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2178,
														"name": "IncreaseLiquidityParams",
														"nameLocations": [
															"6346:23:27"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2176,
														"src": "6346:23:27"
													},
													"referencedDeclaration": 2176,
													"src": "6346:23:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_IncreaseLiquidityParams_$2176_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.IncreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6345:41:27"
									},
									"returnParameters": {
										"id": 2188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "6458:9:27",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "6450:17:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 2182,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "6450:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "6489:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "6481:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6481:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2187,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "6518:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2189,
												"src": "6510:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6510:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6436:99:27"
									},
									"scope": 2238,
									"src": "6319:217:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.DecreaseLiquidityParams",
									"id": 2200,
									"members": [
										{
											"constant": false,
											"id": 2191,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "6591:7:27",
											"nodeType": "VariableDeclaration",
											"scope": 2200,
											"src": "6583:15:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2190,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6583:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2193,
											"mutability": "mutable",
											"name": "liquidity",
											"nameLocation": "6616:9:27",
											"nodeType": "VariableDeclaration",
											"scope": 2200,
											"src": "6608:17:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2192,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "6608:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2195,
											"mutability": "mutable",
											"name": "amount0Min",
											"nameLocation": "6643:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2200,
											"src": "6635:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2194,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6635:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2197,
											"mutability": "mutable",
											"name": "amount1Min",
											"nameLocation": "6671:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2200,
											"src": "6663:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2196,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6663:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2199,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "6699:8:27",
											"nodeType": "VariableDeclaration",
											"scope": 2200,
											"src": "6691:16:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2198,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6691:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "DecreaseLiquidityParams",
									"nameLocation": "6549:23:27",
									"nodeType": "StructDefinition",
									"scope": 2238,
									"src": "6542:172:27",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2201,
										"nodeType": "StructuredDocumentation",
										"src": "6720:702:27",
										"text": "@notice Decreases the amount of liquidity in a position and accounts it to the position\n @param params tokenId The ID of the token for which liquidity is being decreased,\n amount The amount by which liquidity will be decreased,\n amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n deadline The time by which the transaction must be included to effect the change\n @return amount0 The amount of token0 accounted to the position's tokens owed\n @return amount1 The amount of token1 accounted to the position's tokens owed"
									},
									"functionSelector": "0c49ccbe",
									"id": 2211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseLiquidity",
									"nameLocation": "7436:17:27",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "7487:6:27",
												"nodeType": "VariableDeclaration",
												"scope": 2211,
												"src": "7454:39:27",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2200_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
												},
												"typeName": {
													"id": 2203,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2202,
														"name": "DecreaseLiquidityParams",
														"nameLocations": [
															"7454:23:27"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2200,
														"src": "7454:23:27"
													},
													"referencedDeclaration": 2200,
													"src": "7454:23:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_DecreaseLiquidityParams_$2200_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.DecreaseLiquidityParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7453:41:27"
									},
									"returnParameters": {
										"id": 2210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2207,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "7553:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2211,
												"src": "7545:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2206,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7545:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2209,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "7570:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2211,
												"src": "7562:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2208,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7562:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7544:34:27"
									},
									"scope": 2238,
									"src": "7427:152:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "INonfungiblePositionManager.CollectParams",
									"id": 2220,
									"members": [
										{
											"constant": false,
											"id": 2213,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "7624:7:27",
											"nodeType": "VariableDeclaration",
											"scope": 2220,
											"src": "7616:15:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2212,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7616:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2215,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "7649:9:27",
											"nodeType": "VariableDeclaration",
											"scope": 2220,
											"src": "7641:17:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2214,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "7641:7:27",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2217,
											"mutability": "mutable",
											"name": "amount0Max",
											"nameLocation": "7676:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2220,
											"src": "7668:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2216,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7668:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2219,
											"mutability": "mutable",
											"name": "amount1Max",
											"nameLocation": "7704:10:27",
											"nodeType": "VariableDeclaration",
											"scope": 2220,
											"src": "7696:18:27",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 2218,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "7696:7:27",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectParams",
									"nameLocation": "7592:13:27",
									"nodeType": "StructDefinition",
									"scope": 2238,
									"src": "7585:136:27",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2221,
										"nodeType": "StructuredDocumentation",
										"src": "7727:489:27",
										"text": "@notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n @param params tokenId The ID of the NFT for which tokens are being collected,\n recipient The account that should receive the tokens,\n amount0Max The maximum amount of token0 to collect,\n amount1Max The maximum amount of token1 to collect\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"
									},
									"functionSelector": "fc6f7865",
									"id": 2231,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "8230:7:27",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2224,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "8261:6:27",
												"nodeType": "VariableDeclaration",
												"scope": 2231,
												"src": "8238:29:27",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectParams_$2220_calldata_ptr",
													"typeString": "struct INonfungiblePositionManager.CollectParams"
												},
												"typeName": {
													"id": 2223,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2222,
														"name": "CollectParams",
														"nameLocations": [
															"8238:13:27"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2220,
														"src": "8238:13:27"
													},
													"referencedDeclaration": 2220,
													"src": "8238:13:27",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectParams_$2220_storage_ptr",
														"typeString": "struct INonfungiblePositionManager.CollectParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8237:31:27"
									},
									"returnParameters": {
										"id": 2230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2227,
												"mutability": "mutable",
												"name": "amount0",
												"nameLocation": "8303:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2231,
												"src": "8295:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8295:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "amount1",
												"nameLocation": "8320:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2231,
												"src": "8312:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8312:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8294:34:27"
									},
									"scope": 2238,
									"src": "8221:108:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2232,
										"nodeType": "StructuredDocumentation",
										"src": "8335:213:27",
										"text": "@notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n must be collected first.\n @param tokenId The ID of the token that is being burned"
									},
									"functionSelector": "42966c68",
									"id": 2237,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "8562:4:27",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2234,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8575:7:27",
												"nodeType": "VariableDeclaration",
												"scope": 2237,
												"src": "8567:15:27",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8567:7:27",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8566:17:27"
									},
									"returnParameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8600:0:27"
									},
									"scope": 2238,
									"src": "8553:48:27",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2239,
							"src": "584:8019:27",
							"usedErrors": [],
							"usedEvents": [
								93,
								102,
								111,
								2073,
								2084,
								2095
							]
						}
					],
					"src": "45:8559:27"
				},
				"id": 27
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryImmutableState.sol",
					"exportedSymbols": {
						"IPeripheryImmutableState": [
							2254
						]
					},
					"id": 2255,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2240,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:28"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryImmutableState",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2241,
								"nodeType": "StructuredDocumentation",
								"src": "71:91:28",
								"text": "@title Immutable state\n @notice Functions that return immutable state of the router"
							},
							"fullyImplemented": false,
							"id": 2254,
							"linearizedBaseContracts": [
								2254
							],
							"name": "IPeripheryImmutableState",
							"nameLocation": "172:24:28",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2242,
										"nodeType": "StructuredDocumentation",
										"src": "203:57:28",
										"text": "@return Returns the address of the Uniswap V3 factory"
									},
									"functionSelector": "c45a0155",
									"id": 2247,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "factory",
									"nameLocation": "274:7:28",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "281:2:28"
									},
									"returnParameters": {
										"id": 2246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2247,
												"src": "307:7:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "307:7:28",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "306:9:28"
									},
									"scope": 2254,
									"src": "265:51:28",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2248,
										"nodeType": "StructuredDocumentation",
										"src": "322:40:28",
										"text": "@return Returns the address of WETH9"
									},
									"functionSelector": "4aa4a4fc",
									"id": 2253,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH9",
									"nameLocation": "376:5:28",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "381:2:28"
									},
									"returnParameters": {
										"id": 2252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2251,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "407:7:28",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "407:7:28",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "406:9:28"
									},
									"scope": 2254,
									"src": "367:49:28",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2255,
							"src": "162:256:28",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:374:28"
				},
				"id": 28
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPeripheryPayments.sol",
					"exportedSymbols": {
						"IPeripheryPayments": [
							2280
						]
					},
					"id": 2281,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2256,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:29"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPeripheryPayments",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2257,
								"nodeType": "StructuredDocumentation",
								"src": "71:92:29",
								"text": "@title Periphery Payments\n @notice Functions to ease deposits and withdrawals of ETH"
							},
							"fullyImplemented": false,
							"id": 2280,
							"linearizedBaseContracts": [
								2280
							],
							"name": "IPeripheryPayments",
							"nameLocation": "173:18:29",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2258,
										"nodeType": "StructuredDocumentation",
										"src": "198:302:29",
										"text": "@notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n @param amountMinimum The minimum amount of WETH9 to unwrap\n @param recipient The address receiving ETH"
									},
									"functionSelector": "49404b7c",
									"id": 2265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unwrapWETH9",
									"nameLocation": "514:11:29",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2260,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "534:13:29",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "526:21:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2262,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "557:9:29",
												"nodeType": "VariableDeclaration",
												"scope": 2265,
												"src": "549:17:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "525:42:29"
									},
									"returnParameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:0:29"
									},
									"scope": 2280,
									"src": "505:80:29",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2266,
										"nodeType": "StructuredDocumentation",
										"src": "591:225:29",
										"text": "@notice Refunds any ETH balance held by this contract to the `msg.sender`\n @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n that use ether for the input amount"
									},
									"functionSelector": "12210e8a",
									"id": 2269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "refundETH",
									"nameLocation": "830:9:29",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "839:2:29"
									},
									"returnParameters": {
										"id": 2268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:29"
									},
									"scope": 2280,
									"src": "821:38:29",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2270,
										"nodeType": "StructuredDocumentation",
										"src": "865:427:29",
										"text": "@notice Transfers the full amount of a token held by this contract to recipient\n @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n @param token The contract address of the token which will be transferred to `recipient`\n @param amountMinimum The minimum amount of token required for a transfer\n @param recipient The destination address of the token"
									},
									"functionSelector": "df2ab5bb",
									"id": 2279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sweepToken",
									"nameLocation": "1306:10:29",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2272,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1334:5:29",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "1326:13:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1326:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2274,
												"mutability": "mutable",
												"name": "amountMinimum",
												"nameLocation": "1357:13:29",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "1349:21:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1349:7:29",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2276,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1388:9:29",
												"nodeType": "VariableDeclaration",
												"scope": 2279,
												"src": "1380:17:29",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1380:7:29",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1316:87:29"
									},
									"returnParameters": {
										"id": 2278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1420:0:29"
									},
									"scope": 2280,
									"src": "1297:124:29",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2281,
							"src": "163:1260:29",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1379:29"
				},
				"id": 29
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/interfaces/IPoolInitializer.sol",
					"exportedSymbols": {
						"IPoolInitializer": [
							2299
						]
					},
					"id": 2300,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2282,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:30"
						},
						{
							"id": 2283,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:30"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolInitializer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2284,
								"nodeType": "StructuredDocumentation",
								"src": "91:194:30",
								"text": "@title Creates and initializes V3 Pools\n @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n require the pool to exist."
							},
							"fullyImplemented": false,
							"id": 2299,
							"linearizedBaseContracts": [
								2299
							],
							"name": "IPoolInitializer",
							"nameLocation": "295:16:30",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2285,
										"nodeType": "StructuredDocumentation",
										"src": "318:648:30",
										"text": "@notice Creates a new pool if it does not exist, then initializes if not initialized\n @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n @param token0 The contract address of token0 of the pool\n @param token1 The contract address of token1 of the pool\n @param fee The fee amount of the v3 pool for the specified token pair\n @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary"
									},
									"functionSelector": "13ead562",
									"id": 2298,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAndInitializePoolIfNecessary",
									"nameLocation": "980:34:30",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2287,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "1032:6:30",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "1024:14:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2289,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "1056:6:30",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "1048:14:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1048:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "1079:3:30",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "1072:10:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2290,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "1072:6:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2293,
												"mutability": "mutable",
												"name": "sqrtPriceX96",
												"nameLocation": "1100:12:30",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "1092:20:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 2292,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1092:7:30",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:104:30"
									},
									"returnParameters": {
										"id": 2297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2296,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1153:4:30",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "1145:12:30",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1145:7:30",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1144:14:30"
									},
									"scope": 2299,
									"src": "971:188:30",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2300,
							"src": "285:876:30",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1117:30"
				},
				"id": 30
			},
			"https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol": {
				"ast": {
					"absolutePath": "https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol",
					"exportedSymbols": {
						"PoolAddress": [
							2397
						]
					},
					"id": 2398,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2301,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:31"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "PoolAddress",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2302,
								"nodeType": "StructuredDocumentation",
								"src": "71:96:31",
								"text": "@title Provides functions for deriving a pool address from the factory, tokens, and the fee"
							},
							"fullyImplemented": true,
							"id": 2397,
							"linearizedBaseContracts": [
								2397
							],
							"name": "PoolAddress",
							"nameLocation": "175:11:31",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2305,
									"mutability": "constant",
									"name": "POOL_INIT_CODE_HASH",
									"nameLocation": "219:19:31",
									"nodeType": "VariableDeclaration",
									"scope": 2397,
									"src": "193:114:31",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2303,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "193:7:31",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307865333466313939623139623262346634376636383434323631396435353535323764323434663738613332393765613839333235663834336638376238623534",
										"id": 2304,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "241:66:31",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102814774271675688723325049954498779091328469440286648861889194717372678376276_by_1",
											"typeString": "int_const 1028...(70 digits omitted)...6276"
										},
										"value": "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "PoolAddress.PoolKey",
									"documentation": {
										"id": 2306,
										"nodeType": "StructuredDocumentation",
										"src": "314:43:31",
										"text": "@notice The identifying key of the pool"
									},
									"id": 2313,
									"members": [
										{
											"constant": false,
											"id": 2308,
											"mutability": "mutable",
											"name": "token0",
											"nameLocation": "395:6:31",
											"nodeType": "VariableDeclaration",
											"scope": 2313,
											"src": "387:14:31",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2307,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "387:7:31",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2310,
											"mutability": "mutable",
											"name": "token1",
											"nameLocation": "419:6:31",
											"nodeType": "VariableDeclaration",
											"scope": 2313,
											"src": "411:14:31",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2309,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "411:7:31",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2312,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "442:3:31",
											"nodeType": "VariableDeclaration",
											"scope": 2313,
											"src": "435:10:31",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 2311,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "435:6:31",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolKey",
									"nameLocation": "369:7:31",
									"nodeType": "StructDefinition",
									"scope": 2397,
									"src": "362:90:31",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2344,
										"nodeType": "Block",
										"src": "917:141:31",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2326,
														"name": "tokenA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2316,
														"src": "931:6:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 2327,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2318,
														"src": "940:6:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "931:15:31",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2337,
												"nodeType": "IfStatement",
												"src": "927:56:31",
												"trueBody": {
													"expression": {
														"id": 2335,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"components": [
																{
																	"id": 2329,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2316,
																	"src": "949:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2330,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2318,
																	"src": "957:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2331,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "TupleExpression",
															"src": "948:16:31",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"components": [
																{
																	"id": 2332,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2318,
																	"src": "968:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2333,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2316,
																	"src": "976:6:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2334,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "967:16:31",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"src": "948:35:31",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2336,
													"nodeType": "ExpressionStatement",
													"src": "948:35:31"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2339,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2316,
															"src": "1017:6:31",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2340,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2318,
															"src": "1033:6:31",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2341,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2320,
															"src": "1046:3:31",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														],
														"id": 2338,
														"name": "PoolKey",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2313,
														"src": "1000:7:31",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_PoolKey_$2313_storage_ptr_$",
															"typeString": "type(struct PoolAddress.PoolKey storage pointer)"
														}
													},
													"id": 2342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"1009:6:31",
														"1025:6:31",
														"1041:3:31"
													],
													"names": [
														"token0",
														"token1",
														"fee"
													],
													"nodeType": "FunctionCall",
													"src": "1000:51:31",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
														"typeString": "struct PoolAddress.PoolKey memory"
													}
												},
												"functionReturnParameters": 2325,
												"id": 2343,
												"nodeType": "Return",
												"src": "993:58:31"
											}
										]
									},
									"documentation": {
										"id": 2314,
										"nodeType": "StructuredDocumentation",
										"src": "458:321:31",
										"text": "@notice Returns PoolKey: the ordered tokens with the matched fee levels\n @param tokenA The first token of a pool, unsorted\n @param tokenB The second token of a pool, unsorted\n @param fee The fee level of the pool\n @return Poolkey The pool details with ordered token0 and token1 assignments"
									},
									"id": 2345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolKey",
									"nameLocation": "793:10:31",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2316,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "821:6:31",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "813:14:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2318,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "845:6:31",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "837:14:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "837:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2320,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "868:3:31",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "861:10:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2319,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "861:6:31",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "803:74:31"
									},
									"returnParameters": {
										"id": 2325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2324,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "901:14:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2323,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2322,
														"name": "PoolKey",
														"nameLocations": [
															"901:7:31"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2313,
														"src": "901:7:31"
													},
													"referencedDeclaration": 2313,
													"src": "901:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2313_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "900:16:31"
									},
									"scope": 2397,
									"src": "784:274:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2395,
										"nodeType": "Block",
										"src": "1403:423:31",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2361,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2357,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2351,
																	"src": "1421:3:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2358,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1425:6:31",
																"memberName": "token0",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2308,
																"src": "1421:10:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 2359,
																	"name": "key",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2351,
																	"src": "1434:3:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
																		"typeString": "struct PoolAddress.PoolKey memory"
																	}
																},
																"id": 2360,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1438:6:31",
																"memberName": "token1",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2310,
																"src": "1434:10:31",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1421:23:31",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2356,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1413:7:31",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 2362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1413:32:31",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2363,
												"nodeType": "ExpressionStatement",
												"src": "1413:32:31"
											},
											{
												"expression": {
													"id": 2393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2364,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2354,
														"src": "1455:4:31",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"hexValue": "ff",
																								"id": 2374,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "hexString",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1589:7:31",
																								"typeDescriptions": {
																									"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																									"typeString": "literal_string hex\"ff\""
																								}
																							},
																							{
																								"id": 2375,
																								"name": "factory",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2348,
																								"src": "1622:7:31",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"expression": {
																													"id": 2379,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 2351,
																													"src": "1676:3:31",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 2380,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "1680:6:31",
																												"memberName": "token0",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 2308,
																												"src": "1676:10:31",
																												"typeDescriptions": {
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												}
																											},
																											{
																												"expression": {
																													"id": 2381,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 2351,
																													"src": "1688:3:31",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 2382,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "1692:6:31",
																												"memberName": "token1",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 2310,
																												"src": "1688:10:31",
																												"typeDescriptions": {
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												}
																											},
																											{
																												"expression": {
																													"id": 2383,
																													"name": "key",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 2351,
																													"src": "1700:3:31",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
																														"typeString": "struct PoolAddress.PoolKey memory"
																													}
																												},
																												"id": 2384,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "1704:3:31",
																												"memberName": "fee",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 2312,
																												"src": "1700:7:31",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint24",
																													"typeString": "uint24"
																												}
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												},
																												{
																													"typeIdentifier": "t_address",
																													"typeString": "address"
																												},
																												{
																													"typeIdentifier": "t_uint24",
																													"typeString": "uint24"
																												}
																											],
																											"expression": {
																												"id": 2377,
																												"name": "abi",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 4294967295,
																												"src": "1665:3:31",
																												"typeDescriptions": {
																													"typeIdentifier": "t_magic_abi",
																													"typeString": "abi"
																												}
																											},
																											"id": 2378,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"lValueRequested": false,
																											"memberLocation": "1669:6:31",
																											"memberName": "encode",
																											"nodeType": "MemberAccess",
																											"src": "1665:10:31",
																											"typeDescriptions": {
																												"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																												"typeString": "function () pure returns (bytes memory)"
																											}
																										},
																										"id": 2385,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"kind": "functionCall",
																										"lValueRequested": false,
																										"nameLocations": [],
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "1665:43:31",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									],
																									"id": 2376,
																									"name": "keccak256",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967288,
																									"src": "1655:9:31",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																										"typeString": "function (bytes memory) pure returns (bytes32)"
																									}
																								},
																								"id": 2386,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "1655:54:31",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							},
																							{
																								"id": 2387,
																								"name": "POOL_INIT_CODE_HASH",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2305,
																								"src": "1735:19:31",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9",
																									"typeString": "literal_string hex\"ff\""
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								},
																								{
																									"typeIdentifier": "t_bytes32",
																									"typeString": "bytes32"
																								}
																							],
																							"expression": {
																								"id": 2372,
																								"name": "abi",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967295,
																								"src": "1547:3:31",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_abi",
																									"typeString": "abi"
																								}
																							},
																							"id": 2373,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberLocation": "1551:12:31",
																							"memberName": "encodePacked",
																							"nodeType": "MemberAccess",
																							"src": "1547:16:31",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																								"typeString": "function () pure returns (bytes memory)"
																							}
																						},
																						"id": 2388,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1547:229:31",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 2371,
																					"name": "keccak256",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967288,
																					"src": "1516:9:31",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																						"typeString": "function (bytes memory) pure returns (bytes32)"
																					}
																				},
																				"id": 2389,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1516:278:31",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 2370,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1491:7:31",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 2369,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1491:7:31",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1491:317:31",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1482:7:31",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 2367,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "1482:7:31",
																		"typeDescriptions": {}
																	}
																},
																"id": 2391,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1482:327:31",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 2366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1462:7:31",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2365,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1462:7:31",
																"typeDescriptions": {}
															}
														},
														"id": 2392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1462:357:31",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1455:364:31",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2394,
												"nodeType": "ExpressionStatement",
												"src": "1455:364:31"
											}
										]
									},
									"documentation": {
										"id": 2346,
										"nodeType": "StructuredDocumentation",
										"src": "1064:236:31",
										"text": "@notice Deterministically computes the pool address given the factory and PoolKey\n @param factory The Uniswap V3 factory contract address\n @param key The PoolKey\n @return pool The contract address of the V3 pool"
									},
									"id": 2396,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "computeAddress",
									"nameLocation": "1314:14:31",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2348,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "1337:7:31",
												"nodeType": "VariableDeclaration",
												"scope": 2396,
												"src": "1329:15:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1329:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2351,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1361:3:31",
												"nodeType": "VariableDeclaration",
												"scope": 2396,
												"src": "1346:18:31",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolKey_$2313_memory_ptr",
													"typeString": "struct PoolAddress.PoolKey"
												},
												"typeName": {
													"id": 2350,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2349,
														"name": "PoolKey",
														"nameLocations": [
															"1346:7:31"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2313,
														"src": "1346:7:31"
													},
													"referencedDeclaration": 2313,
													"src": "1346:7:31",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolKey_$2313_storage_ptr",
														"typeString": "struct PoolAddress.PoolKey"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:37:31"
									},
									"returnParameters": {
										"id": 2355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2354,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1397:4:31",
												"nodeType": "VariableDeclaration",
												"scope": 2396,
												"src": "1389:12:31",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1389:7:31",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1388:14:31"
									},
									"scope": 2397,
									"src": "1305:521:31",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2398,
							"src": "167:1661:31",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "45:1784:31"
				},
				"id": 31
			}
		}
	}
}